{"version":3,"sources":["webpack:///api-bundle.js","webpack:///webpack/bootstrap 7d2699d36ecc58ceef9c","webpack:///./src/index.js","webpack:///./src/ApiClient.js","webpack:///./src/model/RestError.js","webpack:///./src/model/RestOK.js","webpack:///./src/model/DirEntry.js","webpack:///./src/model/Stats.js","webpack:///./src/model/Alias.js","webpack:///./src/model/ChildProcess.js","webpack:///./src/model/Credential.js","webpack:///./src/model/Execution.js","webpack:///./src/model/ExecutionResult.js","webpack:///./src/model/RemoteAccess.js","webpack:///./src/model/Session.js","webpack:///./src/model/Token.js","webpack:///./src/model/User.js","webpack:///./src/model/Workspace.js","webpack:///./~/superagent/superagent.js","webpack:///./src/api/AliasApi.js","webpack:///./src/api/AuthApi.js","webpack:///./src/api/OpsApi.js","webpack:///./src/api/RemotesApi.js","webpack:///./src/api/SessionApi.js","webpack:///./src/api/WfsApi.js","webpack:///./src/api/WorkspaceApi.js","webpack:///./src/model/Match.js"],"names":["define","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","factory","apply","undefined","ApiClient","Alias","ChildProcess","Credential","DirEntry","Execution","ExecutionResult","Match","RemoteAccess","RestError","RestOK","Session","Stats","Token","User","Workspace","AliasApi","AuthApi","OpsApi","RemotesApi","SessionApi","WfsApi","WorkspaceApi","root","this","superagent","basePath","replace","authentications","webida-simple-auth","type","in","name","defaultHeaders","timeout","prototype","paramToString","param","Date","toJSON","toString","buildUrl","path","pathParams","match","url","_this","fullMatch","key","value","hasOwnProperty","encodeURIComponent","isJsonMime","contentType","Boolean","jsonPreferredMime","contentTypes","i","length","isFileParam","window","ReadStream","Buffer","Blob","File","normalizeParams","params","newParams","Array","isArray","CollectionFormatEnum","CSV","SSV","TSV","PIPES","MULTI","buildCollectionParam","collectionFormat","map","join","Error","applyAuthToRequest","request","authNames","forEach","authName","auth","username","password","apiKey","data","apiKeyPrefix","set","query","accessToken","Authorization","deserialize","response","returnType","body","text","convertToType","callApi","httpMethod","queryParams","headerParams","formParams","bodyParam","accepts","callback","header","send","_formParams","attach","field","accept","end","error","parseDate","str","parseInt","parseFloat","String","Object","constructFromObject","itemType","item","keyType","valueType","k","result","obj","instance","message","stats","children","birthtime","mtime","mode","size","nlink","TypeEnum","FILE","DIRECTORY","BLOCK_DEVICE","CHARACTER_DEVICE","LINK","FIFO","SOCKET","DUMMY","pid","command","args","execId","state","startedAt","StateEnum","CREATED","WORKING","KILLING","EXITED","loginId","loginPassword","stdout","stderr","serverUrl","workspaceId","masterToken","clientAddress","connectedAt","disconnectedAt","NORMAL","LOSING","CLOSING","tokenType","expiresAt","issuedAt","TokenTypeEnum","MASTER","ACCESS","description","createdAt","workspacePath","excludedPaths","offlineCachePaths","f","amd","g","global","self","e","t","n","r","s","o","u","a","require","code","l","1","isObject","2","clearTimeout","_timeout","_timer","parse","fn","_parser","serialize","_serializer","ms","then","resolve","reject","_fullfilledPromise","Promise","innerResolve","innerReject","err","res","use","get","_header","toLowerCase","getHeader","val","unset","_getFormData","append","abort","_aborted","xhr","req","emit","withCredentials","_withCredentials","redirects","_maxRedirects","method","_data","_isHost","./is-object","3","RequestConstructor","arguments","4","Emitter","mixin","on","addEventListener","event","_callbacks","push","once","off","removeListener","removeAllListeners","removeEventListener","callbacks","cb","splice","slice","len","listeners","hasListeners","5","arr","initial","idx","curr","6","noop","pairs","pushEncodedKeyValuePair","v","subkey","parseString","pair","pos","split","indexOf","decodeURIComponent","parseHeader","index","line","lines","fields","pop","trim","isJSON","mime","test","shift","reduce","parts","Response","options","responseType","responseText","statusText","_setStatusProperties","status","headers","getAllResponseHeaders","getResponseHeader","_setHeaderProperties","_parseBody","Request","_query","original","rawResponse","statusCode","new_err","del","requestBase","bind","getXHR","XMLHttpRequest","location","protocol","ActiveXObject","serializeObject","types","html","json","xml","urlencoded","form","form-data","application/x-www-form-urlencoded","application/json","JSON","stringify","ct","statusType","info","ok","clientError","serverError","toError","accepted","noContent","badRequest","unauthorized","notAcceptable","notFound","forbidden","msg","_responseType","user","pass","btoa","file","filename","_formData","FormData","_callback","crossDomainError","crossDomain","_timeoutError","_appendQueryString","onreadystatechange","readyState","timedout","handleProgress","total","percent","direction","onprogress","upload","setTimeout","open","setRequestHeader","head","patch","post","put","./request","./request-base","emitter","apiClient","findAliases","aliasId","postBody","putAlias","removeAliases","getInfo","issueToken","opts","login","wfsId","wfsPathList","pattern","replaceTo","ignoreCase","search","findRemoteAccesses","putRemoteAccess","removeRemoteAccess","closeSessions","sessionId","closeAfter","findSessions","copy","wfsPath","srcPath","noOverwrite","followSymbolicLinks","preserveTimestamps","createDir","dirTree","maxDepth","move","readFile","remove","noRecursive","stat","ignoreError","writeFile","ensureParents","cancel","createWorkspace","localPath","exec","async","findProcs","findWorkspaces","disposable","removeWorkspace","expunge","updateWorkspace"],"mappings":"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","file":"api-bundle.js","sourcesContent":["define(function() { return /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(7), __webpack_require__(8), __webpack_require__(9), __webpack_require__(4), __webpack_require__(10), __webpack_require__(11), __webpack_require__(25), __webpack_require__(12), __webpack_require__(2), __webpack_require__(3), __webpack_require__(13), __webpack_require__(5), __webpack_require__(14), __webpack_require__(15), __webpack_require__(16), __webpack_require__(18), __webpack_require__(19), __webpack_require__(20), __webpack_require__(21), __webpack_require__(22), __webpack_require__(23), __webpack_require__(24)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('./ApiClient'), require('./model/Alias'), require('./model/ChildProcess'), require('./model/Credential'), require('./model/DirEntry'), require('./model/Execution'), require('./model/ExecutionResult'), require('./model/Match'), require('./model/RemoteAccess'), require('./model/RestError'), require('./model/RestOK'), require('./model/Session'), require('./model/Stats'), require('./model/Token'), require('./model/User'), require('./model/Workspace'), require('./api/AliasApi'), require('./api/AuthApi'), require('./api/OpsApi'), require('./api/RemotesApi'), require('./api/SessionApi'), require('./api/WfsApi'), require('./api/WorkspaceApi'));\n\t  }\n\t}(function(ApiClient, Alias, ChildProcess, Credential, DirEntry, Execution, ExecutionResult, Match, RemoteAccess, RestError, RestOK, Session, Stats, Token, User, Workspace, AliasApi, AuthApi, OpsApi, RemotesApi, SessionApi, WfsApi, WorkspaceApi) {\n\t  'use strict';\n\t\n\t  /**\n\t   * Restful_API_for_Webida_clients_to_use_servers_data__features.<br>\n\t   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.\n\t   * <p>\n\t   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:\n\t   * <pre>\n\t   * var WebidaRestfulApi = require('index'); // See note below*.\n\t   * var xxxSvc = new WebidaRestfulApi.XxxApi(); // Allocate the API class we're going to use.\n\t   * var yyyModel = new WebidaRestfulApi.Yyy(); // Construct a model instance.\n\t   * yyyModel.someProperty = 'someValue';\n\t   * ...\n\t   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.\n\t   * ...\n\t   * </pre>\n\t   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})\n\t   * and put the application logic within the callback function.</em>\n\t   * </p>\n\t   * <p>\n\t   * A non-AMD browser application (discouraged) might do something like this:\n\t   * <pre>\n\t   * var xxxSvc = new WebidaRestfulApi.XxxApi(); // Allocate the API class we're going to use.\n\t   * var yyy = new WebidaRestfulApi.Yyy(); // Construct a model instance.\n\t   * yyyModel.someProperty = 'someValue';\n\t   * ...\n\t   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.\n\t   * ...\n\t   * </pre>\n\t   * </p>\n\t   * @module index\n\t   * @version 0.6.0\n\t   */\n\t  var exports = {\n\t    /**\n\t     * The ApiClient constructor.\n\t     * @property {module:ApiClient}\n\t     */\n\t    ApiClient: ApiClient,\n\t    /**\n\t     * The Alias model constructor.\n\t     * @property {module:model/Alias}\n\t     */\n\t    Alias: Alias,\n\t    /**\n\t     * The ChildProcess model constructor.\n\t     * @property {module:model/ChildProcess}\n\t     */\n\t    ChildProcess: ChildProcess,\n\t    /**\n\t     * The Credential model constructor.\n\t     * @property {module:model/Credential}\n\t     */\n\t    Credential: Credential,\n\t    /**\n\t     * The DirEntry model constructor.\n\t     * @property {module:model/DirEntry}\n\t     */\n\t    DirEntry: DirEntry,\n\t    /**\n\t     * The Execution model constructor.\n\t     * @property {module:model/Execution}\n\t     */\n\t    Execution: Execution,\n\t    /**\n\t     * The ExecutionResult model constructor.\n\t     * @property {module:model/ExecutionResult}\n\t     */\n\t    ExecutionResult: ExecutionResult,\n\t    /**\n\t     * The Match model constructor.\n\t     * @property {module:model/Match}\n\t     */\n\t    Match: Match,\n\t    /**\n\t     * The RemoteAccess model constructor.\n\t     * @property {module:model/RemoteAccess}\n\t     */\n\t    RemoteAccess: RemoteAccess,\n\t    /**\n\t     * The RestError model constructor.\n\t     * @property {module:model/RestError}\n\t     */\n\t    RestError: RestError,\n\t    /**\n\t     * The RestOK model constructor.\n\t     * @property {module:model/RestOK}\n\t     */\n\t    RestOK: RestOK,\n\t    /**\n\t     * The Session model constructor.\n\t     * @property {module:model/Session}\n\t     */\n\t    Session: Session,\n\t    /**\n\t     * The Stats model constructor.\n\t     * @property {module:model/Stats}\n\t     */\n\t    Stats: Stats,\n\t    /**\n\t     * The Token model constructor.\n\t     * @property {module:model/Token}\n\t     */\n\t    Token: Token,\n\t    /**\n\t     * The User model constructor.\n\t     * @property {module:model/User}\n\t     */\n\t    User: User,\n\t    /**\n\t     * The Workspace model constructor.\n\t     * @property {module:model/Workspace}\n\t     */\n\t    Workspace: Workspace,\n\t    /**\n\t     * The AliasApi service constructor.\n\t     * @property {module:api/AliasApi}\n\t     */\n\t    AliasApi: AliasApi,\n\t    /**\n\t     * The AuthApi service constructor.\n\t     * @property {module:api/AuthApi}\n\t     */\n\t    AuthApi: AuthApi,\n\t    /**\n\t     * The OpsApi service constructor.\n\t     * @property {module:api/OpsApi}\n\t     */\n\t    OpsApi: OpsApi,\n\t    /**\n\t     * The RemotesApi service constructor.\n\t     * @property {module:api/RemotesApi}\n\t     */\n\t    RemotesApi: RemotesApi,\n\t    /**\n\t     * The SessionApi service constructor.\n\t     * @property {module:api/SessionApi}\n\t     */\n\t    SessionApi: SessionApi,\n\t    /**\n\t     * The WfsApi service constructor.\n\t     * @property {module:api/WfsApi}\n\t     */\n\t    WfsApi: WfsApi,\n\t    /**\n\t     * The WorkspaceApi service constructor.\n\t     * @property {module:api/WorkspaceApi}\n\t     */\n\t    WorkspaceApi: WorkspaceApi\n\t  };\n\t\n\t  return exports;\n\t}));\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(17)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('superagent'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.ApiClient = factory(root.superagent);\n\t  }\n\t}(this, function(superagent) {\n\t  'use strict';\n\t\n\t  /**\n\t   * @module ApiClient\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n\t   * application to use this class directly - the *Api and model classes provide the public API for the service. The\n\t   * contents of this file should be regarded as internal but are documented for completeness.\n\t   * @alias module:ApiClient\n\t   * @class\n\t   */\n\t  var exports = function() {\n\t    /**\n\t     * The base URL against which to resolve every API call's (relative) path.\n\t     * @type {String}\n\t     * @default https://localhost/api\n\t     */\n\t    this.basePath = 'https://localhost/api'.replace(/\\/+$/, '');\n\t\n\t    /**\n\t     * The authentication methods to be included for all API calls.\n\t     * @type {Array.<String>}\n\t     */\n\t    this.authentications = {\n\t      'webida-simple-auth': {type: 'apiKey', 'in': 'header', name: 'Authorization'}\n\t    };\n\t    /**\n\t     * The default HTTP headers to be included for all API calls.\n\t     * @type {Array.<String>}\n\t     * @default {}\n\t     */\n\t    this.defaultHeaders = {};\n\t\n\t    /**\n\t     * The default HTTP timeout for all API calls.\n\t     * @type {Number}\n\t     * @default 60000\n\t     */\n\t    this.timeout = 60000;\n\t  };\n\t\n\t  /**\n\t   * Returns a string representation for an actual parameter.\n\t   * @param param The actual parameter.\n\t   * @returns {String} The string representation of <code>param</code>.\n\t   */\n\t  exports.prototype.paramToString = function(param) {\n\t    if (param == undefined || param == null) {\n\t      return '';\n\t    }\n\t    if (param instanceof Date) {\n\t      return param.toJSON();\n\t    }\n\t    return param.toString();\n\t  };\n\t\n\t  /**\n\t   * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n\t   * NOTE: query parameters are not handled here.\n\t   * @param {String} path The path to append to the base URL.\n\t   * @param {Object} pathParams The parameter values to append.\n\t   * @returns {String} The encoded path with parameter values substituted.\n\t   */\n\t  exports.prototype.buildUrl = function(path, pathParams) {\n\t    if (!path.match(/^\\//)) {\n\t      path = '/' + path;\n\t    }\n\t    var url = this.basePath + path;\n\t    var _this = this;\n\t    url = url.replace(/\\{([\\w-]+)\\}/g, function(fullMatch, key) {\n\t      var value;\n\t      if (pathParams.hasOwnProperty(key)) {\n\t        value = _this.paramToString(pathParams[key]);\n\t      } else {\n\t        value = fullMatch;\n\t      }\n\t      return encodeURIComponent(value);\n\t    });\n\t    return url;\n\t  };\n\t\n\t  /**\n\t   * Checks whether the given content type represents JSON.<br>\n\t   * JSON content type examples:<br>\n\t   * <ul>\n\t   * <li>application/json</li>\n\t   * <li>application/json; charset=UTF8</li>\n\t   * <li>APPLICATION/JSON</li>\n\t   * </ul>\n\t   * @param {String} contentType The MIME content type to check.\n\t   * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n\t   */\n\t  exports.prototype.isJsonMime = function(contentType) {\n\t    return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n\t  };\n\t\n\t  /**\n\t   * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n\t   * @param {Array.<String>} contentTypes\n\t   * @returns {String} The chosen content type, preferring JSON.\n\t   */\n\t  exports.prototype.jsonPreferredMime = function(contentTypes) {\n\t    for (var i = 0; i < contentTypes.length; i++) {\n\t      if (this.isJsonMime(contentTypes[i])) {\n\t        return contentTypes[i];\n\t      }\n\t    }\n\t    return contentTypes[0];\n\t  };\n\t\n\t  /**\n\t   * Checks whether the given parameter value represents file-like content.\n\t   * @param param The parameter to check.\n\t   * @returns {Boolean} <code>true</code> if <code>param</code> represents a file. \n\t   */\n\t  exports.prototype.isFileParam = function(param) {\n\t    // fs.ReadStream in Node.js (but not in runtime like browserify)\n\t    if (typeof window === 'undefined' &&\n\t        \"function\" === 'function' &&\n\t        __webpack_require__(6) &&\n\t        param instanceof __webpack_require__(6).ReadStream) {\n\t      return true;\n\t    }\n\t    // Buffer in Node.js\n\t    if (typeof Buffer === 'function' && param instanceof Buffer) {\n\t      return true;\n\t    }\n\t    // Blob in browser\n\t    if (typeof Blob === 'function' && param instanceof Blob) {\n\t      return true;\n\t    }\n\t    // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n\t    if (typeof File === 'function' && param instanceof File) {\n\t      return true;\n\t    }\n\t    return false;\n\t  };\n\t\n\t  /**\n\t   * Normalizes parameter values:\n\t   * <ul>\n\t   * <li>remove nils</li>\n\t   * <li>keep files and arrays</li>\n\t   * <li>format to string with `paramToString` for other cases</li>\n\t   * </ul>\n\t   * @param {Object.<String, Object>} params The parameters as object properties.\n\t   * @returns {Object.<String, Object>} normalized parameters.\n\t   */\n\t  exports.prototype.normalizeParams = function(params) {\n\t    var newParams = {};\n\t    for (var key in params) {\n\t      if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n\t        var value = params[key];\n\t        if (this.isFileParam(value) || Array.isArray(value)) {\n\t          newParams[key] = value;\n\t        } else {\n\t          newParams[key] = this.paramToString(value);\n\t        }\n\t      }\n\t    }\n\t    return newParams;\n\t  };\n\t\n\t  /**\n\t   * Enumeration of collection format separator strategies.\n\t   * @enum {String} \n\t   * @readonly\n\t   */\n\t  exports.CollectionFormatEnum = {\n\t    /**\n\t     * Comma-separated values. Value: <code>csv</code>\n\t     * @const\n\t     */\n\t    CSV: ',',\n\t    /**\n\t     * Space-separated values. Value: <code>ssv</code>\n\t     * @const\n\t     */\n\t    SSV: ' ',\n\t    /**\n\t     * Tab-separated values. Value: <code>tsv</code>\n\t     * @const\n\t     */\n\t    TSV: '\\t',\n\t    /**\n\t     * Pipe(|)-separated values. Value: <code>pipes</code>\n\t     * @const\n\t     */\n\t    PIPES: '|',\n\t    /**\n\t     * Native array. Value: <code>multi</code>\n\t     * @const\n\t     */\n\t    MULTI: 'multi'\n\t  };\n\t\n\t  /**\n\t   * Builds a string representation of an array-type actual parameter, according to the given collection format.\n\t   * @param {Array} param An array parameter.\n\t   * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n\t   * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n\t   * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n\t   */\n\t  exports.prototype.buildCollectionParam = function buildCollectionParam(param, collectionFormat) {\n\t    if (param == null) {\n\t      return null;\n\t    }\n\t    switch (collectionFormat) {\n\t      case 'csv':\n\t        return param.map(this.paramToString).join(',');\n\t      case 'ssv':\n\t        return param.map(this.paramToString).join(' ');\n\t      case 'tsv':\n\t        return param.map(this.paramToString).join('\\t');\n\t      case 'pipes':\n\t        return param.map(this.paramToString).join('|');\n\t      case 'multi':\n\t        // return the array directly as SuperAgent will handle it as expected\n\t        return param.map(this.paramToString);\n\t      default:\n\t        throw new Error('Unknown collection format: ' + collectionFormat);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Applies authentication headers to the request.\n\t   * @param {Object} request The request object created by a <code>superagent()</code> call.\n\t   * @param {Array.<String>} authNames An array of authentication method names.\n\t   */\n\t  exports.prototype.applyAuthToRequest = function(request, authNames) {\n\t    var _this = this;\n\t    authNames.forEach(function(authName) {\n\t      var auth = _this.authentications[authName];\n\t      switch (auth.type) {\n\t        case 'basic':\n\t          if (auth.username || auth.password) {\n\t            request.auth(auth.username || '', auth.password || '');\n\t          }\n\t          break;\n\t        case 'apiKey':\n\t          if (auth.apiKey) {\n\t            var data = {};\n\t            if (auth.apiKeyPrefix) {\n\t              data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n\t            } else {\n\t              data[auth.name] = auth.apiKey;\n\t            }\n\t            if (auth['in'] === 'header') {\n\t              request.set(data);\n\t            } else {\n\t              request.query(data);\n\t            }\n\t          }\n\t          break;\n\t        case 'oauth2':\n\t          if (auth.accessToken) {\n\t            request.set({'Authorization': 'Bearer ' + auth.accessToken});\n\t          }\n\t          break;\n\t        default:\n\t          throw new Error('Unknown authentication type: ' + auth.type);\n\t      }\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Deserializes an HTTP response body into a value of the specified type.\n\t   * @param {Object} response A SuperAgent response object.\n\t   * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n\t   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n\t   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n\t   * all properties on <code>data<code> will be converted to this type.\n\t   * @returns A value of the specified type.\n\t   */\n\t  exports.prototype.deserialize = function deserialize(response, returnType) {\n\t    if (response == null || returnType == null) {\n\t      return null;\n\t    }\n\t    // Rely on SuperAgent for parsing response body.\n\t    // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n\t    var data = response.body;\n\t    if (data == null) {\n\t      // SuperAgent does not always produce a body; use the unparsed response as a fallback\n\t      data = response.text;\n\t    }\n\t    return exports.convertToType(data, returnType);\n\t  };\n\t\n\t  /**\n\t   * Callback function to receive the result of the operation.\n\t   * @callback module:ApiClient~callApiCallback\n\t   * @param {String} error Error message, if any.\n\t   * @param data The data returned by the service call.\n\t   * @param {String} response The complete HTTP response.\n\t   */\n\t\n\t  /**\n\t   * Invokes the REST service using the supplied settings and parameters.\n\t   * @param {String} path The base URL to invoke.\n\t   * @param {String} httpMethod The HTTP method to use.\n\t   * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n\t   * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n\t   * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n\t   * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n\t   * @param {Object} bodyParam The value to pass as the request body.\n\t   * @param {Array.<String>} authNames An array of authentication type names.\n\t   * @param {Array.<String>} contentTypes An array of request MIME types.\n\t   * @param {Array.<String>} accepts An array of acceptable response MIME types.\n\t   * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n\t   * constructor for a complex type.\n\t   * @param {module:ApiClient~callApiCallback} callback The callback function.\n\t   * @returns {Object} The SuperAgent request object.\n\t   */\n\t  exports.prototype.callApi = function callApi(path, httpMethod, pathParams,\n\t      queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n\t      returnType, callback) {\n\t\n\t    var _this = this;\n\t    var url = this.buildUrl(path, pathParams);\n\t    var request = superagent(httpMethod, url);\n\t\n\t    // apply authentications\n\t    this.applyAuthToRequest(request, authNames);\n\t\n\t    // set query parameters\n\t    request.query(this.normalizeParams(queryParams));\n\t\n\t    // set header parameters\n\t    request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\t\n\t    // set request timeout\n\t    request.timeout(this.timeout);\n\t\n\t    var contentType = this.jsonPreferredMime(contentTypes);\n\t    if (contentType !== 'multipart/form-data') {\n\t      if (contentType) {\n\t        request.type(contentType);\n\t      } else if (!request.header['Content-Type']) {\n\t        request.type('application/json');\n\t      }\n\t    }\n\t\n\t    if (contentType === 'application/x-www-form-urlencoded') {\n\t      request.send(this.normalizeParams(formParams));\n\t    } else if (contentType == 'multipart/form-data') {\n\t      var _formParams = this.normalizeParams(formParams);\n\t      for (var key in _formParams) {\n\t        if (_formParams.hasOwnProperty(key)) {\n\t          if (this.isFileParam(_formParams[key])) {\n\t            // file field\n\t            request.attach(key, _formParams[key]);\n\t          } else {\n\t            request.field(key, _formParams[key]);\n\t          }\n\t        }\n\t      }\n\t    } else if (bodyParam) {\n\t      request.send(bodyParam);\n\t    }\n\t\n\t    var accept = this.jsonPreferredMime(accepts);\n\t    if (accept) {\n\t      request.accept(accept);\n\t    }\n\t\n\t\n\t    request.end(function(error, response) {\n\t      if (callback) {\n\t        var data = null;\n\t        if (!error) {\n\t          data = _this.deserialize(response, returnType);\n\t        }\n\t        callback(error, data, response);\n\t      }\n\t    });\n\t\n\t    return request;\n\t  };\n\t\n\t  /**\n\t   * Parses an ISO-8601 string representation of a date value.\n\t   * @param {String} str The date value as a string.\n\t   * @returns {Date} The parsed date object.\n\t   */\n\t  exports.parseDate = function(str) {\n\t    return new Date(str.replace(/T/i, ' '));\n\t  };\n\t\n\t  /**\n\t   * Converts a value to the specified type.\n\t   * @param {(String|Object)} data The data to convert, as a string or object.\n\t   * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n\t   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n\t   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n\t   * all properties on <code>data<code> will be converted to this type.\n\t   * @returns An instance of the specified type.\n\t   */\n\t  exports.convertToType = function(data, type) {\n\t    switch (type) {\n\t      case 'Boolean':\n\t        return Boolean(data);\n\t      case 'Integer':\n\t        return parseInt(data, 10);\n\t      case 'Number':\n\t        return parseFloat(data);\n\t      case 'String':\n\t        return String(data);\n\t      case 'Date':\n\t        return this.parseDate(String(data));\n\t      default:\n\t        if (type === Object || type === File) {\n\t          // generic object or Blob - return directly\n\t          return data;\n\t        } else if (typeof type === 'function') {\n\t          if (typeof type.constructFromObject !== 'function') {\n\t            // some manually written models  might have no factory function\n\t            return data;\n\t          } else {\n\t            // for model type like: User\n\t            return type.constructFromObject(data);\n\t          }\n\t        } else if (Array.isArray(type)) {\n\t          // for array type like: ['String']\n\t          var itemType = type[0];\n\t          return data.map(function(item) {\n\t            return exports.convertToType(item, itemType);\n\t          });\n\t        } else if (typeof type === 'object') {\n\t          // for plain object type like: {'String': 'Integer'}\n\t          var keyType, valueType;\n\t          for (var k in type) {\n\t            if (type.hasOwnProperty(k)) {\n\t              keyType = k;\n\t              valueType = type[k];\n\t              break;\n\t            }\n\t          }\n\t          var result = {};\n\t          for (var k in data) {\n\t            if (data.hasOwnProperty(k)) {\n\t              var key = exports.convertToType(k, keyType);\n\t              var value = exports.convertToType(data[k], valueType);\n\t              result[key] = value;\n\t            }\n\t          }\n\t          return result;\n\t        } else {\n\t          // for unknown type, return the data directly\n\t          return data;\n\t        }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Constructs a new map or array model from REST data.\n\t   * @param data {Object|Array} The REST data.\n\t   * @param obj {Object|Array} The target object or array.\n\t   */\n\t  exports.constructFromObject = function(data, obj, itemType) {\n\t    if (Array.isArray(data)) {\n\t      for (var i = 0; i < data.length; i++) {\n\t        if (data.hasOwnProperty(i))\n\t          obj[i] = exports.convertToType(data[i], itemType);\n\t      }\n\t    } else {\n\t      for (var k in data) {\n\t        if (data.hasOwnProperty(k))\n\t          obj[k] = exports.convertToType(data[k], itemType);\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * The default API client implementation.\n\t   * @type {module:ApiClient}\n\t   */\n\t  exports.instance = new exports();\n\t\n\t  return exports;\n\t}));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.RestError = factory(root.WebidaRestfulApi.ApiClient);\n\t  }\n\t}(this, function(ApiClient) {\n\t  'use strict';\n\t\n\t\n\t\n\t\n\t  /**\n\t   * The RestError model module.\n\t   * @module model/RestError\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new <code>RestError</code>.\n\t   * Error object with code and message. code is bound to status code, but not always same to standard HTTP status text. For example, some 409 error may have code \\&quot;Invalid Argument\\&quot; instead of \\&quot;Conflic\\&quot;. So, Client should read message property to know what happend exactly, when an error is returned from server. And, some 500 errors can have system errno instead of useless \\&quot;internal\\&quot;. Like other errors, details are hidden in message.\n\t   * @alias module:model/RestError\n\t   * @class\n\t   * @param message {String} \n\t   */\n\t  var exports = function(message) {\n\t    var _this = this;\n\t\n\t\n\t    _this['message'] = message;\n\t\n\t  };\n\t\n\t  /**\n\t   * Constructs a <code>RestError</code> from a plain JavaScript object, optionally creating a new instance.\n\t   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n\t   * @param {Object} data The plain JavaScript object bearing properties of interest.\n\t   * @param {module:model/RestError} obj Optional instance to populate.\n\t   * @return {module:model/RestError} The populated <code>RestError</code> instance.\n\t   */\n\t  exports.constructFromObject = function(data, obj) {\n\t    if (data) {\n\t      obj = obj || new exports();\n\t\n\t      if (data.hasOwnProperty('code')) {\n\t        obj['code'] = ApiClient.convertToType(data['code'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('message')) {\n\t        obj['message'] = ApiClient.convertToType(data['message'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('errno')) {\n\t        obj['errno'] = ApiClient.convertToType(data['errno'], 'String');\n\t      }\n\t    }\n\t    return obj;\n\t  }\n\t\n\t  /**\n\t   * @member {String} code\n\t   */\n\t  exports.prototype['code'] = undefined;\n\t  /**\n\t   * @member {String} message\n\t   */\n\t  exports.prototype['message'] = undefined;\n\t  /**\n\t   * errno code for some internal errors in server. Since service implementation can use many different platform api & runtime, client should avoid relying on errno code.\n\t   * @member {String} errno\n\t   */\n\t  exports.prototype['errno'] = undefined;\n\t\n\t\n\t\n\t  return exports;\n\t}));\n\t\n\t\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.RestOK = factory(root.WebidaRestfulApi.ApiClient);\n\t  }\n\t}(this, function(ApiClient) {\n\t  'use strict';\n\t\n\t\n\t\n\t\n\t  /**\n\t   * The RestOK model module.\n\t   * @module model/RestOK\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new <code>RestOK</code>.\n\t   * @alias module:model/RestOK\n\t   * @class\n\t   */\n\t  var exports = function() {\n\t    var _this = this;\n\t\n\t\n\t  };\n\t\n\t  /**\n\t   * Constructs a <code>RestOK</code> from a plain JavaScript object, optionally creating a new instance.\n\t   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n\t   * @param {Object} data The plain JavaScript object bearing properties of interest.\n\t   * @param {module:model/RestOK} obj Optional instance to populate.\n\t   * @return {module:model/RestOK} The populated <code>RestOK</code> instance.\n\t   */\n\t  exports.constructFromObject = function(data, obj) {\n\t    if (data) {\n\t      obj = obj || new exports();\n\t\n\t      if (data.hasOwnProperty('message')) {\n\t        obj['message'] = ApiClient.convertToType(data['message'], 'String');\n\t      }\n\t    }\n\t    return obj;\n\t  }\n\t\n\t  /**\n\t   * @member {String} message\n\t   */\n\t  exports.prototype['message'] = undefined;\n\t\n\t\n\t\n\t  return exports;\n\t}));\n\t\n\t\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(4), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'), require('./DirEntry'), require('./Stats'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.DirEntry = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.DirEntry, root.WebidaRestfulApi.Stats);\n\t  }\n\t}(this, function(ApiClient, DirEntry, Stats) {\n\t  'use strict';\n\t\n\t\n\t\n\t\n\t  /**\n\t   * The DirEntry model module.\n\t   * @module model/DirEntry\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new <code>DirEntry</code>.\n\t   * a directory entry (file or directory) with children that represents a (sub) tree\n\t   * @alias module:model/DirEntry\n\t   * @class\n\t   * @param name {String} \n\t   * @param stats {module:model/Stats} \n\t   * @param children {Array.<module:model/DirEntry>} \n\t   */\n\t  var exports = function(name, stats, children) {\n\t    var _this = this;\n\t\n\t    _this['name'] = name;\n\t    _this['stats'] = stats;\n\t    _this['children'] = children;\n\t  };\n\t\n\t  /**\n\t   * Constructs a <code>DirEntry</code> from a plain JavaScript object, optionally creating a new instance.\n\t   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n\t   * @param {Object} data The plain JavaScript object bearing properties of interest.\n\t   * @param {module:model/DirEntry} obj Optional instance to populate.\n\t   * @return {module:model/DirEntry} The populated <code>DirEntry</code> instance.\n\t   */\n\t  exports.constructFromObject = function(data, obj) {\n\t    if (data) {\n\t      obj = obj || new exports();\n\t\n\t      if (data.hasOwnProperty('name')) {\n\t        obj['name'] = ApiClient.convertToType(data['name'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('stats')) {\n\t        obj['stats'] = Stats.constructFromObject(data['stats']);\n\t      }\n\t      if (data.hasOwnProperty('children')) {\n\t        obj['children'] = ApiClient.convertToType(data['children'], [DirEntry]);\n\t      }\n\t    }\n\t    return obj;\n\t  }\n\t\n\t  /**\n\t   * @member {String} name\n\t   */\n\t  exports.prototype['name'] = undefined;\n\t  /**\n\t   * @member {module:model/Stats} stats\n\t   */\n\t  exports.prototype['stats'] = undefined;\n\t  /**\n\t   * @member {Array.<module:model/DirEntry>} children\n\t   */\n\t  exports.prototype['children'] = undefined;\n\t\n\t\n\t\n\t  return exports;\n\t}));\n\t\n\t\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.Stats = factory(root.WebidaRestfulApi.ApiClient);\n\t  }\n\t}(this, function(ApiClient) {\n\t  'use strict';\n\t\n\t\n\t\n\t\n\t  /**\n\t   * The Stats model module.\n\t   * @module model/Stats\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new <code>Stats</code>.\n\t   * simplified/augmented fs.Stats class - see node.js doc for all properties\n\t   * @alias module:model/Stats\n\t   * @class\n\t   * @param type {module:model/Stats.TypeEnum} All types except 'DUMMY' come from fs.Stats is*** methods results. (e.g. if isFile() is true, then type will be 'FILE') If type is not decidable by the methods, default type is 'FILE', for everything on the file system is basically a file. 'DUMMY' type means that some object 'does not exist for now'. Client may use 'DUMMY' type to mark something dangling, not written or created on real file system yet but visible to user.\n\t   * @param birthtime {Date} \n\t   * @param mtime {Date} \n\t   * @param mode {String} \n\t   * @param size {Integer} \n\t   * @param nlink {Integer} \n\t   */\n\t  var exports = function(type, birthtime, mtime, mode, size, nlink) {\n\t    var _this = this;\n\t\n\t    _this['type'] = type;\n\t    _this['birthtime'] = birthtime;\n\t    _this['mtime'] = mtime;\n\t    _this['mode'] = mode;\n\t    _this['size'] = size;\n\t    _this['nlink'] = nlink;\n\t  };\n\t\n\t  /**\n\t   * Constructs a <code>Stats</code> from a plain JavaScript object, optionally creating a new instance.\n\t   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n\t   * @param {Object} data The plain JavaScript object bearing properties of interest.\n\t   * @param {module:model/Stats} obj Optional instance to populate.\n\t   * @return {module:model/Stats} The populated <code>Stats</code> instance.\n\t   */\n\t  exports.constructFromObject = function(data, obj) {\n\t    if (data) {\n\t      obj = obj || new exports();\n\t\n\t      if (data.hasOwnProperty('type')) {\n\t        obj['type'] = ApiClient.convertToType(data['type'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('birthtime')) {\n\t        obj['birthtime'] = ApiClient.convertToType(data['birthtime'], 'Date');\n\t      }\n\t      if (data.hasOwnProperty('mtime')) {\n\t        obj['mtime'] = ApiClient.convertToType(data['mtime'], 'Date');\n\t      }\n\t      if (data.hasOwnProperty('mode')) {\n\t        obj['mode'] = ApiClient.convertToType(data['mode'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('size')) {\n\t        obj['size'] = ApiClient.convertToType(data['size'], 'Integer');\n\t      }\n\t      if (data.hasOwnProperty('nlink')) {\n\t        obj['nlink'] = ApiClient.convertToType(data['nlink'], 'Integer');\n\t      }\n\t    }\n\t    return obj;\n\t  }\n\t\n\t  /**\n\t   * All types except 'DUMMY' come from fs.Stats is*** methods results. (e.g. if isFile() is true, then type will be 'FILE') If type is not decidable by the methods, default type is 'FILE', for everything on the file system is basically a file. 'DUMMY' type means that some object 'does not exist for now'. Client may use 'DUMMY' type to mark something dangling, not written or created on real file system yet but visible to user.\n\t   * @member {module:model/Stats.TypeEnum} type\n\t   */\n\t  exports.prototype['type'] = undefined;\n\t  /**\n\t   * @member {Date} birthtime\n\t   */\n\t  exports.prototype['birthtime'] = undefined;\n\t  /**\n\t   * @member {Date} mtime\n\t   */\n\t  exports.prototype['mtime'] = undefined;\n\t  /**\n\t   * @member {String} mode\n\t   */\n\t  exports.prototype['mode'] = undefined;\n\t  /**\n\t   * @member {Integer} size\n\t   */\n\t  exports.prototype['size'] = undefined;\n\t  /**\n\t   * @member {Integer} nlink\n\t   */\n\t  exports.prototype['nlink'] = undefined;\n\t\n\t\n\t  /**\n\t   * Allowed values for the <code>type</code> property.\n\t   * @enum {String}\n\t   * @readonly\n\t   */\n\t  exports.TypeEnum = {\n\t    /**\n\t     * value: \"FILE\"\n\t     * @const\n\t     */\n\t    \"FILE\": \"FILE\",\n\t    /**\n\t     * value: \"DIRECTORY\"\n\t     * @const\n\t     */\n\t    \"DIRECTORY\": \"DIRECTORY\",\n\t    /**\n\t     * value: \"BLOCK_DEVICE\"\n\t     * @const\n\t     */\n\t    \"BLOCK_DEVICE\": \"BLOCK_DEVICE\",\n\t    /**\n\t     * value: \"CHARACTER_DEVICE\"\n\t     * @const\n\t     */\n\t    \"CHARACTER_DEVICE\": \"CHARACTER_DEVICE\",\n\t    /**\n\t     * value: \"LINK\"\n\t     * @const\n\t     */\n\t    \"LINK\": \"LINK\",\n\t    /**\n\t     * value: \"FIFO\"\n\t     * @const\n\t     */\n\t    \"FIFO\": \"FIFO\",\n\t    /**\n\t     * value: \"SOCKET\"\n\t     * @const\n\t     */\n\t    \"SOCKET\": \"SOCKET\",\n\t    /**\n\t     * value: \"DUMMY\"\n\t     * @const\n\t     */\n\t    \"DUMMY\": \"DUMMY\"  };\n\t\n\t\n\t  return exports;\n\t}));\n\t\n\t\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.Alias = factory(root.WebidaRestfulApi.ApiClient);\n\t  }\n\t}(this, function(ApiClient) {\n\t  'use strict';\n\t\n\t\n\t\n\t\n\t  /**\n\t   * The Alias model module.\n\t   * @module model/Alias\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new <code>Alias</code>.\n\t   * alias to access file system using git or direct http requests who can&#39;t call swagger api with proper tokens\n\t   * @alias module:model/Alias\n\t   * @class\n\t   */\n\t  var exports = function() {\n\t    var _this = this;\n\t\n\t\n\t\n\t\n\t  };\n\t\n\t  /**\n\t   * Constructs a <code>Alias</code> from a plain JavaScript object, optionally creating a new instance.\n\t   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n\t   * @param {Object} data The plain JavaScript object bearing properties of interest.\n\t   * @param {module:model/Alias} obj Optional instance to populate.\n\t   * @return {module:model/Alias} The populated <code>Alias</code> instance.\n\t   */\n\t  exports.constructFromObject = function(data, obj) {\n\t    if (data) {\n\t      obj = obj || new exports();\n\t\n\t      if (data.hasOwnProperty('id')) {\n\t        obj['id'] = ApiClient.convertToType(data['id'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('workspaceId')) {\n\t        obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('sourcePath')) {\n\t        obj['sourcePath'] = ApiClient.convertToType(data['sourcePath'], 'String');\n\t      }\n\t    }\n\t    return obj;\n\t  }\n\t\n\t  /**\n\t   * id, and the path-fragment to access. Since this id is a path-fragment, any unsafe chars for path should not be included, especially / char. ?, *, and other special characters for shell are not also allowed.\n\t   * @member {String} id\n\t   */\n\t  exports.prototype['id'] = undefined;\n\t  /**\n\t   * id of the workspace that contains source of alias\n\t   * @member {String} workspaceId\n\t   */\n\t  exports.prototype['workspaceId'] = undefined;\n\t  /**\n\t   * the source of alias, relative path to workspace root directory.\n\t   * @member {String} sourcePath\n\t   */\n\t  exports.prototype['sourcePath'] = undefined;\n\t\n\t\n\t\n\t  return exports;\n\t}));\n\t\n\t\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.ChildProcess = factory(root.WebidaRestfulApi.ApiClient);\n\t  }\n\t}(this, function(ApiClient) {\n\t  'use strict';\n\t\n\t\n\t\n\t\n\t  /**\n\t   * The ChildProcess model module.\n\t   * @module model/ChildProcess\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new <code>ChildProcess</code>.\n\t   * a process in execution, spawned by async exec or other mean\n\t   * @alias module:model/ChildProcess\n\t   * @class\n\t   * @param pid {Integer} child process pid\n\t   * @param command {String} execution command in execution request\n\t   * @param args {Array.<String>} arguments of command in execution request\n\t   * @param execId {String} execution id from execution request\n\t   * @param state {module:model/ChildProcess.StateEnum} State of process. Where   CREATED - process is just created. no event has arrived yet   WORKING - some output on stdout/stderr is arrived   KILLING - sent kill signal, by cancel operation or error event from the process   EXITED  - process has exited. \n\t   * @param startedAt {Date} the time when this process is spawned\n\t   */\n\t  var exports = function(pid, command, args, execId, state, startedAt) {\n\t    var _this = this;\n\t\n\t    _this['pid'] = pid;\n\t    _this['command'] = command;\n\t    _this['args'] = args;\n\t    _this['execId'] = execId;\n\t    _this['state'] = state;\n\t    _this['startedAt'] = startedAt;\n\t\n\t\n\t  };\n\t\n\t  /**\n\t   * Constructs a <code>ChildProcess</code> from a plain JavaScript object, optionally creating a new instance.\n\t   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n\t   * @param {Object} data The plain JavaScript object bearing properties of interest.\n\t   * @param {module:model/ChildProcess} obj Optional instance to populate.\n\t   * @return {module:model/ChildProcess} The populated <code>ChildProcess</code> instance.\n\t   */\n\t  exports.constructFromObject = function(data, obj) {\n\t    if (data) {\n\t      obj = obj || new exports();\n\t\n\t      if (data.hasOwnProperty('pid')) {\n\t        obj['pid'] = ApiClient.convertToType(data['pid'], 'Integer');\n\t      }\n\t      if (data.hasOwnProperty('command')) {\n\t        obj['command'] = ApiClient.convertToType(data['command'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('args')) {\n\t        obj['args'] = ApiClient.convertToType(data['args'], ['String']);\n\t      }\n\t      if (data.hasOwnProperty('execId')) {\n\t        obj['execId'] = ApiClient.convertToType(data['execId'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('state')) {\n\t        obj['state'] = ApiClient.convertToType(data['state'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('startedAt')) {\n\t        obj['startedAt'] = ApiClient.convertToType(data['startedAt'], 'Date');\n\t      }\n\t      if (data.hasOwnProperty('exitCode')) {\n\t        obj['exitCode'] = ApiClient.convertToType(data['exitCode'], 'Integer');\n\t      }\n\t      if (data.hasOwnProperty('exitSignal')) {\n\t        obj['exitSignal'] = ApiClient.convertToType(data['exitSignal'], 'String');\n\t      }\n\t    }\n\t    return obj;\n\t  }\n\t\n\t  /**\n\t   * child process pid\n\t   * @member {Integer} pid\n\t   */\n\t  exports.prototype['pid'] = undefined;\n\t  /**\n\t   * execution command in execution request\n\t   * @member {String} command\n\t   */\n\t  exports.prototype['command'] = undefined;\n\t  /**\n\t   * arguments of command in execution request\n\t   * @member {Array.<String>} args\n\t   */\n\t  exports.prototype['args'] = undefined;\n\t  /**\n\t   * execution id from execution request\n\t   * @member {String} execId\n\t   */\n\t  exports.prototype['execId'] = undefined;\n\t  /**\n\t   * State of process. Where   CREATED - process is just created. no event has arrived yet   WORKING - some output on stdout/stderr is arrived   KILLING - sent kill signal, by cancel operation or error event from the process   EXITED  - process has exited. \n\t   * @member {module:model/ChildProcess.StateEnum} state\n\t   */\n\t  exports.prototype['state'] = undefined;\n\t  /**\n\t   * the time when this process is spawned\n\t   * @member {Date} startedAt\n\t   */\n\t  exports.prototype['startedAt'] = undefined;\n\t  /**\n\t   * the exit code of child process. available with EXITED procs only.\n\t   * @member {Integer} exitCode\n\t   */\n\t  exports.prototype['exitCode'] = undefined;\n\t  /**\n\t   * the signal that killed this child process.(not always available)\n\t   * @member {String} exitSignal\n\t   */\n\t  exports.prototype['exitSignal'] = undefined;\n\t\n\t\n\t  /**\n\t   * Allowed values for the <code>state</code> property.\n\t   * @enum {String}\n\t   * @readonly\n\t   */\n\t  exports.StateEnum = {\n\t    /**\n\t     * value: \"CREATED\"\n\t     * @const\n\t     */\n\t    \"CREATED\": \"CREATED\",\n\t    /**\n\t     * value: \"WORKING\"\n\t     * @const\n\t     */\n\t    \"WORKING\": \"WORKING\",\n\t    /**\n\t     * value: \"KILLING\"\n\t     * @const\n\t     */\n\t    \"KILLING\": \"KILLING\",\n\t    /**\n\t     * value: \"EXITED\"\n\t     * @const\n\t     */\n\t    \"EXITED\": \"EXITED\"  };\n\t\n\t\n\t  return exports;\n\t}));\n\t\n\t\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.Credential = factory(root.WebidaRestfulApi.ApiClient);\n\t  }\n\t}(this, function(ApiClient) {\n\t  'use strict';\n\t\n\t\n\t\n\t\n\t  /**\n\t   * The Credential model module.\n\t   * @module model/Credential\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new <code>Credential</code>.\n\t   * User credential to login. Use https to protect credential. master token can replace actual id/password pair.\n\t   * @alias module:model/Credential\n\t   * @class\n\t   * @param loginId {String} \n\t   * @param loginPassword {String} \n\t   */\n\t  var exports = function(loginId, loginPassword) {\n\t    var _this = this;\n\t\n\t    _this['loginId'] = loginId;\n\t    _this['loginPassword'] = loginPassword;\n\t\n\t  };\n\t\n\t  /**\n\t   * Constructs a <code>Credential</code> from a plain JavaScript object, optionally creating a new instance.\n\t   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n\t   * @param {Object} data The plain JavaScript object bearing properties of interest.\n\t   * @param {module:model/Credential} obj Optional instance to populate.\n\t   * @return {module:model/Credential} The populated <code>Credential</code> instance.\n\t   */\n\t  exports.constructFromObject = function(data, obj) {\n\t    if (data) {\n\t      obj = obj || new exports();\n\t\n\t      if (data.hasOwnProperty('loginId')) {\n\t        obj['loginId'] = ApiClient.convertToType(data['loginId'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('loginPassword')) {\n\t        obj['loginPassword'] = ApiClient.convertToType(data['loginPassword'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('masterToken')) {\n\t        obj['masterToken'] = ApiClient.convertToType(data['masterToken'], 'String');\n\t      }\n\t    }\n\t    return obj;\n\t  }\n\t\n\t  /**\n\t   * @member {String} loginId\n\t   */\n\t  exports.prototype['loginId'] = undefined;\n\t  /**\n\t   * @member {String} loginPassword\n\t   */\n\t  exports.prototype['loginPassword'] = undefined;\n\t  /**\n\t   * A master token is issued when user wants to access webida api without id/password from remote or local desktop app. When masterToken is set, client should put some bogus id/password for login, non-empty. the values can be used to identify client type.\n\t   * @member {String} masterToken\n\t   */\n\t  exports.prototype['masterToken'] = undefined;\n\t\n\t\n\t\n\t  return exports;\n\t}));\n\t\n\t\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.Execution = factory(root.WebidaRestfulApi.ApiClient);\n\t  }\n\t}(this, function(ApiClient) {\n\t  'use strict';\n\t\n\t\n\t\n\t\n\t  /**\n\t   * The Execution model module.\n\t   * @module model/Execution\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new <code>Execution</code>.\n\t   * execution request, simlilar to node.js exec()/spawn(). see node.js documentation for  details of each properties. some properties are not configurable for portability  * encoding : fixed to utf-8  * shell : fixed to system defaults. (so, cmd.exe will be invoked in Windows OS, not sh or bash in git-for-windows even they are available.)  * killSignal : fixed to SIGTERM. If process does not die, server can send SIGKILL or invoke taskkill, to ensure chlid process is killed.  * uid &amp; gid : will not be set for security  * stdio : all streams are handled by server. no options are avaliable to client.  * detached : always false \n\t   * @alias module:model/Execution\n\t   * @class\n\t   * @param command {String} The command to run. Server may not support pipe, redirection nor shell variables in command. Client should not assume any specific shell provider in server and should not using the shell features for portability. In windows system with unix sh (e.g. cygwin or mingw from git-for-windows), usually a shell script in PATH may work as command but probably allocates console window while running the command. Implementations (both of server & client) should avoid allocating any  console instances while running services, for costs and UX, and should provide a portable way to invoke commands. Shortly, when a service/product embeds some .sh file to run, it must provide .cmd file doing same thing, always.\n\t   * @param args {Array.<String>} The arguments array. Server can join this args to command with proper white-space char, when underlying platform api (e.g. child_process#exec() in node.js) does not support additional arguments vector. It's recommended to use args vector than making a long command, to find & see child processes easily with this Rest API. So, args should be always provided, even empty array.  When some arguments has a white space (e.g. C:\\\\Program Files\\\\webida), usually invoking command understands escaping or quotation, but not always. Client should add proper escaping or quotation chars to args vector manually. server should not change any command or arguments. \n\t   */\n\t  var exports = function(command, args) {\n\t    var _this = this;\n\t\n\t\n\t    _this['command'] = command;\n\t    _this['args'] = args;\n\t\n\t\n\t\n\t  };\n\t\n\t  /**\n\t   * Constructs a <code>Execution</code> from a plain JavaScript object, optionally creating a new instance.\n\t   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n\t   * @param {Object} data The plain JavaScript object bearing properties of interest.\n\t   * @param {module:model/Execution} obj Optional instance to populate.\n\t   * @return {module:model/Execution} The populated <code>Execution</code> instance.\n\t   */\n\t  exports.constructFromObject = function(data, obj) {\n\t    if (data) {\n\t      obj = obj || new exports();\n\t\n\t      if (data.hasOwnProperty('id')) {\n\t        obj['id'] = ApiClient.convertToType(data['id'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('command')) {\n\t        obj['command'] = ApiClient.convertToType(data['command'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('args')) {\n\t        obj['args'] = ApiClient.convertToType(data['args'], ['String']);\n\t      }\n\t      if (data.hasOwnProperty('cwd')) {\n\t        obj['cwd'] = ApiClient.convertToType(data['cwd'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('timeout')) {\n\t        obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Integer');\n\t      }\n\t      if (data.hasOwnProperty('maxBuffer')) {\n\t        obj['maxBuffer'] = ApiClient.convertToType(data['maxBuffer'], 'Integer');\n\t      }\n\t    }\n\t    return obj;\n\t  }\n\t\n\t  /**\n\t   * unique identifier of execution, to demux response stream or cancel request. Server should reject an async exec request without id.\n\t   * @member {String} id\n\t   */\n\t  exports.prototype['id'] = undefined;\n\t  /**\n\t   * The command to run. Server may not support pipe, redirection nor shell variables in command. Client should not assume any specific shell provider in server and should not using the shell features for portability. In windows system with unix sh (e.g. cygwin or mingw from git-for-windows), usually a shell script in PATH may work as command but probably allocates console window while running the command. Implementations (both of server & client) should avoid allocating any  console instances while running services, for costs and UX, and should provide a portable way to invoke commands. Shortly, when a service/product embeds some .sh file to run, it must provide .cmd file doing same thing, always.\n\t   * @member {String} command\n\t   */\n\t  exports.prototype['command'] = undefined;\n\t  /**\n\t   * The arguments array. Server can join this args to command with proper white-space char, when underlying platform api (e.g. child_process#exec() in node.js) does not support additional arguments vector. It's recommended to use args vector than making a long command, to find & see child processes easily with this Rest API. So, args should be always provided, even empty array.  When some arguments has a white space (e.g. C:\\\\Program Files\\\\webida), usually invoking command understands escaping or quotation, but not always. Client should add proper escaping or quotation chars to args vector manually. server should not change any command or arguments. \n\t   * @member {Array.<String>} args\n\t   */\n\t  exports.prototype['args'] = undefined;\n\t  /**\n\t   * Current working directory of spawned process, relative to workspace root. If abscent, cwd will be the workspace directory. Does not accept any evaluatable form like $HOME, %USERPROFILE%. path should be unixified. Server may reject an absolute cwd path.\n\t   * @member {String} cwd\n\t   */\n\t  exports.prototype['cwd'] = undefined;\n\t  /**\n\t   * The value which In 'miliseconds' the maximum amount of time the child is allowed to run. (not idle time of stdout / stderr stream) for sync exec. Server should not apply default value for async exec, when omitted. The child process spawned by async       execution should be killed when 1) server goes down 2) process exits by self 3) cancel operation is invoked\n\t   * @member {Integer} timeout\n\t   */\n\t  exports.prototype['timeout'] = undefined;\n\t  /**\n\t   * Largest amount of data (in bytes) allowed on stdout or stderr for sync exec. Server should not apply this limit to async execution. In sync exec, server may kill a child process that has exceeded limit. default value is 512KB, large enough.\n\t   * @member {Integer} maxBuffer\n\t   */\n\t  exports.prototype['maxBuffer'] = undefined;\n\t\n\t\n\t\n\t  return exports;\n\t}));\n\t\n\t\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.ExecutionResult = factory(root.WebidaRestfulApi.ApiClient);\n\t  }\n\t}(this, function(ApiClient) {\n\t  'use strict';\n\t\n\t\n\t\n\t\n\t  /**\n\t   * The ExecutionResult model module.\n\t   * @module model/ExecutionResult\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new <code>ExecutionResult</code>.\n\t   * execution response\n\t   * @alias module:model/ExecutionResult\n\t   * @class\n\t   * @param stdout {String} standard out of child process.\n\t   * @param stderr {String} standard error of child process.\n\t   */\n\t  var exports = function(stdout, stderr) {\n\t    var _this = this;\n\t\n\t\n\t    _this['stdout'] = stdout;\n\t    _this['stderr'] = stderr;\n\t  };\n\t\n\t  /**\n\t   * Constructs a <code>ExecutionResult</code> from a plain JavaScript object, optionally creating a new instance.\n\t   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n\t   * @param {Object} data The plain JavaScript object bearing properties of interest.\n\t   * @param {module:model/ExecutionResult} obj Optional instance to populate.\n\t   * @return {module:model/ExecutionResult} The populated <code>ExecutionResult</code> instance.\n\t   */\n\t  exports.constructFromObject = function(data, obj) {\n\t    if (data) {\n\t      obj = obj || new exports();\n\t\n\t      if (data.hasOwnProperty('error')) {\n\t        obj['error'] = ApiClient.convertToType(data['error'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('stdout')) {\n\t        obj['stdout'] = ApiClient.convertToType(data['stdout'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('stderr')) {\n\t        obj['stderr'] = ApiClient.convertToType(data['stderr'], 'String');\n\t      }\n\t    }\n\t    return obj;\n\t  }\n\t\n\t  /**\n\t   * error message when execution failed.\n\t   * @member {String} error\n\t   */\n\t  exports.prototype['error'] = undefined;\n\t  /**\n\t   * standard out of child process.\n\t   * @member {String} stdout\n\t   */\n\t  exports.prototype['stdout'] = undefined;\n\t  /**\n\t   * standard error of child process.\n\t   * @member {String} stderr\n\t   */\n\t  exports.prototype['stderr'] = undefined;\n\t\n\t\n\t\n\t  return exports;\n\t}));\n\t\n\t\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.RemoteAccess = factory(root.WebidaRestfulApi.ApiClient);\n\t  }\n\t}(this, function(ApiClient) {\n\t  'use strict';\n\t\n\t\n\t\n\t\n\t  /**\n\t   * The RemoteAccess model module.\n\t   * @module model/RemoteAccess\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new <code>RemoteAccess</code>.\n\t   * Access information of remote workspace in remote server\n\t   * @alias module:model/RemoteAccess\n\t   * @class\n\t   * @param name {String} display text of remote workspace. can be different from original name.\n\t   * @param serverUrl {String} the url of remote server. Should have no path/query parameters, even \\\"/\\\" in path.\n\t   * @param workspaceId {String} the id of remote workspace, read from remote server\n\t   * @param masterToken {String} master token to access service, issued from remote server\n\t   */\n\t  var exports = function(name, serverUrl, workspaceId, masterToken) {\n\t    var _this = this;\n\t\n\t    _this['name'] = name;\n\t    _this['serverUrl'] = serverUrl;\n\t    _this['workspaceId'] = workspaceId;\n\t\n\t    _this['masterToken'] = masterToken;\n\t  };\n\t\n\t  /**\n\t   * Constructs a <code>RemoteAccess</code> from a plain JavaScript object, optionally creating a new instance.\n\t   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n\t   * @param {Object} data The plain JavaScript object bearing properties of interest.\n\t   * @param {module:model/RemoteAccess} obj Optional instance to populate.\n\t   * @return {module:model/RemoteAccess} The populated <code>RemoteAccess</code> instance.\n\t   */\n\t  exports.constructFromObject = function(data, obj) {\n\t    if (data) {\n\t      obj = obj || new exports();\n\t\n\t      if (data.hasOwnProperty('name')) {\n\t        obj['name'] = ApiClient.convertToType(data['name'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('serverUrl')) {\n\t        obj['serverUrl'] = ApiClient.convertToType(data['serverUrl'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('workspaceId')) {\n\t        obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('workspacePath')) {\n\t        obj['workspacePath'] = ApiClient.convertToType(data['workspacePath'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('masterToken')) {\n\t        obj['masterToken'] = ApiClient.convertToType(data['masterToken'], 'String');\n\t      }\n\t    }\n\t    return obj;\n\t  }\n\t\n\t  /**\n\t   * display text of remote workspace. can be different from original name.\n\t   * @member {String} name\n\t   */\n\t  exports.prototype['name'] = undefined;\n\t  /**\n\t   * the url of remote server. Should have no path/query parameters, even \\\"/\\\" in path.\n\t   * @member {String} serverUrl\n\t   */\n\t  exports.prototype['serverUrl'] = undefined;\n\t  /**\n\t   * the id of remote workspace, read from remote server\n\t   * @member {String} workspaceId\n\t   */\n\t  exports.prototype['workspaceId'] = undefined;\n\t  /**\n\t   * Full path of remote workspace, read from remote server. this property will be removed when clients are able to work without \\\"named root directory\\\" in workspace fs tree.\n\t   * @member {String} workspacePath\n\t   */\n\t  exports.prototype['workspacePath'] = undefined;\n\t  /**\n\t   * master token to access service, issued from remote server\n\t   * @member {String} masterToken\n\t   */\n\t  exports.prototype['masterToken'] = undefined;\n\t\n\t\n\t\n\t  return exports;\n\t}));\n\t\n\t\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.Session = factory(root.WebidaRestfulApi.ApiClient);\n\t  }\n\t}(this, function(ApiClient) {\n\t  'use strict';\n\t\n\t\n\t\n\t\n\t  /**\n\t   * The Session model module.\n\t   * @module model/Session\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new <code>Session</code>.\n\t   * an application session per ide instance. bound to access token\n\t   * @alias module:model/Session\n\t   * @class\n\t   * @param id {String} the id of a session. usually same to socket id.\n\t   * @param name {String} human readable name, usually derived from workspace name.\n\t   * @param state {module:model/Session.StateEnum} NORMAL = connected, normally working LOSING = disconnected, waiting reconnection. still accessible with api CLOSING = socket connection will close connection by server (clinet will be notified)  There\\\"s no \\\"CLOSED\\\" / \\\"LOST\\\" state, for server will remove session object in registry  when the server closes connection or stops waiting for reconnection for timeout. \n\t   * @param clientAddress {String} the peer address of session connection. not always\n\t   * @param connectedAt {Date} the time when socket connection is established\n\t   * @param disconnectedAt {Date} the time when socket is closed.\n\t   */\n\t  var exports = function(id, name, state, clientAddress, connectedAt, disconnectedAt) {\n\t    var _this = this;\n\t\n\t    _this['id'] = id;\n\t    _this['name'] = name;\n\t    _this['state'] = state;\n\t\n\t    _this['clientAddress'] = clientAddress;\n\t    _this['connectedAt'] = connectedAt;\n\t    _this['disconnectedAt'] = disconnectedAt;\n\t\n\t\n\t  };\n\t\n\t  /**\n\t   * Constructs a <code>Session</code> from a plain JavaScript object, optionally creating a new instance.\n\t   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n\t   * @param {Object} data The plain JavaScript object bearing properties of interest.\n\t   * @param {module:model/Session} obj Optional instance to populate.\n\t   * @return {module:model/Session} The populated <code>Session</code> instance.\n\t   */\n\t  exports.constructFromObject = function(data, obj) {\n\t    if (data) {\n\t      obj = obj || new exports();\n\t\n\t      if (data.hasOwnProperty('id')) {\n\t        obj['id'] = ApiClient.convertToType(data['id'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('name')) {\n\t        obj['name'] = ApiClient.convertToType(data['name'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('state')) {\n\t        obj['state'] = ApiClient.convertToType(data['state'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('workspaceId')) {\n\t        obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('clientAddress')) {\n\t        obj['clientAddress'] = ApiClient.convertToType(data['clientAddress'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('connectedAt')) {\n\t        obj['connectedAt'] = ApiClient.convertToType(data['connectedAt'], 'Date');\n\t      }\n\t      if (data.hasOwnProperty('disconnectedAt')) {\n\t        obj['disconnectedAt'] = ApiClient.convertToType(data['disconnectedAt'], 'Date');\n\t      }\n\t      if (data.hasOwnProperty('willCloseAt')) {\n\t        obj['willCloseAt'] = ApiClient.convertToType(data['willCloseAt'], 'Date');\n\t      }\n\t      if (data.hasOwnProperty('willLoseAt')) {\n\t        obj['willLoseAt'] = ApiClient.convertToType(data['willLoseAt'], 'Date');\n\t      }\n\t    }\n\t    return obj;\n\t  }\n\t\n\t  /**\n\t   * the id of a session. usually same to socket id.\n\t   * @member {String} id\n\t   */\n\t  exports.prototype['id'] = undefined;\n\t  /**\n\t   * human readable name, usually derived from workspace name.\n\t   * @member {String} name\n\t   */\n\t  exports.prototype['name'] = undefined;\n\t  /**\n\t   * NORMAL = connected, normally working LOSING = disconnected, waiting reconnection. still accessible with api CLOSING = socket connection will close connection by server (clinet will be notified)  There\\\"s no \\\"CLOSED\\\" / \\\"LOST\\\" state, for server will remove session object in registry  when the server closes connection or stops waiting for reconnection for timeout. \n\t   * @member {module:model/Session.StateEnum} state\n\t   */\n\t  exports.prototype['state'] = undefined;\n\t  /**\n\t   * the id of workspace that this sessions is working on. If falsy, then this session is not belonged to any workpsace. Usually, dashboard / monitoring app will create a session without workspace id.\n\t   * @member {String} workspaceId\n\t   */\n\t  exports.prototype['workspaceId'] = undefined;\n\t  /**\n\t   * the peer address of session connection. not always\n\t   * @member {String} clientAddress\n\t   */\n\t  exports.prototype['clientAddress'] = undefined;\n\t  /**\n\t   * the time when socket connection is established\n\t   * @member {Date} connectedAt\n\t   */\n\t  exports.prototype['connectedAt'] = undefined;\n\t  /**\n\t   * the time when socket is closed.\n\t   * @member {Date} disconnectedAt\n\t   */\n\t  exports.prototype['disconnectedAt'] = undefined;\n\t  /**\n\t   * when state becomes CLOSING, actual closing time will be updated by server.\n\t   * @member {Date} willCloseAt\n\t   */\n\t  exports.prototype['willCloseAt'] = undefined;\n\t  /**\n\t   * when state becomes LOSING, server will not wait for reconnection after this time.\n\t   * @member {Date} willLoseAt\n\t   */\n\t  exports.prototype['willLoseAt'] = undefined;\n\t\n\t\n\t  /**\n\t   * Allowed values for the <code>state</code> property.\n\t   * @enum {String}\n\t   * @readonly\n\t   */\n\t  exports.StateEnum = {\n\t    /**\n\t     * value: \"NORMAL\"\n\t     * @const\n\t     */\n\t    \"NORMAL\": \"NORMAL\",\n\t    /**\n\t     * value: \"LOSING\"\n\t     * @const\n\t     */\n\t    \"LOSING\": \"LOSING\",\n\t    /**\n\t     * value: \"CLOSING\"\n\t     * @const\n\t     */\n\t    \"CLOSING\": \"CLOSING\"  };\n\t\n\t\n\t  return exports;\n\t}));\n\t\n\t\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.Token = factory(root.WebidaRestfulApi.ApiClient);\n\t  }\n\t}(this, function(ApiClient) {\n\t  'use strict';\n\t\n\t\n\t\n\t\n\t  /**\n\t   * The Token model module.\n\t   * @module model/Token\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new <code>Token</code>.\n\t   * a json webtoken and accessible data\n\t   * @alias module:model/Token\n\t   * @class\n\t   * @param text {String} actual token text that should be shipped in header or query\n\t   * @param tokenType {module:model/Token.TokenTypeEnum} MASTER : used to create an access token from clients, without login credential ACCESS : protects api access. should be unique for each ide session  Note that here\\\"s no REFRESH token, nor LOGIN token. The login api will create unrestricted access token & master token pair. Desktop app has a side-way to create an unrestricted master token before starting IDE instances. \n\t   * @param expiresAt {Date} \n\t   * @param issuedAt {Date} \n\t   */\n\t  var exports = function(text, tokenType, expiresAt, issuedAt) {\n\t    var _this = this;\n\t\n\t    _this['text'] = text;\n\t    _this['tokenType'] = tokenType;\n\t    _this['expiresAt'] = expiresAt;\n\t    _this['issuedAt'] = issuedAt;\n\t\n\t\n\t  };\n\t\n\t  /**\n\t   * Constructs a <code>Token</code> from a plain JavaScript object, optionally creating a new instance.\n\t   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n\t   * @param {Object} data The plain JavaScript object bearing properties of interest.\n\t   * @param {module:model/Token} obj Optional instance to populate.\n\t   * @return {module:model/Token} The populated <code>Token</code> instance.\n\t   */\n\t  exports.constructFromObject = function(data, obj) {\n\t    if (data) {\n\t      obj = obj || new exports();\n\t\n\t      if (data.hasOwnProperty('text')) {\n\t        obj['text'] = ApiClient.convertToType(data['text'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('tokenType')) {\n\t        obj['tokenType'] = ApiClient.convertToType(data['tokenType'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('expiresAt')) {\n\t        obj['expiresAt'] = ApiClient.convertToType(data['expiresAt'], 'Date');\n\t      }\n\t      if (data.hasOwnProperty('issuedAt')) {\n\t        obj['issuedAt'] = ApiClient.convertToType(data['issuedAt'], 'Date');\n\t      }\n\t      if (data.hasOwnProperty('sessionId')) {\n\t        obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('workspaceId')) {\n\t        obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');\n\t      }\n\t    }\n\t    return obj;\n\t  }\n\t\n\t  /**\n\t   * actual token text that should be shipped in header or query\n\t   * @member {String} text\n\t   */\n\t  exports.prototype['text'] = undefined;\n\t  /**\n\t   * MASTER : used to create an access token from clients, without login credential ACCESS : protects api access. should be unique for each ide session  Note that here\\\"s no REFRESH token, nor LOGIN token. The login api will create unrestricted access token & master token pair. Desktop app has a side-way to create an unrestricted master token before starting IDE instances. \n\t   * @member {module:model/Token.TokenTypeEnum} tokenType\n\t   */\n\t  exports.prototype['tokenType'] = undefined;\n\t  /**\n\t   * @member {Date} expiresAt\n\t   */\n\t  exports.prototype['expiresAt'] = undefined;\n\t  /**\n\t   * @member {Date} issuedAt\n\t   */\n\t  exports.prototype['issuedAt'] = undefined;\n\t  /**\n\t   * mandatory for ACCESS token, identifying client instance\n\t   * @member {String} sessionId\n\t   */\n\t  exports.prototype['sessionId'] = undefined;\n\t  /**\n\t   * If truthy, access rights are restricted to specified workspace only.\n\t   * @member {String} workspaceId\n\t   */\n\t  exports.prototype['workspaceId'] = undefined;\n\t\n\t\n\t  /**\n\t   * Allowed values for the <code>tokenType</code> property.\n\t   * @enum {String}\n\t   * @readonly\n\t   */\n\t  exports.TokenTypeEnum = {\n\t    /**\n\t     * value: \"MASTER\"\n\t     * @const\n\t     */\n\t    \"MASTER\": \"MASTER\",\n\t    /**\n\t     * value: \"ACCESS\"\n\t     * @const\n\t     */\n\t    \"ACCESS\": \"ACCESS\"  };\n\t\n\t\n\t  return exports;\n\t}));\n\t\n\t\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.User = factory(root.WebidaRestfulApi.ApiClient);\n\t  }\n\t}(this, function(ApiClient) {\n\t  'use strict';\n\t\n\t\n\t\n\t\n\t  /**\n\t   * The User model module.\n\t   * @module model/User\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new <code>User</code>.\n\t   * Any services/products should define some admin apis to manage users in the system and expose what should be exposed to client app. So, no properties are mandatory. Currently, the properties are defined for compatiblity with legacy clients.\n\t   * @alias module:model/User\n\t   * @class\n\t   */\n\t  var exports = function() {\n\t    var _this = this;\n\t\n\t\n\t\n\t\n\t  };\n\t\n\t  /**\n\t   * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.\n\t   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n\t   * @param {Object} data The plain JavaScript object bearing properties of interest.\n\t   * @param {module:model/User} obj Optional instance to populate.\n\t   * @return {module:model/User} The populated <code>User</code> instance.\n\t   */\n\t  exports.constructFromObject = function(data, obj) {\n\t    if (data) {\n\t      obj = obj || new exports();\n\t\n\t      if (data.hasOwnProperty('id')) {\n\t        obj['id'] = ApiClient.convertToType(data['id'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('email')) {\n\t        obj['email'] = ApiClient.convertToType(data['email'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('name')) {\n\t        obj['name'] = ApiClient.convertToType(data['name'], 'String');\n\t      }\n\t    }\n\t    return obj;\n\t  }\n\t\n\t  /**\n\t   * unique id per user (email is also unique)\n\t   * @member {String} id\n\t   */\n\t  exports.prototype['id'] = undefined;\n\t  /**\n\t   * @member {String} email\n\t   */\n\t  exports.prototype['email'] = undefined;\n\t  /**\n\t   * @member {String} name\n\t   */\n\t  exports.prototype['name'] = undefined;\n\t\n\t\n\t\n\t  return exports;\n\t}));\n\t\n\t\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.Workspace = factory(root.WebidaRestfulApi.ApiClient);\n\t  }\n\t}(this, function(ApiClient) {\n\t  'use strict';\n\t\n\t\n\t\n\t\n\t  /**\n\t   * The Workspace model module.\n\t   * @module model/Workspace\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new <code>Workspace</code>.\n\t   * A workspace in server\n\t   * @alias module:model/Workspace\n\t   * @class\n\t   * @param id {String} the id of a workspace. usually same to file system id\n\t   * @param name {String} display text of this workspace for UI\n\t   * @param description {String} human readable description on this workspace\n\t   * @param createdAt {Date} the time when this workspace is created (registered from local file system)\n\t   * @param workspacePath {String} absolute path of this workspace in server. server may not expose this property to some untrusted clients.\n\t   * @param excludedPaths {Array.<String>} Ignore patterns to exclude from watch service and search-and-replace operations.  Pattern follows '.gitignore' syntax, 1 item per line. It should work as a .gitignore file in the workspace directory. Server should remove all comment items (any item that begins with '#') and blank items. Escaping with '\\\\' char for the beginning '!' and          ending white-spaces shoule be supported, too.  To exclude a directory, client may have to put '/' at the end of the item to exclude everything underneath it. When a dir path is excluded with 'ending /', watch service  may not deliver unlinkDir/addDir events for the path and client should manually check the existence or stats. \n\t   * @param offlineCachePaths {Array.<String>} Any paths (including excluded paths) to be cached in remote clients.  Browser client should respect offline cache paths always. Desktop-app client may not use off-line cache for local (embedded) server but shall use cache for any remote servers, even for same host. All caches should be partitioned with workspace id, globally unique value through time and space.  Client should pre-fetch the contents of offline cache paths when it start IDE sessions on a workspace to use for off-line state. When client goes to off-line, after losing connection to server, it can use cached data as reply of some WFS operations and can write some data to cache to save workspace data & metadata. The changes should be persistent on client side safely. C  When a client recovers connectivity to server, it should check the stats of files and  dirs to upload if it has got some changes in offline state. If server has more recents contents, client should drop chagnes and refill the cache with fresher data. Client may have some 'time-tolerance' to accept server's data is fresher than client's, smaller than serveral seconds. If server has more recent contents, client should drop the changes and refill the cache with fresher data. If not, client should replay the changes 1 by 1.  Same protocol should be applied when client application starts with some 'unuploaded change' evertime. That means, client should save 'change history' with 'changed data' too, to process it later, when starting app again in normal condition.  All Clients should not replay any 'delete' operations while replaying changes on client's cache, to protect from more serious problems with skewed timer or unexpected behaviors. And, of course, client should not rely on cached data while connection state is healthy. \n\t   */\n\t  var exports = function(id, name, description, createdAt, workspacePath, excludedPaths, offlineCachePaths) {\n\t    var _this = this;\n\t\n\t    _this['id'] = id;\n\t    _this['name'] = name;\n\t    _this['description'] = description;\n\t    _this['createdAt'] = createdAt;\n\t\n\t    _this['workspacePath'] = workspacePath;\n\t\n\t    _this['excludedPaths'] = excludedPaths;\n\t    _this['offlineCachePaths'] = offlineCachePaths;\n\t  };\n\t\n\t  /**\n\t   * Constructs a <code>Workspace</code> from a plain JavaScript object, optionally creating a new instance.\n\t   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n\t   * @param {Object} data The plain JavaScript object bearing properties of interest.\n\t   * @param {module:model/Workspace} obj Optional instance to populate.\n\t   * @return {module:model/Workspace} The populated <code>Workspace</code> instance.\n\t   */\n\t  exports.constructFromObject = function(data, obj) {\n\t    if (data) {\n\t      obj = obj || new exports();\n\t\n\t      if (data.hasOwnProperty('id')) {\n\t        obj['id'] = ApiClient.convertToType(data['id'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('name')) {\n\t        obj['name'] = ApiClient.convertToType(data['name'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('description')) {\n\t        obj['description'] = ApiClient.convertToType(data['description'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('createdAt')) {\n\t        obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');\n\t      }\n\t      if (data.hasOwnProperty('accessedAt')) {\n\t        obj['accessedAt'] = ApiClient.convertToType(data['accessedAt'], 'Date');\n\t      }\n\t      if (data.hasOwnProperty('workspacePath')) {\n\t        obj['workspacePath'] = ApiClient.convertToType(data['workspacePath'], 'String');\n\t      }\n\t      if (data.hasOwnProperty('disposable')) {\n\t        obj['disposable'] = ApiClient.convertToType(data['disposable'], 'Boolean');\n\t      }\n\t      if (data.hasOwnProperty('excludedPaths')) {\n\t        obj['excludedPaths'] = ApiClient.convertToType(data['excludedPaths'], ['String']);\n\t      }\n\t      if (data.hasOwnProperty('offlineCachePaths')) {\n\t        obj['offlineCachePaths'] = ApiClient.convertToType(data['offlineCachePaths'], ['String']);\n\t      }\n\t    }\n\t    return obj;\n\t  }\n\t\n\t  /**\n\t   * the id of a workspace. usually same to file system id\n\t   * @member {String} id\n\t   */\n\t  exports.prototype['id'] = undefined;\n\t  /**\n\t   * display text of this workspace for UI\n\t   * @member {String} name\n\t   */\n\t  exports.prototype['name'] = undefined;\n\t  /**\n\t   * human readable description on this workspace\n\t   * @member {String} description\n\t   */\n\t  exports.prototype['description'] = undefined;\n\t  /**\n\t   * the time when this workspace is created (registered from local file system)\n\t   * @member {Date} createdAt\n\t   */\n\t  exports.prototype['createdAt'] = undefined;\n\t  /**\n\t   * the time when the last session on this workspace was made. (optional)\n\t   * @member {Date} accessedAt\n\t   */\n\t  exports.prototype['accessedAt'] = undefined;\n\t  /**\n\t   * absolute path of this workspace in server. server may not expose this property to some untrusted clients.\n\t   * @member {String} workspacePath\n\t   */\n\t  exports.prototype['workspacePath'] = undefined;\n\t  /**\n\t   * If set, workspace is ephemeral - server will not keep persistence when it stops working. Ususally, side-loaded workspace via desktop app is disposable. Client with proper access right can flip this flag to declare the workspace should be persist. \n\t   * @member {Boolean} disposable\n\t   */\n\t  exports.prototype['disposable'] = undefined;\n\t  /**\n\t   * Ignore patterns to exclude from watch service and search-and-replace operations.  Pattern follows '.gitignore' syntax, 1 item per line. It should work as a .gitignore file in the workspace directory. Server should remove all comment items (any item that begins with '#') and blank items. Escaping with '\\\\' char for the beginning '!' and          ending white-spaces shoule be supported, too.  To exclude a directory, client may have to put '/' at the end of the item to exclude everything underneath it. When a dir path is excluded with 'ending /', watch service  may not deliver unlinkDir/addDir events for the path and client should manually check the existence or stats. \n\t   * @member {Array.<String>} excludedPaths\n\t   */\n\t  exports.prototype['excludedPaths'] = undefined;\n\t  /**\n\t   * Any paths (including excluded paths) to be cached in remote clients.  Browser client should respect offline cache paths always. Desktop-app client may not use off-line cache for local (embedded) server but shall use cache for any remote servers, even for same host. All caches should be partitioned with workspace id, globally unique value through time and space.  Client should pre-fetch the contents of offline cache paths when it start IDE sessions on a workspace to use for off-line state. When client goes to off-line, after losing connection to server, it can use cached data as reply of some WFS operations and can write some data to cache to save workspace data & metadata. The changes should be persistent on client side safely. C  When a client recovers connectivity to server, it should check the stats of files and  dirs to upload if it has got some changes in offline state. If server has more recents contents, client should drop chagnes and refill the cache with fresher data. Client may have some 'time-tolerance' to accept server's data is fresher than client's, smaller than serveral seconds. If server has more recent contents, client should drop the changes and refill the cache with fresher data. If not, client should replay the changes 1 by 1.  Same protocol should be applied when client application starts with some 'unuploaded change' evertime. That means, client should save 'change history' with 'changed data' too, to process it later, when starting app again in normal condition.  All Clients should not replay any 'delete' operations while replaying changes on client's cache, to protect from more serious problems with skewed timer or unexpected behaviors. And, of course, client should not rely on cached data while connection state is healthy. \n\t   * @member {Array.<String>} offlineCachePaths\n\t   */\n\t  exports.prototype['offlineCachePaths'] = undefined;\n\t\n\t\n\t\n\t  return exports;\n\t}));\n\t\n\t\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.superagent = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\t/**\n\t * Check if `obj` is an object.\n\t *\n\t * @param {Object} obj\n\t * @return {Boolean}\n\t * @api private\n\t */\n\t\n\tfunction isObject(obj) {\n\t  return null !== obj && 'object' === typeof obj;\n\t}\n\t\n\tmodule.exports = isObject;\n\t\n\t},{}],2:[function(require,module,exports){\n\t/**\n\t * Module of mixed-in functions shared between node and client code\n\t */\n\tvar isObject = require('./is-object');\n\t\n\t/**\n\t * Clear previous timeout.\n\t *\n\t * @return {Request} for chaining\n\t * @api public\n\t */\n\t\n\texports.clearTimeout = function _clearTimeout(){\n\t  this._timeout = 0;\n\t  clearTimeout(this._timer);\n\t  return this;\n\t};\n\t\n\t/**\n\t * Override default response body parser\n\t *\n\t * This function will be called to convert incoming data into request.body\n\t *\n\t * @param {Function}\n\t * @api public\n\t */\n\t\n\texports.parse = function parse(fn){\n\t  this._parser = fn;\n\t  return this;\n\t};\n\t\n\t/**\n\t * Override default request body serializer\n\t *\n\t * This function will be called to convert data set via .send or .attach into payload to send\n\t *\n\t * @param {Function}\n\t * @api public\n\t */\n\t\n\texports.serialize = function serialize(fn){\n\t  this._serializer = fn;\n\t  return this;\n\t};\n\t\n\t/**\n\t * Set timeout to `ms`.\n\t *\n\t * @param {Number} ms\n\t * @return {Request} for chaining\n\t * @api public\n\t */\n\t\n\texports.timeout = function timeout(ms){\n\t  this._timeout = ms;\n\t  return this;\n\t};\n\t\n\t/**\n\t * Promise support\n\t *\n\t * @param {Function} resolve\n\t * @param {Function} reject\n\t * @return {Request}\n\t */\n\t\n\texports.then = function then(resolve, reject) {\n\t  if (!this._fullfilledPromise) {\n\t    var self = this;\n\t    this._fullfilledPromise = new Promise(function(innerResolve, innerReject){\n\t      self.end(function(err, res){\n\t        if (err) innerReject(err); else innerResolve(res);\n\t      });\n\t    });\n\t  }\n\t  return this._fullfilledPromise.then(resolve, reject);\n\t}\n\t\n\t/**\n\t * Allow for extension\n\t */\n\t\n\texports.use = function use(fn) {\n\t  fn(this);\n\t  return this;\n\t}\n\t\n\t\n\t/**\n\t * Get request header `field`.\n\t * Case-insensitive.\n\t *\n\t * @param {String} field\n\t * @return {String}\n\t * @api public\n\t */\n\t\n\texports.get = function(field){\n\t  return this._header[field.toLowerCase()];\n\t};\n\t\n\t/**\n\t * Get case-insensitive header `field` value.\n\t * This is a deprecated internal API. Use `.get(field)` instead.\n\t *\n\t * (getHeader is no longer used internally by the superagent code base)\n\t *\n\t * @param {String} field\n\t * @return {String}\n\t * @api private\n\t * @deprecated\n\t */\n\t\n\texports.getHeader = exports.get;\n\t\n\t/**\n\t * Set header `field` to `val`, or multiple fields with one object.\n\t * Case-insensitive.\n\t *\n\t * Examples:\n\t *\n\t *      req.get('/')\n\t *        .set('Accept', 'application/json')\n\t *        .set('X-API-Key', 'foobar')\n\t *        .end(callback);\n\t *\n\t *      req.get('/')\n\t *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n\t *        .end(callback);\n\t *\n\t * @param {String|Object} field\n\t * @param {String} val\n\t * @return {Request} for chaining\n\t * @api public\n\t */\n\t\n\texports.set = function(field, val){\n\t  if (isObject(field)) {\n\t    for (var key in field) {\n\t      this.set(key, field[key]);\n\t    }\n\t    return this;\n\t  }\n\t  this._header[field.toLowerCase()] = val;\n\t  this.header[field] = val;\n\t  return this;\n\t};\n\t\n\t/**\n\t * Remove header `field`.\n\t * Case-insensitive.\n\t *\n\t * Example:\n\t *\n\t *      req.get('/')\n\t *        .unset('User-Agent')\n\t *        .end(callback);\n\t *\n\t * @param {String} field\n\t */\n\texports.unset = function(field){\n\t  delete this._header[field.toLowerCase()];\n\t  delete this.header[field];\n\t  return this;\n\t};\n\t\n\t/**\n\t * Write the field `name` and `val` for \"multipart/form-data\"\n\t * request bodies.\n\t *\n\t * ``` js\n\t * request.post('/upload')\n\t *   .field('foo', 'bar')\n\t *   .end(callback);\n\t * ```\n\t *\n\t * @param {String} name\n\t * @param {String|Blob|File|Buffer|fs.ReadStream} val\n\t * @return {Request} for chaining\n\t * @api public\n\t */\n\texports.field = function(name, val) {\n\t  this._getFormData().append(name, val);\n\t  return this;\n\t};\n\t\n\t/**\n\t * Abort the request, and clear potential timeout.\n\t *\n\t * @return {Request}\n\t * @api public\n\t */\n\texports.abort = function(){\n\t  if (this._aborted) {\n\t    return this;\n\t  }\n\t  this._aborted = true;\n\t  this.xhr && this.xhr.abort(); // browser\n\t  this.req && this.req.abort(); // node\n\t  this.clearTimeout();\n\t  this.emit('abort');\n\t  return this;\n\t};\n\t\n\t/**\n\t * Enable transmission of cookies with x-domain requests.\n\t *\n\t * Note that for this to work the origin must not be\n\t * using \"Access-Control-Allow-Origin\" with a wildcard,\n\t * and also must set \"Access-Control-Allow-Credentials\"\n\t * to \"true\".\n\t *\n\t * @api public\n\t */\n\t\n\texports.withCredentials = function(){\n\t  // This is browser-only functionality. Node side is no-op.\n\t  this._withCredentials = true;\n\t  return this;\n\t};\n\t\n\t/**\n\t * Set the max redirects to `n`. Does noting in browser XHR implementation.\n\t *\n\t * @param {Number} n\n\t * @return {Request} for chaining\n\t * @api public\n\t */\n\t\n\texports.redirects = function(n){\n\t  this._maxRedirects = n;\n\t  return this;\n\t};\n\t\n\t/**\n\t * Convert to a plain javascript object (not JSON string) of scalar properties.\n\t * Note as this method is designed to return a useful non-this value,\n\t * it cannot be chained.\n\t *\n\t * @return {Object} describing method, url, and data of this request\n\t * @api public\n\t */\n\t\n\texports.toJSON = function(){\n\t  return {\n\t    method: this.method,\n\t    url: this.url,\n\t    data: this._data\n\t  };\n\t};\n\t\n\t/**\n\t * Check if `obj` is a host object,\n\t * we don't want to serialize these :)\n\t *\n\t * TODO: future proof, move to compoent land\n\t *\n\t * @param {Object} obj\n\t * @return {Boolean}\n\t * @api private\n\t */\n\t\n\texports._isHost = function _isHost(obj) {\n\t  var str = {}.toString.call(obj);\n\t\n\t  switch (str) {\n\t    case '[object File]':\n\t    case '[object Blob]':\n\t    case '[object FormData]':\n\t      return true;\n\t    default:\n\t      return false;\n\t  }\n\t}\n\t\n\t/**\n\t * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n\t * an object is given.\n\t *\n\t * Examples:\n\t *\n\t *       // manual json\n\t *       request.post('/user')\n\t *         .type('json')\n\t *         .send('{\"name\":\"tj\"}')\n\t *         .end(callback)\n\t *\n\t *       // auto json\n\t *       request.post('/user')\n\t *         .send({ name: 'tj' })\n\t *         .end(callback)\n\t *\n\t *       // manual x-www-form-urlencoded\n\t *       request.post('/user')\n\t *         .type('form')\n\t *         .send('name=tj')\n\t *         .end(callback)\n\t *\n\t *       // auto x-www-form-urlencoded\n\t *       request.post('/user')\n\t *         .type('form')\n\t *         .send({ name: 'tj' })\n\t *         .end(callback)\n\t *\n\t *       // defaults to x-www-form-urlencoded\n\t *      request.post('/user')\n\t *        .send('name=tobi')\n\t *        .send('species=ferret')\n\t *        .end(callback)\n\t *\n\t * @param {String|Object} data\n\t * @return {Request} for chaining\n\t * @api public\n\t */\n\t\n\texports.send = function(data){\n\t  var obj = isObject(data);\n\t  var type = this._header['content-type'];\n\t\n\t  // merge\n\t  if (obj && isObject(this._data)) {\n\t    for (var key in data) {\n\t      this._data[key] = data[key];\n\t    }\n\t  } else if ('string' == typeof data) {\n\t    // default to x-www-form-urlencoded\n\t    if (!type) this.type('form');\n\t    type = this._header['content-type'];\n\t    if ('application/x-www-form-urlencoded' == type) {\n\t      this._data = this._data\n\t        ? this._data + '&' + data\n\t        : data;\n\t    } else {\n\t      this._data = (this._data || '') + data;\n\t    }\n\t  } else {\n\t    this._data = data;\n\t  }\n\t\n\t  if (!obj || this._isHost(data)) return this;\n\t\n\t  // default to json\n\t  if (!type) this.type('json');\n\t  return this;\n\t};\n\t\n\t},{\"./is-object\":1}],3:[function(require,module,exports){\n\t// The node and browser modules expose versions of this with the\n\t// appropriate constructor function bound as first argument\n\t/**\n\t * Issue a request:\n\t *\n\t * Examples:\n\t *\n\t *    request('GET', '/users').end(callback)\n\t *    request('/users').end(callback)\n\t *    request('/users', callback)\n\t *\n\t * @param {String} method\n\t * @param {String|Function} url or callback\n\t * @return {Request}\n\t * @api public\n\t */\n\t\n\tfunction request(RequestConstructor, method, url) {\n\t  // callback\n\t  if ('function' == typeof url) {\n\t    return new RequestConstructor('GET', method).end(url);\n\t  }\n\t\n\t  // url first\n\t  if (2 == arguments.length) {\n\t    return new RequestConstructor('GET', method);\n\t  }\n\t\n\t  return new RequestConstructor(method, url);\n\t}\n\t\n\tmodule.exports = request;\n\t\n\t},{}],4:[function(require,module,exports){\n\t\r\n\t/**\r\n\t * Expose `Emitter`.\r\n\t */\r\n\t\r\n\tif (typeof module !== 'undefined') {\r\n\t  module.exports = Emitter;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize a new `Emitter`.\r\n\t *\r\n\t * @api public\r\n\t */\r\n\t\r\n\tfunction Emitter(obj) {\r\n\t  if (obj) return mixin(obj);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Mixin the emitter properties.\r\n\t *\r\n\t * @param {Object} obj\r\n\t * @return {Object}\r\n\t * @api private\r\n\t */\r\n\t\r\n\tfunction mixin(obj) {\r\n\t  for (var key in Emitter.prototype) {\r\n\t    obj[key] = Emitter.prototype[key];\r\n\t  }\r\n\t  return obj;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Listen on the given `event` with `fn`.\r\n\t *\r\n\t * @param {String} event\r\n\t * @param {Function} fn\r\n\t * @return {Emitter}\r\n\t * @api public\r\n\t */\r\n\t\r\n\tEmitter.prototype.on =\r\n\tEmitter.prototype.addEventListener = function(event, fn){\r\n\t  this._callbacks = this._callbacks || {};\r\n\t  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n\t    .push(fn);\r\n\t  return this;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Adds an `event` listener that will be invoked a single\r\n\t * time then automatically removed.\r\n\t *\r\n\t * @param {String} event\r\n\t * @param {Function} fn\r\n\t * @return {Emitter}\r\n\t * @api public\r\n\t */\r\n\t\r\n\tEmitter.prototype.once = function(event, fn){\r\n\t  function on() {\r\n\t    this.off(event, on);\r\n\t    fn.apply(this, arguments);\r\n\t  }\r\n\t\r\n\t  on.fn = fn;\r\n\t  this.on(event, on);\r\n\t  return this;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Remove the given callback for `event` or all\r\n\t * registered callbacks.\r\n\t *\r\n\t * @param {String} event\r\n\t * @param {Function} fn\r\n\t * @return {Emitter}\r\n\t * @api public\r\n\t */\r\n\t\r\n\tEmitter.prototype.off =\r\n\tEmitter.prototype.removeListener =\r\n\tEmitter.prototype.removeAllListeners =\r\n\tEmitter.prototype.removeEventListener = function(event, fn){\r\n\t  this._callbacks = this._callbacks || {};\r\n\t\r\n\t  // all\r\n\t  if (0 == arguments.length) {\r\n\t    this._callbacks = {};\r\n\t    return this;\r\n\t  }\r\n\t\r\n\t  // specific event\r\n\t  var callbacks = this._callbacks['$' + event];\r\n\t  if (!callbacks) return this;\r\n\t\r\n\t  // remove all handlers\r\n\t  if (1 == arguments.length) {\r\n\t    delete this._callbacks['$' + event];\r\n\t    return this;\r\n\t  }\r\n\t\r\n\t  // remove specific handler\r\n\t  var cb;\r\n\t  for (var i = 0; i < callbacks.length; i++) {\r\n\t    cb = callbacks[i];\r\n\t    if (cb === fn || cb.fn === fn) {\r\n\t      callbacks.splice(i, 1);\r\n\t      break;\r\n\t    }\r\n\t  }\r\n\t  return this;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Emit `event` with the given args.\r\n\t *\r\n\t * @param {String} event\r\n\t * @param {Mixed} ...\r\n\t * @return {Emitter}\r\n\t */\r\n\t\r\n\tEmitter.prototype.emit = function(event){\r\n\t  this._callbacks = this._callbacks || {};\r\n\t  var args = [].slice.call(arguments, 1)\r\n\t    , callbacks = this._callbacks['$' + event];\r\n\t\r\n\t  if (callbacks) {\r\n\t    callbacks = callbacks.slice(0);\r\n\t    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n\t      callbacks[i].apply(this, args);\r\n\t    }\r\n\t  }\r\n\t\r\n\t  return this;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Return array of callbacks for `event`.\r\n\t *\r\n\t * @param {String} event\r\n\t * @return {Array}\r\n\t * @api public\r\n\t */\r\n\t\r\n\tEmitter.prototype.listeners = function(event){\r\n\t  this._callbacks = this._callbacks || {};\r\n\t  return this._callbacks['$' + event] || [];\r\n\t};\r\n\t\r\n\t/**\r\n\t * Check if this emitter has `event` handlers.\r\n\t *\r\n\t * @param {String} event\r\n\t * @return {Boolean}\r\n\t * @api public\r\n\t */\r\n\t\r\n\tEmitter.prototype.hasListeners = function(event){\r\n\t  return !! this.listeners(event).length;\r\n\t};\r\n\t\n\t},{}],5:[function(require,module,exports){\n\t\n\t/**\n\t * Reduce `arr` with `fn`.\n\t *\n\t * @param {Array} arr\n\t * @param {Function} fn\n\t * @param {Mixed} initial\n\t *\n\t * TODO: combatible error handling?\n\t */\n\t\n\tmodule.exports = function(arr, fn, initial){  \n\t  var idx = 0;\n\t  var len = arr.length;\n\t  var curr = arguments.length == 3\n\t    ? initial\n\t    : arr[idx++];\n\t\n\t  while (idx < len) {\n\t    curr = fn.call(null, curr, arr[idx], ++idx, arr);\n\t  }\n\t  \n\t  return curr;\n\t};\n\t},{}],6:[function(require,module,exports){\n\t/**\n\t * Module dependencies.\n\t */\n\t\n\tvar Emitter = require('emitter');\n\tvar reduce = require('reduce');\n\tvar requestBase = require('./request-base');\n\tvar isObject = require('./is-object');\n\t\n\t/**\n\t * Root reference for iframes.\n\t */\n\t\n\tvar root;\n\tif (typeof window !== 'undefined') { // Browser window\n\t  root = window;\n\t} else if (typeof self !== 'undefined') { // Web Worker\n\t  root = self;\n\t} else { // Other environments\n\t  root = this;\n\t}\n\t\n\t/**\n\t * Noop.\n\t */\n\t\n\tfunction noop(){};\n\t\n\t/**\n\t * Expose `request`.\n\t */\n\t\n\tvar request = module.exports = require('./request').bind(null, Request);\n\t\n\t/**\n\t * Determine XHR.\n\t */\n\t\n\trequest.getXHR = function () {\n\t  if (root.XMLHttpRequest\n\t      && (!root.location || 'file:' != root.location.protocol\n\t          || !root.ActiveXObject)) {\n\t    return new XMLHttpRequest;\n\t  } else {\n\t    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n\t    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n\t    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n\t    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n\t  }\n\t  return false;\n\t};\n\t\n\t/**\n\t * Removes leading and trailing whitespace, added to support IE.\n\t *\n\t * @param {String} s\n\t * @return {String}\n\t * @api private\n\t */\n\t\n\tvar trim = ''.trim\n\t  ? function(s) { return s.trim(); }\n\t  : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\t\n\t/**\n\t * Serialize the given `obj`.\n\t *\n\t * @param {Object} obj\n\t * @return {String}\n\t * @api private\n\t */\n\t\n\tfunction serialize(obj) {\n\t  if (!isObject(obj)) return obj;\n\t  var pairs = [];\n\t  for (var key in obj) {\n\t    if (null != obj[key]) {\n\t      pushEncodedKeyValuePair(pairs, key, obj[key]);\n\t    }\n\t  }\n\t  return pairs.join('&');\n\t}\n\t\n\t/**\n\t * Helps 'serialize' with serializing arrays.\n\t * Mutates the pairs array.\n\t *\n\t * @param {Array} pairs\n\t * @param {String} key\n\t * @param {Mixed} val\n\t */\n\t\n\tfunction pushEncodedKeyValuePair(pairs, key, val) {\n\t  if (Array.isArray(val)) {\n\t    return val.forEach(function(v) {\n\t      pushEncodedKeyValuePair(pairs, key, v);\n\t    });\n\t  } else if (isObject(val)) {\n\t    for(var subkey in val) {\n\t      pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);\n\t    }\n\t    return;\n\t  }\n\t  pairs.push(encodeURIComponent(key)\n\t    + '=' + encodeURIComponent(val));\n\t}\n\t\n\t/**\n\t * Expose serialization method.\n\t */\n\t\n\t request.serializeObject = serialize;\n\t\n\t /**\n\t  * Parse the given x-www-form-urlencoded `str`.\n\t  *\n\t  * @param {String} str\n\t  * @return {Object}\n\t  * @api private\n\t  */\n\t\n\tfunction parseString(str) {\n\t  var obj = {};\n\t  var pairs = str.split('&');\n\t  var pair;\n\t  var pos;\n\t\n\t  for (var i = 0, len = pairs.length; i < len; ++i) {\n\t    pair = pairs[i];\n\t    pos = pair.indexOf('=');\n\t    if (pos == -1) {\n\t      obj[decodeURIComponent(pair)] = '';\n\t    } else {\n\t      obj[decodeURIComponent(pair.slice(0, pos))] =\n\t        decodeURIComponent(pair.slice(pos + 1));\n\t    }\n\t  }\n\t\n\t  return obj;\n\t}\n\t\n\t/**\n\t * Expose parser.\n\t */\n\t\n\trequest.parseString = parseString;\n\t\n\t/**\n\t * Default MIME type map.\n\t *\n\t *     superagent.types.xml = 'application/xml';\n\t *\n\t */\n\t\n\trequest.types = {\n\t  html: 'text/html',\n\t  json: 'application/json',\n\t  xml: 'application/xml',\n\t  urlencoded: 'application/x-www-form-urlencoded',\n\t  'form': 'application/x-www-form-urlencoded',\n\t  'form-data': 'application/x-www-form-urlencoded'\n\t};\n\t\n\t/**\n\t * Default serialization map.\n\t *\n\t *     superagent.serialize['application/xml'] = function(obj){\n\t *       return 'generated xml here';\n\t *     };\n\t *\n\t */\n\t\n\t request.serialize = {\n\t   'application/x-www-form-urlencoded': serialize,\n\t   'application/json': JSON.stringify\n\t };\n\t\n\t /**\n\t  * Default parsers.\n\t  *\n\t  *     superagent.parse['application/xml'] = function(str){\n\t  *       return { object parsed from str };\n\t  *     };\n\t  *\n\t  */\n\t\n\trequest.parse = {\n\t  'application/x-www-form-urlencoded': parseString,\n\t  'application/json': JSON.parse\n\t};\n\t\n\t/**\n\t * Parse the given header `str` into\n\t * an object containing the mapped fields.\n\t *\n\t * @param {String} str\n\t * @return {Object}\n\t * @api private\n\t */\n\t\n\tfunction parseHeader(str) {\n\t  var lines = str.split(/\\r?\\n/);\n\t  var fields = {};\n\t  var index;\n\t  var line;\n\t  var field;\n\t  var val;\n\t\n\t  lines.pop(); // trailing CRLF\n\t\n\t  for (var i = 0, len = lines.length; i < len; ++i) {\n\t    line = lines[i];\n\t    index = line.indexOf(':');\n\t    field = line.slice(0, index).toLowerCase();\n\t    val = trim(line.slice(index + 1));\n\t    fields[field] = val;\n\t  }\n\t\n\t  return fields;\n\t}\n\t\n\t/**\n\t * Check if `mime` is json or has +json structured syntax suffix.\n\t *\n\t * @param {String} mime\n\t * @return {Boolean}\n\t * @api private\n\t */\n\t\n\tfunction isJSON(mime) {\n\t  return /[\\/+]json\\b/.test(mime);\n\t}\n\t\n\t/**\n\t * Return the mime type for the given `str`.\n\t *\n\t * @param {String} str\n\t * @return {String}\n\t * @api private\n\t */\n\t\n\tfunction type(str){\n\t  return str.split(/ *; */).shift();\n\t};\n\t\n\t/**\n\t * Return header field parameters.\n\t *\n\t * @param {String} str\n\t * @return {Object}\n\t * @api private\n\t */\n\t\n\tfunction params(str){\n\t  return reduce(str.split(/ *; */), function(obj, str){\n\t    var parts = str.split(/ *= */)\n\t      , key = parts.shift()\n\t      , val = parts.shift();\n\t\n\t    if (key && val) obj[key] = val;\n\t    return obj;\n\t  }, {});\n\t};\n\t\n\t/**\n\t * Initialize a new `Response` with the given `xhr`.\n\t *\n\t *  - set flags (.ok, .error, etc)\n\t *  - parse header\n\t *\n\t * Examples:\n\t *\n\t *  Aliasing `superagent` as `request` is nice:\n\t *\n\t *      request = superagent;\n\t *\n\t *  We can use the promise-like API, or pass callbacks:\n\t *\n\t *      request.get('/').end(function(res){});\n\t *      request.get('/', function(res){});\n\t *\n\t *  Sending data can be chained:\n\t *\n\t *      request\n\t *        .post('/user')\n\t *        .send({ name: 'tj' })\n\t *        .end(function(res){});\n\t *\n\t *  Or passed to `.send()`:\n\t *\n\t *      request\n\t *        .post('/user')\n\t *        .send({ name: 'tj' }, function(res){});\n\t *\n\t *  Or passed to `.post()`:\n\t *\n\t *      request\n\t *        .post('/user', { name: 'tj' })\n\t *        .end(function(res){});\n\t *\n\t * Or further reduced to a single call for simple cases:\n\t *\n\t *      request\n\t *        .post('/user', { name: 'tj' }, function(res){});\n\t *\n\t * @param {XMLHTTPRequest} xhr\n\t * @param {Object} options\n\t * @api private\n\t */\n\t\n\tfunction Response(req, options) {\n\t  options = options || {};\n\t  this.req = req;\n\t  this.xhr = this.req.xhr;\n\t  // responseText is accessible only if responseType is '' or 'text' and on older browsers\n\t  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')\n\t     ? this.xhr.responseText\n\t     : null;\n\t  this.statusText = this.req.xhr.statusText;\n\t  this._setStatusProperties(this.xhr.status);\n\t  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n\t  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n\t  // getResponseHeader still works. so we get content-type even if getting\n\t  // other headers fails.\n\t  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n\t  this._setHeaderProperties(this.header);\n\t  this.body = this.req.method != 'HEAD'\n\t    ? this._parseBody(this.text ? this.text : this.xhr.response)\n\t    : null;\n\t}\n\t\n\t/**\n\t * Get case-insensitive `field` value.\n\t *\n\t * @param {String} field\n\t * @return {String}\n\t * @api public\n\t */\n\t\n\tResponse.prototype.get = function(field){\n\t  return this.header[field.toLowerCase()];\n\t};\n\t\n\t/**\n\t * Set header related properties:\n\t *\n\t *   - `.type` the content type without params\n\t *\n\t * A response of \"Content-Type: text/plain; charset=utf-8\"\n\t * will provide you with a `.type` of \"text/plain\".\n\t *\n\t * @param {Object} header\n\t * @api private\n\t */\n\t\n\tResponse.prototype._setHeaderProperties = function(header){\n\t  // content-type\n\t  var ct = this.header['content-type'] || '';\n\t  this.type = type(ct);\n\t\n\t  // params\n\t  var obj = params(ct);\n\t  for (var key in obj) this[key] = obj[key];\n\t};\n\t\n\t/**\n\t * Parse the given body `str`.\n\t *\n\t * Used for auto-parsing of bodies. Parsers\n\t * are defined on the `superagent.parse` object.\n\t *\n\t * @param {String} str\n\t * @return {Mixed}\n\t * @api private\n\t */\n\t\n\tResponse.prototype._parseBody = function(str){\n\t  var parse = request.parse[this.type];\n\t  if (!parse && isJSON(this.type)) {\n\t    parse = request.parse['application/json'];\n\t  }\n\t  return parse && str && (str.length || str instanceof Object)\n\t    ? parse(str)\n\t    : null;\n\t};\n\t\n\t/**\n\t * Set flags such as `.ok` based on `status`.\n\t *\n\t * For example a 2xx response will give you a `.ok` of __true__\n\t * whereas 5xx will be __false__ and `.error` will be __true__. The\n\t * `.clientError` and `.serverError` are also available to be more\n\t * specific, and `.statusType` is the class of error ranging from 1..5\n\t * sometimes useful for mapping respond colors etc.\n\t *\n\t * \"sugar\" properties are also defined for common cases. Currently providing:\n\t *\n\t *   - .noContent\n\t *   - .badRequest\n\t *   - .unauthorized\n\t *   - .notAcceptable\n\t *   - .notFound\n\t *\n\t * @param {Number} status\n\t * @api private\n\t */\n\t\n\tResponse.prototype._setStatusProperties = function(status){\n\t  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n\t  if (status === 1223) {\n\t    status = 204;\n\t  }\n\t\n\t  var type = status / 100 | 0;\n\t\n\t  // status / class\n\t  this.status = this.statusCode = status;\n\t  this.statusType = type;\n\t\n\t  // basics\n\t  this.info = 1 == type;\n\t  this.ok = 2 == type;\n\t  this.clientError = 4 == type;\n\t  this.serverError = 5 == type;\n\t  this.error = (4 == type || 5 == type)\n\t    ? this.toError()\n\t    : false;\n\t\n\t  // sugar\n\t  this.accepted = 202 == status;\n\t  this.noContent = 204 == status;\n\t  this.badRequest = 400 == status;\n\t  this.unauthorized = 401 == status;\n\t  this.notAcceptable = 406 == status;\n\t  this.notFound = 404 == status;\n\t  this.forbidden = 403 == status;\n\t};\n\t\n\t/**\n\t * Return an `Error` representative of this response.\n\t *\n\t * @return {Error}\n\t * @api public\n\t */\n\t\n\tResponse.prototype.toError = function(){\n\t  var req = this.req;\n\t  var method = req.method;\n\t  var url = req.url;\n\t\n\t  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n\t  var err = new Error(msg);\n\t  err.status = this.status;\n\t  err.method = method;\n\t  err.url = url;\n\t\n\t  return err;\n\t};\n\t\n\t/**\n\t * Expose `Response`.\n\t */\n\t\n\trequest.Response = Response;\n\t\n\t/**\n\t * Initialize a new `Request` with the given `method` and `url`.\n\t *\n\t * @param {String} method\n\t * @param {String} url\n\t * @api public\n\t */\n\t\n\tfunction Request(method, url) {\n\t  var self = this;\n\t  this._query = this._query || [];\n\t  this.method = method;\n\t  this.url = url;\n\t  this.header = {}; // preserves header name case\n\t  this._header = {}; // coerces header names to lowercase\n\t  this.on('end', function(){\n\t    var err = null;\n\t    var res = null;\n\t\n\t    try {\n\t      res = new Response(self);\n\t    } catch(e) {\n\t      err = new Error('Parser is unable to parse the response');\n\t      err.parse = true;\n\t      err.original = e;\n\t      // issue #675: return the raw response if the response parsing fails\n\t      err.rawResponse = self.xhr && self.xhr.responseText ? self.xhr.responseText : null;\n\t      // issue #876: return the http status code if the response parsing fails\n\t      err.statusCode = self.xhr && self.xhr.status ? self.xhr.status : null;\n\t      return self.callback(err);\n\t    }\n\t\n\t    self.emit('response', res);\n\t\n\t    if (err) {\n\t      return self.callback(err, res);\n\t    }\n\t\n\t    try {\n\t      if (res.status >= 200 && res.status < 300) {\n\t        return self.callback(err, res);\n\t      }\n\t\n\t      var new_err = new Error(res.statusText || 'Unsuccessful HTTP response');\n\t      new_err.original = err;\n\t      new_err.response = res;\n\t      new_err.status = res.status;\n\t\n\t      self.callback(new_err, res);\n\t    } catch(e) {\n\t      self.callback(e); // #985 touching res may cause INVALID_STATE_ERR on old Android\n\t    }\n\t  });\n\t}\n\t\n\t/**\n\t * Mixin `Emitter` and `requestBase`.\n\t */\n\t\n\tEmitter(Request.prototype);\n\tfor (var key in requestBase) {\n\t  Request.prototype[key] = requestBase[key];\n\t}\n\t\n\t/**\n\t * Set Content-Type to `type`, mapping values from `request.types`.\n\t *\n\t * Examples:\n\t *\n\t *      superagent.types.xml = 'application/xml';\n\t *\n\t *      request.post('/')\n\t *        .type('xml')\n\t *        .send(xmlstring)\n\t *        .end(callback);\n\t *\n\t *      request.post('/')\n\t *        .type('application/xml')\n\t *        .send(xmlstring)\n\t *        .end(callback);\n\t *\n\t * @param {String} type\n\t * @return {Request} for chaining\n\t * @api public\n\t */\n\t\n\tRequest.prototype.type = function(type){\n\t  this.set('Content-Type', request.types[type] || type);\n\t  return this;\n\t};\n\t\n\t/**\n\t * Set responseType to `val`. Presently valid responseTypes are 'blob' and\n\t * 'arraybuffer'.\n\t *\n\t * Examples:\n\t *\n\t *      req.get('/')\n\t *        .responseType('blob')\n\t *        .end(callback);\n\t *\n\t * @param {String} val\n\t * @return {Request} for chaining\n\t * @api public\n\t */\n\t\n\tRequest.prototype.responseType = function(val){\n\t  this._responseType = val;\n\t  return this;\n\t};\n\t\n\t/**\n\t * Set Accept to `type`, mapping values from `request.types`.\n\t *\n\t * Examples:\n\t *\n\t *      superagent.types.json = 'application/json';\n\t *\n\t *      request.get('/agent')\n\t *        .accept('json')\n\t *        .end(callback);\n\t *\n\t *      request.get('/agent')\n\t *        .accept('application/json')\n\t *        .end(callback);\n\t *\n\t * @param {String} accept\n\t * @return {Request} for chaining\n\t * @api public\n\t */\n\t\n\tRequest.prototype.accept = function(type){\n\t  this.set('Accept', request.types[type] || type);\n\t  return this;\n\t};\n\t\n\t/**\n\t * Set Authorization field value with `user` and `pass`.\n\t *\n\t * @param {String} user\n\t * @param {String} pass\n\t * @param {Object} options with 'type' property 'auto' or 'basic' (default 'basic')\n\t * @return {Request} for chaining\n\t * @api public\n\t */\n\t\n\tRequest.prototype.auth = function(user, pass, options){\n\t  if (!options) {\n\t    options = {\n\t      type: 'basic'\n\t    }\n\t  }\n\t\n\t  switch (options.type) {\n\t    case 'basic':\n\t      var str = btoa(user + ':' + pass);\n\t      this.set('Authorization', 'Basic ' + str);\n\t    break;\n\t\n\t    case 'auto':\n\t      this.username = user;\n\t      this.password = pass;\n\t    break;\n\t  }\n\t  return this;\n\t};\n\t\n\t/**\n\t* Add query-string `val`.\n\t*\n\t* Examples:\n\t*\n\t*   request.get('/shoes')\n\t*     .query('size=10')\n\t*     .query({ color: 'blue' })\n\t*\n\t* @param {Object|String} val\n\t* @return {Request} for chaining\n\t* @api public\n\t*/\n\t\n\tRequest.prototype.query = function(val){\n\t  if ('string' != typeof val) val = serialize(val);\n\t  if (val) this._query.push(val);\n\t  return this;\n\t};\n\t\n\t/**\n\t * Queue the given `file` as an attachment to the specified `field`,\n\t * with optional `filename`.\n\t *\n\t * ``` js\n\t * request.post('/upload')\n\t *   .attach('content', new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n\t *   .end(callback);\n\t * ```\n\t *\n\t * @param {String} field\n\t * @param {Blob|File} file\n\t * @param {String} filename\n\t * @return {Request} for chaining\n\t * @api public\n\t */\n\t\n\tRequest.prototype.attach = function(field, file, filename){\n\t  this._getFormData().append(field, file, filename || file.name);\n\t  return this;\n\t};\n\t\n\tRequest.prototype._getFormData = function(){\n\t  if (!this._formData) {\n\t    this._formData = new root.FormData();\n\t  }\n\t  return this._formData;\n\t};\n\t\n\t/**\n\t * Invoke the callback with `err` and `res`\n\t * and handle arity check.\n\t *\n\t * @param {Error} err\n\t * @param {Response} res\n\t * @api private\n\t */\n\t\n\tRequest.prototype.callback = function(err, res){\n\t  var fn = this._callback;\n\t  this.clearTimeout();\n\t  fn(err, res);\n\t};\n\t\n\t/**\n\t * Invoke callback with x-domain error.\n\t *\n\t * @api private\n\t */\n\t\n\tRequest.prototype.crossDomainError = function(){\n\t  var err = new Error('Request has been terminated\\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');\n\t  err.crossDomain = true;\n\t\n\t  err.status = this.status;\n\t  err.method = this.method;\n\t  err.url = this.url;\n\t\n\t  this.callback(err);\n\t};\n\t\n\t/**\n\t * Invoke callback with timeout error.\n\t *\n\t * @api private\n\t */\n\t\n\tRequest.prototype._timeoutError = function(){\n\t  var timeout = this._timeout;\n\t  var err = new Error('timeout of ' + timeout + 'ms exceeded');\n\t  err.timeout = timeout;\n\t  this.callback(err);\n\t};\n\t\n\t/**\n\t * Compose querystring to append to req.url\n\t *\n\t * @api private\n\t */\n\t\n\tRequest.prototype._appendQueryString = function(){\n\t  var query = this._query.join('&');\n\t  if (query) {\n\t    this.url += ~this.url.indexOf('?')\n\t      ? '&' + query\n\t      : '?' + query;\n\t  }\n\t};\n\t\n\t/**\n\t * Initiate request, invoking callback `fn(res)`\n\t * with an instanceof `Response`.\n\t *\n\t * @param {Function} fn\n\t * @return {Request} for chaining\n\t * @api public\n\t */\n\t\n\tRequest.prototype.end = function(fn){\n\t  var self = this;\n\t  var xhr = this.xhr = request.getXHR();\n\t  var timeout = this._timeout;\n\t  var data = this._formData || this._data;\n\t\n\t  // store callback\n\t  this._callback = fn || noop;\n\t\n\t  // state change\n\t  xhr.onreadystatechange = function(){\n\t    if (4 != xhr.readyState) return;\n\t\n\t    // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n\t    // result in the error \"Could not complete the operation due to error c00c023f\"\n\t    var status;\n\t    try { status = xhr.status } catch(e) { status = 0; }\n\t\n\t    if (0 == status) {\n\t      if (self.timedout) return self._timeoutError();\n\t      if (self._aborted) return;\n\t      return self.crossDomainError();\n\t    }\n\t    self.emit('end');\n\t  };\n\t\n\t  // progress\n\t  var handleProgress = function(e){\n\t    if (e.total > 0) {\n\t      e.percent = e.loaded / e.total * 100;\n\t    }\n\t    e.direction = 'download';\n\t    self.emit('progress', e);\n\t  };\n\t  if (this.hasListeners('progress')) {\n\t    xhr.onprogress = handleProgress;\n\t  }\n\t  try {\n\t    if (xhr.upload && this.hasListeners('progress')) {\n\t      xhr.upload.onprogress = handleProgress;\n\t    }\n\t  } catch(e) {\n\t    // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n\t    // Reported here:\n\t    // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n\t  }\n\t\n\t  // timeout\n\t  if (timeout && !this._timer) {\n\t    this._timer = setTimeout(function(){\n\t      self.timedout = true;\n\t      self.abort();\n\t    }, timeout);\n\t  }\n\t\n\t  // querystring\n\t  this._appendQueryString();\n\t\n\t  // initiate request\n\t  if (this.username && this.password) {\n\t    xhr.open(this.method, this.url, true, this.username, this.password);\n\t  } else {\n\t    xhr.open(this.method, this.url, true);\n\t  }\n\t\n\t  // CORS\n\t  if (this._withCredentials) xhr.withCredentials = true;\n\t\n\t  // body\n\t  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {\n\t    // serialize stuff\n\t    var contentType = this._header['content-type'];\n\t    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];\n\t    if (!serialize && isJSON(contentType)) serialize = request.serialize['application/json'];\n\t    if (serialize) data = serialize(data);\n\t  }\n\t\n\t  // set header fields\n\t  for (var field in this.header) {\n\t    if (null == this.header[field]) continue;\n\t    xhr.setRequestHeader(field, this.header[field]);\n\t  }\n\t\n\t  if (this._responseType) {\n\t    xhr.responseType = this._responseType;\n\t  }\n\t\n\t  // send stuff\n\t  this.emit('request', this);\n\t\n\t  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)\n\t  // We need null here if data is undefined\n\t  xhr.send(typeof data !== 'undefined' ? data : null);\n\t  return this;\n\t};\n\t\n\t\n\t/**\n\t * Expose `Request`.\n\t */\n\t\n\trequest.Request = Request;\n\t\n\t/**\n\t * GET `url` with optional callback `fn(res)`.\n\t *\n\t * @param {String} url\n\t * @param {Mixed|Function} data or fn\n\t * @param {Function} fn\n\t * @return {Request}\n\t * @api public\n\t */\n\t\n\trequest.get = function(url, data, fn){\n\t  var req = request('GET', url);\n\t  if ('function' == typeof data) fn = data, data = null;\n\t  if (data) req.query(data);\n\t  if (fn) req.end(fn);\n\t  return req;\n\t};\n\t\n\t/**\n\t * HEAD `url` with optional callback `fn(res)`.\n\t *\n\t * @param {String} url\n\t * @param {Mixed|Function} data or fn\n\t * @param {Function} fn\n\t * @return {Request}\n\t * @api public\n\t */\n\t\n\trequest.head = function(url, data, fn){\n\t  var req = request('HEAD', url);\n\t  if ('function' == typeof data) fn = data, data = null;\n\t  if (data) req.send(data);\n\t  if (fn) req.end(fn);\n\t  return req;\n\t};\n\t\n\t/**\n\t * OPTIONS query to `url` with optional callback `fn(res)`.\n\t *\n\t * @param {String} url\n\t * @param {Mixed|Function} data or fn\n\t * @param {Function} fn\n\t * @return {Request}\n\t * @api public\n\t */\n\t\n\trequest.options = function(url, data, fn){\n\t  var req = request('OPTIONS', url);\n\t  if ('function' == typeof data) fn = data, data = null;\n\t  if (data) req.send(data);\n\t  if (fn) req.end(fn);\n\t  return req;\n\t};\n\t\n\t/**\n\t * DELETE `url` with optional callback `fn(res)`.\n\t *\n\t * @param {String} url\n\t * @param {Function} fn\n\t * @return {Request}\n\t * @api public\n\t */\n\t\n\tfunction del(url, fn){\n\t  var req = request('DELETE', url);\n\t  if (fn) req.end(fn);\n\t  return req;\n\t};\n\t\n\trequest['del'] = del;\n\trequest['delete'] = del;\n\t\n\t/**\n\t * PATCH `url` with optional `data` and callback `fn(res)`.\n\t *\n\t * @param {String} url\n\t * @param {Mixed} data\n\t * @param {Function} fn\n\t * @return {Request}\n\t * @api public\n\t */\n\t\n\trequest.patch = function(url, data, fn){\n\t  var req = request('PATCH', url);\n\t  if ('function' == typeof data) fn = data, data = null;\n\t  if (data) req.send(data);\n\t  if (fn) req.end(fn);\n\t  return req;\n\t};\n\t\n\t/**\n\t * POST `url` with optional `data` and callback `fn(res)`.\n\t *\n\t * @param {String} url\n\t * @param {Mixed} data\n\t * @param {Function} fn\n\t * @return {Request}\n\t * @api public\n\t */\n\t\n\trequest.post = function(url, data, fn){\n\t  var req = request('POST', url);\n\t  if ('function' == typeof data) fn = data, data = null;\n\t  if (data) req.send(data);\n\t  if (fn) req.end(fn);\n\t  return req;\n\t};\n\t\n\t/**\n\t * PUT `url` with optional `data` and callback `fn(res)`.\n\t *\n\t * @param {String} url\n\t * @param {Mixed|Function} data or fn\n\t * @param {Function} fn\n\t * @return {Request}\n\t * @api public\n\t */\n\t\n\trequest.put = function(url, data, fn){\n\t  var req = request('PUT', url);\n\t  if ('function' == typeof data) fn = data, data = null;\n\t  if (data) req.send(data);\n\t  if (fn) req.end(fn);\n\t  return req;\n\t};\n\t\n\t},{\"./is-object\":1,\"./request\":3,\"./request-base\":2,\"emitter\":4,\"reduce\":5}]},{},[6])(6)\n\t});\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(7), __webpack_require__(2), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'), require('../model/Alias'), require('../model/RestError'), require('../model/RestOK'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.AliasApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.Alias, root.WebidaRestfulApi.RestError, root.WebidaRestfulApi.RestOK);\n\t  }\n\t}(this, function(ApiClient, Alias, RestError, RestOK) {\n\t  'use strict';\n\t\n\t  /**\n\t   * Alias service.\n\t   * @module api/AliasApi\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new AliasApi. \n\t   * @alias module:api/AliasApi\n\t   * @class\n\t   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n\t   * default to {@link module:ApiClient#instance} if unspecified.\n\t   */\n\t  var exports = function(apiClient) {\n\t    this.apiClient = apiClient || ApiClient.instance;\n\t\n\t\n\t    /**\n\t     * Callback function to receive the result of the findAliases operation.\n\t     * @callback module:api/AliasApi~findAliasesCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {Array.<module:model/Alias>} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * get alias objects. set aliasId to &#39;*&#39; to find all aliases in some workspace. if alias id is given, only 0 or 1 matched alias object will be returned.\n\t     * @param {String} aliasId url path fragment alias id. should have no &#39;/&#39; as well as any &#39;unsafe&#39; chars for url path.  especially, &#39;*&#39; is reserved for finding operations or some other special case.\n\t     * @param {String} workspaceId webida workspace id in query part\n\t     * @param {module:api/AliasApi~findAliasesCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {Array.<module:model/Alias>}\n\t     */\n\t    this.findAliases = function(aliasId, workspaceId, callback) {\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'aliasId' is set\n\t      if (aliasId == undefined || aliasId == null) {\n\t        throw \"Missing the required parameter 'aliasId' when calling findAliases\";\n\t      }\n\t\n\t      // verify the required parameter 'workspaceId' is set\n\t      if (workspaceId == undefined || workspaceId == null) {\n\t        throw \"Missing the required parameter 'workspaceId' when calling findAliases\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'aliasId': aliasId\n\t      };\n\t      var queryParams = {\n\t        'workspaceId': workspaceId\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = [Alias];\n\t\n\t      return this.apiClient.callApi(\n\t        '/aliass/{aliasId}', 'GET',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the putAlias operation.\n\t     * @callback module:api/AliasApi~putAliasCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/RestOK} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * create, or update an alias.\n\t     * @param {String} aliasId url path fragment alias id. should have no &#39;/&#39; as well as any &#39;unsafe&#39; chars for url path.  especially, &#39;*&#39; is reserved for finding operations or some other special case.\n\t     * @param {module:model/Alias} body alias object to write. should have same id to aliasId parameter.\n\t     * @param {module:api/AliasApi~putAliasCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/RestOK}\n\t     */\n\t    this.putAlias = function(aliasId, body, callback) {\n\t      var postBody = body;\n\t\n\t      // verify the required parameter 'aliasId' is set\n\t      if (aliasId == undefined || aliasId == null) {\n\t        throw \"Missing the required parameter 'aliasId' when calling putAlias\";\n\t      }\n\t\n\t      // verify the required parameter 'body' is set\n\t      if (body == undefined || body == null) {\n\t        throw \"Missing the required parameter 'body' when calling putAlias\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'aliasId': aliasId\n\t      };\n\t      var queryParams = {\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = RestOK;\n\t\n\t      return this.apiClient.callApi(\n\t        '/aliass/{aliasId}', 'PUT',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the removeAliases operation.\n\t     * @callback module:api/AliasApi~removeAliasesCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/RestOK} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * remove alias. targeting rule is same to findAliases() operation.\n\t     * @param {String} aliasId url path fragment alias id. should have no &#39;/&#39; as well as any &#39;unsafe&#39; chars for url path.  especially, &#39;*&#39; is reserved for finding operations or some other special case.\n\t     * @param {String} workspaceId webida workspace id in query part\n\t     * @param {module:api/AliasApi~removeAliasesCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/RestOK}\n\t     */\n\t    this.removeAliases = function(aliasId, workspaceId, callback) {\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'aliasId' is set\n\t      if (aliasId == undefined || aliasId == null) {\n\t        throw \"Missing the required parameter 'aliasId' when calling removeAliases\";\n\t      }\n\t\n\t      // verify the required parameter 'workspaceId' is set\n\t      if (workspaceId == undefined || workspaceId == null) {\n\t        throw \"Missing the required parameter 'workspaceId' when calling removeAliases\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'aliasId': aliasId\n\t      };\n\t      var queryParams = {\n\t        'workspaceId': workspaceId\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = RestOK;\n\t\n\t      return this.apiClient.callApi(\n\t        '/aliass/{aliasId}', 'DELETE',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t  };\n\t\n\t  return exports;\n\t}));\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(15), __webpack_require__(2), __webpack_require__(14), __webpack_require__(9)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'), require('../model/User'), require('../model/RestError'), require('../model/Token'), require('../model/Credential'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.AuthApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.User, root.WebidaRestfulApi.RestError, root.WebidaRestfulApi.Token, root.WebidaRestfulApi.Credential);\n\t  }\n\t}(this, function(ApiClient, User, RestError, Token, Credential) {\n\t  'use strict';\n\t\n\t  /**\n\t   * Auth service.\n\t   * @module api/AuthApi\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new AuthApi. \n\t   * @alias module:api/AuthApi\n\t   * @class\n\t   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n\t   * default to {@link module:ApiClient#instance} if unspecified.\n\t   */\n\t  var exports = function(apiClient) {\n\t    this.apiClient = apiClient || ApiClient.instance;\n\t\n\t\n\t    /**\n\t     * Callback function to receive the result of the getInfo operation.\n\t     * @callback module:api/AuthApi~getInfoCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/User} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Gets user information of that can be identified with current access token. Implementations should provide a more restful api based on domain data model, not extending this operation. (e.g. GET,PUT and DELETE on /Users/{userId} to read, update and delete user) \n\t     * @param {module:api/AuthApi~getInfoCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/User}\n\t     */\n\t    this.getInfo = function(callback) {\n\t      var postBody = null;\n\t\n\t\n\t      var pathParams = {\n\t      };\n\t      var queryParams = {\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = User;\n\t\n\t      return this.apiClient.callApi(\n\t        '/auth/info', 'GET',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the issueToken operation.\n\t     * @callback module:api/AuthApi~issueTokenCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/Token} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Creates new token from current access token, inheriting workspace id &amp; session id. The duration of generated token is (and should not be) parameterizable. Server should set proper duration, respecting \\&quot;reconnect\\&quot; period of socket.io clients. Remember that most of socket.io client implementations (including official js client) do not provide any ways to change connection parameters (header or query) while reconnecting to server.  Like login API, this endpoint does not provide any encryption. Server should not set any data to harm security in the token &amp; should provide some signinig/encryption mechanism to protect token. Simple JSON Web Token with HMAC-SHA will do. \n\t     * @param {module:model/String} type \n\t     * @param {Object} opts Optional parameters\n\t     * @param {String} opts.workspaceId Clients to save some remote access info should issue a MASTER type token restricted to specific workspace id.\n\t     * @param {module:api/AuthApi~issueTokenCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/Token}\n\t     */\n\t    this.issueToken = function(type, opts, callback) {\n\t      opts = opts || {};\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'type' is set\n\t      if (type == undefined || type == null) {\n\t        throw \"Missing the required parameter 'type' when calling issueToken\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t      };\n\t      var queryParams = {\n\t        'type': type,\n\t        'workspaceId': opts['workspaceId']\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = Token;\n\t\n\t      return this.apiClient.callApi(\n\t        '/auth/token', 'POST',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the login operation.\n\t     * @callback module:api/AuthApi~loginCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/Token} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * A \\&quot;VERY\\&quot; basic authentication, required to use webida-simple-auth security scheme.  Service / Product implementations who need better security, should override this operation or add their own login api or some other specs like OAuth2. Simple auth is not suitable for large-sacle, multi-tennant service, for the scheme assumes a single, trusted user only.  Logging-in with master token, the generated access token inherits all restriction from it. On the other hand, normal log-in with login id &amp; password creates an unrestricted access token, with reasonably short expiration time.  Every client should spawn another access token with issueToken API before current access token expires, inheriting session id from current token. To save remote access info, client should create a (restricted but long-ttl) master token to start IDE from remote. The remote client should not use the unrestricted acccess token from login to use any other perpose than finding available workspaces, and should not refresh the token. (Let user log-in again)  Login API does not force any encryption. Server should provide secure transport channel, usually https, to provide remote access, always. \n\t     * @param {module:model/Credential} body \n\t     * @param {module:api/AuthApi~loginCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/Token}\n\t     */\n\t    this.login = function(body, callback) {\n\t      var postBody = body;\n\t\n\t      // verify the required parameter 'body' is set\n\t      if (body == undefined || body == null) {\n\t        throw \"Missing the required parameter 'body' when calling login\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t      };\n\t      var queryParams = {\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = [];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = Token;\n\t\n\t      return this.apiClient.callApi(\n\t        '/auth/login', 'POST',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t  };\n\t\n\t  return exports;\n\t}));\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(3), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'), require('../model/RestOK'), require('../model/RestError'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.OpsApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.RestOK, root.WebidaRestfulApi.RestError);\n\t  }\n\t}(this, function(ApiClient, RestOK, RestError) {\n\t  'use strict';\n\t\n\t  /**\n\t   * Ops service.\n\t   * @module api/OpsApi\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new OpsApi. \n\t   * @alias module:api/OpsApi\n\t   * @class\n\t   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n\t   * default to {@link module:ApiClient#instance} if unspecified.\n\t   */\n\t  var exports = function(apiClient) {\n\t    this.apiClient = apiClient || ApiClient.instance;\n\t\n\t\n\t    /**\n\t     * Callback function to receive the result of the replace operation.\n\t     * @callback module:api/OpsApi~replaceCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/RestOK} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * replace file contents with regex matching\n\t     * @param {String} wfsId webida file system id (same to workspace id) to access.\n\t     * @param {Array.<String>} wfsPathList array of wfsPath, with heading /. (collectionFormat may be changed by implementation)\n\t     * @param {String} pattern regex pattern to match in search or replace. In replace operation, pattern should be same to the parttern in search operation\n\t     * @param {String} replaceTo string to replace with\n\t     * @param {Object} opts Optional parameters\n\t     * @param {Boolean} opts.ignoreCase regex matching option to ignore case. In replace operation, this option should be same to one used in search operation (default to false)\n\t     * @param {module:api/OpsApi~replaceCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/RestOK}\n\t     */\n\t    this.replace = function(wfsId, wfsPathList, pattern, replaceTo, opts, callback) {\n\t      opts = opts || {};\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'wfsId' is set\n\t      if (wfsId == undefined || wfsId == null) {\n\t        throw \"Missing the required parameter 'wfsId' when calling replace\";\n\t      }\n\t\n\t      // verify the required parameter 'wfsPathList' is set\n\t      if (wfsPathList == undefined || wfsPathList == null) {\n\t        throw \"Missing the required parameter 'wfsPathList' when calling replace\";\n\t      }\n\t\n\t      // verify the required parameter 'pattern' is set\n\t      if (pattern == undefined || pattern == null) {\n\t        throw \"Missing the required parameter 'pattern' when calling replace\";\n\t      }\n\t\n\t      // verify the required parameter 'replaceTo' is set\n\t      if (replaceTo == undefined || replaceTo == null) {\n\t        throw \"Missing the required parameter 'replaceTo' when calling replace\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'wfsId': wfsId\n\t      };\n\t      var queryParams = {\n\t        'wfsPathList': this.apiClient.buildCollectionParam(wfsPathList, 'multi'),\n\t        'pattern': pattern,\n\t        'ignoreCase': opts['ignoreCase'],\n\t        'replaceTo': replaceTo\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = RestOK;\n\t\n\t      return this.apiClient.callApi(\n\t        '/wfs/{wfsId}/ops/replace', 'POST',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the search operation.\n\t     * @callback module:api/OpsApi~searchCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {Object.<String, {'String': [Match]}>} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * search files in some path, with given pattern\n\t     * @param {String} wfsId webida file system id (same to workspace id) to access.\n\t     * @param {Array.<String>} wfsPathList array of wfsPath, with heading /. (collectionFormat may be changed by implementation)\n\t     * @param {String} pattern regex pattern to match in search or replace. In replace operation, pattern should be same to the parttern in search operation\n\t     * @param {Object} opts Optional parameters\n\t     * @param {Boolean} opts.ignoreCase regex matching option to ignore case. In replace operation, this option should be same to one used in search operation (default to false)\n\t     * @param {module:api/OpsApi~searchCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {Object.<String, {'String': [Match]}>}\n\t     */\n\t    this.search = function(wfsId, wfsPathList, pattern, opts, callback) {\n\t      opts = opts || {};\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'wfsId' is set\n\t      if (wfsId == undefined || wfsId == null) {\n\t        throw \"Missing the required parameter 'wfsId' when calling search\";\n\t      }\n\t\n\t      // verify the required parameter 'wfsPathList' is set\n\t      if (wfsPathList == undefined || wfsPathList == null) {\n\t        throw \"Missing the required parameter 'wfsPathList' when calling search\";\n\t      }\n\t\n\t      // verify the required parameter 'pattern' is set\n\t      if (pattern == undefined || pattern == null) {\n\t        throw \"Missing the required parameter 'pattern' when calling search\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'wfsId': wfsId\n\t      };\n\t      var queryParams = {\n\t        'wfsPathList': this.apiClient.buildCollectionParam(wfsPathList, 'multi'),\n\t        'pattern': pattern,\n\t        'ignoreCase': opts['ignoreCase']\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = {'String': [Match]};\n\t\n\t      return this.apiClient.callApi(\n\t        '/wfs/{wfsId}/ops/search', 'GET',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t  };\n\t\n\t  return exports;\n\t}));\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(12), __webpack_require__(3)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'), require('../model/RestError'), require('../model/RemoteAccess'), require('../model/RestOK'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.RemotesApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.RestError, root.WebidaRestfulApi.RemoteAccess, root.WebidaRestfulApi.RestOK);\n\t  }\n\t}(this, function(ApiClient, RestError, RemoteAccess, RestOK) {\n\t  'use strict';\n\t\n\t  /**\n\t   * Remotes service.\n\t   * @module api/RemotesApi\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new RemotesApi. \n\t   * @alias module:api/RemotesApi\n\t   * @class\n\t   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n\t   * default to {@link module:ApiClient#instance} if unspecified.\n\t   */\n\t  var exports = function(apiClient) {\n\t    this.apiClient = apiClient || ApiClient.instance;\n\t\n\t\n\t    /**\n\t     * Callback function to receive the result of the findRemoteAccesses operation.\n\t     * @callback module:api/RemotesApi~findRemoteAccessesCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {Array.<module:model/RemoteAccess>} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Get all access informations See RemoteWorkspaceAccess definition for details (no fancy find / search feature yet)\n\t     * @param {module:api/RemotesApi~findRemoteAccessesCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {Array.<module:model/RemoteAccess>}\n\t     */\n\t    this.findRemoteAccesses = function(callback) {\n\t      var postBody = null;\n\t\n\t\n\t      var pathParams = {\n\t      };\n\t      var queryParams = {\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = [RemoteAccess];\n\t\n\t      return this.apiClient.callApi(\n\t        '/remotes', 'GET',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the putRemoteAccess operation.\n\t     * @callback module:api/RemotesApi~putRemoteAccessCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/RestOK} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Ceates or updates a remote workspace access information\n\t     * @param {module:model/RemoteAccess} body \n\t     * @param {module:api/RemotesApi~putRemoteAccessCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/RestOK}\n\t     */\n\t    this.putRemoteAccess = function(body, callback) {\n\t      var postBody = body;\n\t\n\t      // verify the required parameter 'body' is set\n\t      if (body == undefined || body == null) {\n\t        throw \"Missing the required parameter 'body' when calling putRemoteAccess\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t      };\n\t      var queryParams = {\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = RestOK;\n\t\n\t      return this.apiClient.callApi(\n\t        '/remotes', 'PUT',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the removeRemoteAccess operation.\n\t     * @callback module:api/RemotesApi~removeRemoteAccessCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/RemoteAccess} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Removes remote workspace access information\n\t     * @param {String} workspaceId workspace Id of remote workspace\n\t     * @param {module:api/RemotesApi~removeRemoteAccessCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/RemoteAccess}\n\t     */\n\t    this.removeRemoteAccess = function(workspaceId, callback) {\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'workspaceId' is set\n\t      if (workspaceId == undefined || workspaceId == null) {\n\t        throw \"Missing the required parameter 'workspaceId' when calling removeRemoteAccess\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t      };\n\t      var queryParams = {\n\t        'workspaceId': workspaceId\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = RemoteAccess;\n\t\n\t      return this.apiClient.callApi(\n\t        '/remotes', 'DELETE',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t  };\n\t\n\t  return exports;\n\t}));\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(3), __webpack_require__(2), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'), require('../model/RestOK'), require('../model/RestError'), require('../model/Session'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.SessionApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.RestOK, root.WebidaRestfulApi.RestError, root.WebidaRestfulApi.Session);\n\t  }\n\t}(this, function(ApiClient, RestOK, RestError, Session) {\n\t  'use strict';\n\t\n\t  /**\n\t   * Session service.\n\t   * @module api/SessionApi\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new SessionApi. \n\t   * @alias module:api/SessionApi\n\t   * @class\n\t   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n\t   * default to {@link module:ApiClient#instance} if unspecified.\n\t   */\n\t  var exports = function(apiClient) {\n\t    this.apiClient = apiClient || ApiClient.instance;\n\t\n\t\n\t    /**\n\t     * Callback function to receive the result of the closeSessions operation.\n\t     * @callback module:api/SessionApi~closeSessionsCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/RestOK} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Closes session with timeout. Targets are selected by same rule to findSessions() op. While targeting multiple sessions, this operation requires same access rights with findSessions(). Closing a single session requires &#39;same session id&#39; or &#39;unrestricted workspace acceess&#39;.\n\t     * @param {String} sessionId webida session id (usually different from socket id from sock.io)\n\t     * @param {String} workspaceId webida workspace id in query part\n\t     * @param {Integer} closeAfter Waiting time before actual closing, to let client save files and prevent reconnecting. \n\t     * @param {module:api/SessionApi~closeSessionsCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/RestOK}\n\t     */\n\t    this.closeSessions = function(sessionId, workspaceId, closeAfter, callback) {\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'sessionId' is set\n\t      if (sessionId == undefined || sessionId == null) {\n\t        throw \"Missing the required parameter 'sessionId' when calling closeSessions\";\n\t      }\n\t\n\t      // verify the required parameter 'workspaceId' is set\n\t      if (workspaceId == undefined || workspaceId == null) {\n\t        throw \"Missing the required parameter 'workspaceId' when calling closeSessions\";\n\t      }\n\t\n\t      // verify the required parameter 'closeAfter' is set\n\t      if (closeAfter == undefined || closeAfter == null) {\n\t        throw \"Missing the required parameter 'closeAfter' when calling closeSessions\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'sessionId': sessionId\n\t      };\n\t      var queryParams = {\n\t        'workspaceId': workspaceId,\n\t        'closeAfter': closeAfter\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = RestOK;\n\t\n\t      return this.apiClient.callApi(\n\t        '/sessions/{sessionId}', 'DELETE',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the findSessions operation.\n\t     * @callback module:api/SessionApi~findSessionsCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {Array.<module:model/Session>} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Finds webida sessions established to server. if session id is given, matched session info will be returned and workspace id  parameter will be ignored. To find all sessions of some workspace, set session id to &#39;*&#39; and specify workspace id.  This operation requires proper accsss rights.   1) To find all sessions, an unrestricted token is required.   2) To find some workspace sesions, token should have proper access right on the workspace. \n\t     * @param {String} sessionId webida session id (usually different from socket id from sock.io)\n\t     * @param {String} workspaceId webida workspace id in query part\n\t     * @param {module:api/SessionApi~findSessionsCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {Array.<module:model/Session>}\n\t     */\n\t    this.findSessions = function(sessionId, workspaceId, callback) {\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'sessionId' is set\n\t      if (sessionId == undefined || sessionId == null) {\n\t        throw \"Missing the required parameter 'sessionId' when calling findSessions\";\n\t      }\n\t\n\t      // verify the required parameter 'workspaceId' is set\n\t      if (workspaceId == undefined || workspaceId == null) {\n\t        throw \"Missing the required parameter 'workspaceId' when calling findSessions\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'sessionId': sessionId\n\t      };\n\t      var queryParams = {\n\t        'workspaceId': workspaceId\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = [Session];\n\t\n\t      return this.apiClient.callApi(\n\t        '/sessions/{sessionId}', 'GET',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t  };\n\t\n\t  return exports;\n\t}));\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(3), __webpack_require__(2), __webpack_require__(4), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'), require('../model/RestOK'), require('../model/RestError'), require('../model/DirEntry'), require('../model/Stats'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.WfsApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.RestOK, root.WebidaRestfulApi.RestError, root.WebidaRestfulApi.DirEntry, root.WebidaRestfulApi.Stats);\n\t  }\n\t}(this, function(ApiClient, RestOK, RestError, DirEntry, Stats) {\n\t  'use strict';\n\t\n\t  /**\n\t   * Wfs service.\n\t   * @module api/WfsApi\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new WfsApi. \n\t   * @alias module:api/WfsApi\n\t   * @class\n\t   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n\t   * default to {@link module:ApiClient#instance} if unspecified.\n\t   */\n\t  var exports = function(apiClient) {\n\t    this.apiClient = apiClient || ApiClient.instance;\n\t\n\t\n\t    /**\n\t     * Callback function to receive the result of the copy operation.\n\t     * @callback module:api/WfsApi~copyCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/RestOK} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Creates a copy of source to given path. Unlike cp command, wfsPath always denotes an exact path of the resource to be created.  So, When destination path exists already,   1) copying file to file : follows noOverwrite flag. (does not return error)   2) copying file to dir : returns 409 error   3) copying dir to file : returns 409 error   4) copying dir to dir : merge srcPath/_* to wfsPath, following noOverwite flag.  This operation creates the parents dir of destination path always, and does not roll-back the creation when operation failed. So, clients should roll-back if needed. \n\t     * @param {String} wfsId webida file system id (same to workspace id) to access.\n\t     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments\n\t     * @param {String} srcPath source data path of some operations, with have heading /\n\t     * @param {Object} opts Optional parameters\n\t     * @param {Boolean} opts.noOverwrite does not overwrites any existing file while copying or moving (default to false)\n\t     * @param {Boolean} opts.followSymbolicLinks dereference symlinks in source. (default to false)\n\t     * @param {Boolean} opts.preserveTimestamps keep mtime/atime of source file(s) in destination. (default to false)\n\t     * @param {module:api/WfsApi~copyCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/RestOK}\n\t     */\n\t    this.copy = function(wfsId, wfsPath, srcPath, opts, callback) {\n\t      opts = opts || {};\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'wfsId' is set\n\t      if (wfsId == undefined || wfsId == null) {\n\t        throw \"Missing the required parameter 'wfsId' when calling copy\";\n\t      }\n\t\n\t      // verify the required parameter 'wfsPath' is set\n\t      if (wfsPath == undefined || wfsPath == null) {\n\t        throw \"Missing the required parameter 'wfsPath' when calling copy\";\n\t      }\n\t\n\t      // verify the required parameter 'srcPath' is set\n\t      if (srcPath == undefined || srcPath == null) {\n\t        throw \"Missing the required parameter 'srcPath' when calling copy\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'wfsId': wfsId,\n\t        'wfsPath': wfsPath\n\t      };\n\t      var queryParams = {\n\t        'srcPath': srcPath,\n\t        'noOverwrite': opts['noOverwrite'],\n\t        'followSymbolicLinks': opts['followSymbolicLinks'],\n\t        'preserveTimestamps': opts['preserveTimestamps']\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = RestOK;\n\t\n\t      return this.apiClient.callApi(\n\t        '/wfs/{wfsId}/any/{wfsPath}', 'PUT',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the createDir operation.\n\t     * @callback module:api/WfsApi~createDirCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/RestOK} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Creates a directory at the path. When the path is found to be a directory, this api does not return error and does not care it&#39;s empty or not. Always creates parent directories if needed.\n\t     * @param {String} wfsId webida file system id (same to workspace id) to access.\n\t     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments\n\t     * @param {module:api/WfsApi~createDirCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/RestOK}\n\t     */\n\t    this.createDir = function(wfsId, wfsPath, callback) {\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'wfsId' is set\n\t      if (wfsId == undefined || wfsId == null) {\n\t        throw \"Missing the required parameter 'wfsId' when calling createDir\";\n\t      }\n\t\n\t      // verify the required parameter 'wfsPath' is set\n\t      if (wfsPath == undefined || wfsPath == null) {\n\t        throw \"Missing the required parameter 'wfsPath' when calling createDir\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'wfsId': wfsId,\n\t        'wfsPath': wfsPath\n\t      };\n\t      var queryParams = {\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = RestOK;\n\t\n\t      return this.apiClient.callApi(\n\t        '/wfs/{wfsId}/dir/{wfsPath}', 'PUT',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the dirTree operation.\n\t     * @callback module:api/WfsApi~dirTreeCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/DirEntry} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Returns a directory tree of given path, the errors while building sub-tree will be ignored and result will not include the path that has errors. Client may have to stat some suspicious paths manually, if listing is not complete.\n\t     * @param {String} wfsId webida file system id (same to workspace id) to access.\n\t     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments\n\t     * @param {Integer} maxDepth Maximum depth of tree. -1 to build a full tree, 0 to stat, 1 to plain list.\n\t     * @param {module:api/WfsApi~dirTreeCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/DirEntry}\n\t     */\n\t    this.dirTree = function(wfsId, wfsPath, maxDepth, callback) {\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'wfsId' is set\n\t      if (wfsId == undefined || wfsId == null) {\n\t        throw \"Missing the required parameter 'wfsId' when calling dirTree\";\n\t      }\n\t\n\t      // verify the required parameter 'wfsPath' is set\n\t      if (wfsPath == undefined || wfsPath == null) {\n\t        throw \"Missing the required parameter 'wfsPath' when calling dirTree\";\n\t      }\n\t\n\t      // verify the required parameter 'maxDepth' is set\n\t      if (maxDepth == undefined || maxDepth == null) {\n\t        throw \"Missing the required parameter 'maxDepth' when calling dirTree\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'wfsId': wfsId,\n\t        'wfsPath': wfsPath\n\t      };\n\t      var queryParams = {\n\t        'maxDepth': maxDepth\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = DirEntry;\n\t\n\t      return this.apiClient.callApi(\n\t        '/wfs/{wfsId}/dir/{wfsPath}', 'GET',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the move operation.\n\t     * @callback module:api/WfsApi~moveCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/RestOK} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Moves source resource to given path. Follows same rule to deal with existing path. So, this operation works like rename rather than mv. Just like copy(), this operations creates paraent dirs if needed and does not roll-back. Symbolic link and timestamp values will be moved without touching.\n\t     * @param {String} wfsId webida file system id (same to workspace id) to access.\n\t     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments\n\t     * @param {String} srcPath source data path of some operations, with have heading /\n\t     * @param {Object} opts Optional parameters\n\t     * @param {Boolean} opts.noOverwrite does not overwrites any existing file while copying or moving (default to false)\n\t     * @param {module:api/WfsApi~moveCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/RestOK}\n\t     */\n\t    this.move = function(wfsId, wfsPath, srcPath, opts, callback) {\n\t      opts = opts || {};\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'wfsId' is set\n\t      if (wfsId == undefined || wfsId == null) {\n\t        throw \"Missing the required parameter 'wfsId' when calling move\";\n\t      }\n\t\n\t      // verify the required parameter 'wfsPath' is set\n\t      if (wfsPath == undefined || wfsPath == null) {\n\t        throw \"Missing the required parameter 'wfsPath' when calling move\";\n\t      }\n\t\n\t      // verify the required parameter 'srcPath' is set\n\t      if (srcPath == undefined || srcPath == null) {\n\t        throw \"Missing the required parameter 'srcPath' when calling move\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'wfsId': wfsId,\n\t        'wfsPath': wfsPath\n\t      };\n\t      var queryParams = {\n\t        'srcPath': srcPath,\n\t        'noOverwrite': opts['noOverwrite']\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = RestOK;\n\t\n\t      return this.apiClient.callApi(\n\t        '/wfs/{wfsId}/any/{wfsPath}', 'POST',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the readFile operation.\n\t     * @callback module:api/WfsApi~readFileCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {File} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * read file data on path\n\t     * @param {String} wfsId webida file system id (same to workspace id) to access.\n\t     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments\n\t     * @param {module:api/WfsApi~readFileCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {File}\n\t     */\n\t    this.readFile = function(wfsId, wfsPath, callback) {\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'wfsId' is set\n\t      if (wfsId == undefined || wfsId == null) {\n\t        throw \"Missing the required parameter 'wfsId' when calling readFile\";\n\t      }\n\t\n\t      // verify the required parameter 'wfsPath' is set\n\t      if (wfsPath == undefined || wfsPath == null) {\n\t        throw \"Missing the required parameter 'wfsPath' when calling readFile\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'wfsId': wfsId,\n\t        'wfsPath': wfsPath\n\t      };\n\t      var queryParams = {\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = File;\n\t\n\t      return this.apiClient.callApi(\n\t        '/wfs/{wfsId}/file/{wfsPath}', 'GET',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the remove operation.\n\t     * @callback module:api/WfsApi~removeCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/RestOK} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * delete file or directory\n\t     * @param {String} wfsId webida file system id (same to workspace id) to access.\n\t     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments\n\t     * @param {Object} opts Optional parameters\n\t     * @param {Boolean} opts.noRecursive if set, deleting non-empty directory will return 409 error. (default to false)\n\t     * @param {module:api/WfsApi~removeCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/RestOK}\n\t     */\n\t    this.remove = function(wfsId, wfsPath, opts, callback) {\n\t      opts = opts || {};\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'wfsId' is set\n\t      if (wfsId == undefined || wfsId == null) {\n\t        throw \"Missing the required parameter 'wfsId' when calling remove\";\n\t      }\n\t\n\t      // verify the required parameter 'wfsPath' is set\n\t      if (wfsPath == undefined || wfsPath == null) {\n\t        throw \"Missing the required parameter 'wfsPath' when calling remove\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'wfsId': wfsId,\n\t        'wfsPath': wfsPath\n\t      };\n\t      var queryParams = {\n\t        'noRecursive': opts['noRecursive']\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = RestOK;\n\t\n\t      return this.apiClient.callApi(\n\t        '/wfs/{wfsId}/any/{wfsPath}', 'DELETE',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the stat operation.\n\t     * @callback module:api/WfsApi~statCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/Stats} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Get stats of given path. (stat() returns stats object in node and POSIX system). This API should be called only when stats of some file system path is stale for unknown reason (e.g. losting change events). Use dirTree operation and session events to detect stats, if possible. This API can be used to check a path is valid, existing one, but it&#39;s not recommended to check existence of individual paths by API. Clients should use dirTree and session events to synchorize some in-app file system with webida file system.\n\t     * @param {String} wfsId webida file system id (same to workspace id) to access.\n\t     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments\n\t     * @param {Object} opts Optional parameters\n\t     * @param {Boolean} opts.ignoreError When true, operation ignore ENOENT error and returns DUMMY stats object instead of 404 error. (default to false)\n\t     * @param {module:api/WfsApi~statCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/Stats}\n\t     */\n\t    this.stat = function(wfsId, wfsPath, opts, callback) {\n\t      opts = opts || {};\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'wfsId' is set\n\t      if (wfsId == undefined || wfsId == null) {\n\t        throw \"Missing the required parameter 'wfsId' when calling stat\";\n\t      }\n\t\n\t      // verify the required parameter 'wfsPath' is set\n\t      if (wfsPath == undefined || wfsPath == null) {\n\t        throw \"Missing the required parameter 'wfsPath' when calling stat\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'wfsId': wfsId,\n\t        'wfsPath': wfsPath\n\t      };\n\t      var queryParams = {\n\t        'ignoreError': opts['ignoreError']\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = Stats;\n\t\n\t      return this.apiClient.callApi(\n\t        '/wfs/{wfsId}/any/{wfsPath}', 'GET',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the writeFile operation.\n\t     * @callback module:api/WfsApi~writeFileCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/RestOK} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Creates / updates file with body data. Server should write the file in atomic manner nd should not write down request body into final destination path directly. In other words,  wheather writeFile() succeeds or not, the contents of the file should not be corrupted nor half-written.\n\t     * @param {String} wfsId webida file system id (same to workspace id) to access.\n\t     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments\n\t     * @param {File} data file contents to write.\n\t     * @param {Object} opts Optional parameters\n\t     * @param {Boolean} opts.ensureParents A flag to create all parent directories to create file or dir, like mkdir -p. This parameter does not create entire path, but ensures &#39;parent directory&#39; of the wfsPath parameter (default to false)\n\t     * @param {module:api/WfsApi~writeFileCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/RestOK}\n\t     */\n\t    this.writeFile = function(wfsId, wfsPath, data, opts, callback) {\n\t      opts = opts || {};\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'wfsId' is set\n\t      if (wfsId == undefined || wfsId == null) {\n\t        throw \"Missing the required parameter 'wfsId' when calling writeFile\";\n\t      }\n\t\n\t      // verify the required parameter 'wfsPath' is set\n\t      if (wfsPath == undefined || wfsPath == null) {\n\t        throw \"Missing the required parameter 'wfsPath' when calling writeFile\";\n\t      }\n\t\n\t      // verify the required parameter 'data' is set\n\t      if (data == undefined || data == null) {\n\t        throw \"Missing the required parameter 'data' when calling writeFile\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'wfsId': wfsId,\n\t        'wfsPath': wfsPath\n\t      };\n\t      var queryParams = {\n\t        'ensureParents': opts['ensureParents']\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t        'data': data\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['multipart/form-data'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = RestOK;\n\t\n\t      return this.apiClient.callApi(\n\t        '/wfs/{wfsId}/file/{wfsPath}', 'PUT',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t  };\n\t\n\t  return exports;\n\t}));\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(3), __webpack_require__(2), __webpack_require__(16), __webpack_require__(8), __webpack_require__(10), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'), require('../model/RestOK'), require('../model/RestError'), require('../model/Workspace'), require('../model/ChildProcess'), require('../model/Execution'), require('../model/ExecutionResult'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.WorkspaceApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.RestOK, root.WebidaRestfulApi.RestError, root.WebidaRestfulApi.Workspace, root.WebidaRestfulApi.ChildProcess, root.WebidaRestfulApi.Execution, root.WebidaRestfulApi.ExecutionResult);\n\t  }\n\t}(this, function(ApiClient, RestOK, RestError, Workspace, ChildProcess, Execution, ExecutionResult) {\n\t  'use strict';\n\t\n\t  /**\n\t   * Workspace service.\n\t   * @module api/WorkspaceApi\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new WorkspaceApi. \n\t   * @alias module:api/WorkspaceApi\n\t   * @class\n\t   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n\t   * default to {@link module:ApiClient#instance} if unspecified.\n\t   */\n\t  var exports = function(apiClient) {\n\t    this.apiClient = apiClient || ApiClient.instance;\n\t\n\t\n\t    /**\n\t     * Callback function to receive the result of the cancel operation.\n\t     * @callback module:api/WorkspaceApi~cancelCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/RestOK} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Cancels executions, killing the spawned processes. To terminate all spawned processes, set execId to &#39;*&#39;. Requires proper access rights. Since killing a process usually takes a little bit long time, this api does not returns actual result but works in async manner. (So, client should listen to web socket channels for the processes). This operation Requires same access rights to exec().\n\t     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)\n\t     * @param {String} execId the id from execution request (different from pid!)\n\t     * @param {module:api/WorkspaceApi~cancelCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/RestOK}\n\t     */\n\t    this.cancel = function(workspaceId, execId, callback) {\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'workspaceId' is set\n\t      if (workspaceId == undefined || workspaceId == null) {\n\t        throw \"Missing the required parameter 'workspaceId' when calling cancel\";\n\t      }\n\t\n\t      // verify the required parameter 'execId' is set\n\t      if (execId == undefined || execId == null) {\n\t        throw \"Missing the required parameter 'execId' when calling cancel\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'workspaceId': workspaceId\n\t      };\n\t      var queryParams = {\n\t        'execId': execId\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = RestOK;\n\t\n\t      return this.apiClient.callApi(\n\t        '/workspaces/{workspaceId}/exec', 'DELETE',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the createWorkspace operation.\n\t     * @callback module:api/WorkspaceApi~createWorkspaceCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/Workspace} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Creates a new workspace with given local path. Requires an unrestricted access token. the workspace id parameter is ignored and will be replaced by new, unique value by server. it&#39;s recommended to set the value to simple, bogus one, like &#39;*&#39; or &#39;-&#39; (since it&#39;s path  parameter, empty value is not allowed. 404 error will be returned for the case). excludedPath will be set with default values, including .git/, bower_components/ and node_modules/  Needs an unrestricted access token. \n\t     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)\n\t     * @param {String} localPath a real, local path of the system (not unixified)\n\t     * @param {String} name workspace name property\n\t     * @param {String} description workspace name property\n\t     * @param {module:api/WorkspaceApi~createWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/Workspace}\n\t     */\n\t    this.createWorkspace = function(workspaceId, localPath, name, description, callback) {\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'workspaceId' is set\n\t      if (workspaceId == undefined || workspaceId == null) {\n\t        throw \"Missing the required parameter 'workspaceId' when calling createWorkspace\";\n\t      }\n\t\n\t      // verify the required parameter 'localPath' is set\n\t      if (localPath == undefined || localPath == null) {\n\t        throw \"Missing the required parameter 'localPath' when calling createWorkspace\";\n\t      }\n\t\n\t      // verify the required parameter 'name' is set\n\t      if (name == undefined || name == null) {\n\t        throw \"Missing the required parameter 'name' when calling createWorkspace\";\n\t      }\n\t\n\t      // verify the required parameter 'description' is set\n\t      if (description == undefined || description == null) {\n\t        throw \"Missing the required parameter 'description' when calling createWorkspace\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'workspaceId': workspaceId\n\t      };\n\t      var queryParams = {\n\t        'localPath': localPath,\n\t        'name': name,\n\t        'description': description\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = Workspace;\n\t\n\t      return this.apiClient.callApi(\n\t        '/workspaces/{workspaceId}', 'POST',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the exec operation.\n\t     * @callback module:api/WorkspaceApi~execCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/ExecutionResult} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Executes a shell command or spawns a background process on this workspace. Requires proper access rights.\n\t     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)\n\t     * @param {module:model/Execution} body the process to be executed or spawned.\n\t     * @param {Object} opts Optional parameters\n\t     * @param {Boolean} opts.async Spawns a child process for given command and returns the created child proc info. Actual output (stream of message) will be delivered to web socket channel, using execution id. (default to false)\n\t     * @param {module:api/WorkspaceApi~execCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/ExecutionResult}\n\t     */\n\t    this.exec = function(workspaceId, body, opts, callback) {\n\t      opts = opts || {};\n\t      var postBody = body;\n\t\n\t      // verify the required parameter 'workspaceId' is set\n\t      if (workspaceId == undefined || workspaceId == null) {\n\t        throw \"Missing the required parameter 'workspaceId' when calling exec\";\n\t      }\n\t\n\t      // verify the required parameter 'body' is set\n\t      if (body == undefined || body == null) {\n\t        throw \"Missing the required parameter 'body' when calling exec\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'workspaceId': workspaceId\n\t      };\n\t      var queryParams = {\n\t        'async': opts['async']\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = ExecutionResult;\n\t\n\t      return this.apiClient.callApi(\n\t        '/workspaces/{workspaceId}/exec', 'POST',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the findProcs operation.\n\t     * @callback module:api/WorkspaceApi~findProcsCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {Array.<module:model/ChildProcess>} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Gets process info, created by async exec request, on this workspace. To find all spawned processes, set id to &#39;*&#39;. This op does not returns error when no procs found but empty result array. \n\t     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)\n\t     * @param {String} execId the id from execution request (different from pid!)\n\t     * @param {module:api/WorkspaceApi~findProcsCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {Array.<module:model/ChildProcess>}\n\t     */\n\t    this.findProcs = function(workspaceId, execId, callback) {\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'workspaceId' is set\n\t      if (workspaceId == undefined || workspaceId == null) {\n\t        throw \"Missing the required parameter 'workspaceId' when calling findProcs\";\n\t      }\n\t\n\t      // verify the required parameter 'execId' is set\n\t      if (execId == undefined || execId == null) {\n\t        throw \"Missing the required parameter 'execId' when calling findProcs\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'workspaceId': workspaceId\n\t      };\n\t      var queryParams = {\n\t        'execId': execId\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = [];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = [ChildProcess];\n\t\n\t      return this.apiClient.callApi(\n\t        '/workspaces/{workspaceId}/exec', 'GET',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the findWorkspaces operation.\n\t     * @callback module:api/WorkspaceApi~findWorkspacesCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {Array.<module:model/Workspace>} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Finds workspaces with given id or parameters. if workspaceId &#x3D; &#39;*&#39;, all workspaces in server  are returned. No empty workspace id is allowed for it&#39;s a path parameter. When a workspace id is not &#39;*&#39; and non-existing workspace are requested, server should send 404 error and should ignore disposable parameter. \n\t     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)\n\t     * @param {Object} opts Optional parameters\n\t     * @param {Boolean} opts.disposable flag to include disposable workspaces or not, when workspaceId is &#39;*&#39; (default to false)\n\t     * @param {module:api/WorkspaceApi~findWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {Array.<module:model/Workspace>}\n\t     */\n\t    this.findWorkspaces = function(workspaceId, opts, callback) {\n\t      opts = opts || {};\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'workspaceId' is set\n\t      if (workspaceId == undefined || workspaceId == null) {\n\t        throw \"Missing the required parameter 'workspaceId' when calling findWorkspaces\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'workspaceId': workspaceId\n\t      };\n\t      var queryParams = {\n\t        'disposable': opts['disposable']\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = [Workspace];\n\t\n\t      return this.apiClient.callApi(\n\t        '/workspaces/{workspaceId}', 'GET',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the removeWorkspace operation.\n\t     * @callback module:api/WorkspaceApi~removeWorkspaceCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/RestOK} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Removes a workspace. If no sessions are connected, this api &#39;works&#39; before returning result. if some sesions are, workspace will be removed when   1) all sessions are closed for request (will be notified by server)   2) exceeded time limit value in closeAfter parameter   3) server stops after accepting remove request and willBeRemoved value is set. So, client may &#39;find&#39; the workspace to be removed after calling this operation.  Requires \\&quot;unrestricted\\&quot; access rights. \n\t     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)\n\t     * @param {Object} opts Optional parameters\n\t     * @param {Integer} opts.closeAfter Time in seconds to wait for all sessions save &amp; close their data. (default to 0)\n\t     * @param {Boolean} opts.expunge Time in seconds to wait for all sessions save &amp; close their data.\n\t     * @param {module:api/WorkspaceApi~removeWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/RestOK}\n\t     */\n\t    this.removeWorkspace = function(workspaceId, opts, callback) {\n\t      opts = opts || {};\n\t      var postBody = null;\n\t\n\t      // verify the required parameter 'workspaceId' is set\n\t      if (workspaceId == undefined || workspaceId == null) {\n\t        throw \"Missing the required parameter 'workspaceId' when calling removeWorkspace\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'workspaceId': workspaceId\n\t      };\n\t      var queryParams = {\n\t        'closeAfter': opts['closeAfter'],\n\t        'expunge': opts['expunge']\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = RestOK;\n\t\n\t      return this.apiClient.callApi(\n\t        '/workspaces/{workspaceId}', 'DELETE',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Callback function to receive the result of the updateWorkspace operation.\n\t     * @callback module:api/WorkspaceApi~updateWorkspaceCallback\n\t     * @param {String} error Error message, if any.\n\t     * @param {module:model/Workspace} data The data returned by the service call.\n\t     * @param {String} response The complete HTTP response.\n\t     */\n\t\n\t    /**\n\t     * Updates workspace. Some protected properties will not be changed by this op. If server cannot apply changed properties before returning workspace, such properties should not be updated with this operation. Clients should not rely on request body for further works, and should always check response to see what&#39;s changed actually.  Requires proper access rights. \n\t     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)\n\t     * @param {module:model/Workspace} body workspace object that contains updates\n\t     * @param {module:api/WorkspaceApi~updateWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response\n\t     * data is of type: {module:model/Workspace}\n\t     */\n\t    this.updateWorkspace = function(workspaceId, body, callback) {\n\t      var postBody = body;\n\t\n\t      // verify the required parameter 'workspaceId' is set\n\t      if (workspaceId == undefined || workspaceId == null) {\n\t        throw \"Missing the required parameter 'workspaceId' when calling updateWorkspace\";\n\t      }\n\t\n\t      // verify the required parameter 'body' is set\n\t      if (body == undefined || body == null) {\n\t        throw \"Missing the required parameter 'body' when calling updateWorkspace\";\n\t      }\n\t\n\t\n\t      var pathParams = {\n\t        'workspaceId': workspaceId\n\t      };\n\t      var queryParams = {\n\t      };\n\t      var headerParams = {\n\t      };\n\t      var formParams = {\n\t      };\n\t\n\t      var authNames = ['webida-simple-auth'];\n\t      var contentTypes = ['application/json'];\n\t      var accepts = ['application/json', 'application/octet-stream'];\n\t      var returnType = Workspace;\n\t\n\t      return this.apiClient.callApi(\n\t        '/workspaces/{workspaceId}', 'PUT',\n\t        pathParams, queryParams, headerParams, formParams, postBody,\n\t        authNames, contentTypes, accepts, returnType, callback\n\t      );\n\t    }\n\t  };\n\t\n\t  return exports;\n\t}));\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Webida Restful API\n\t * Restful API for Webida clients to use server's data & features\n\t *\n\t * OpenAPI spec version: 0.6.0\n\t * \n\t *\n\t * NOTE: This class is auto generated by the swagger code generator program.\n\t * https://github.com/swagger-api/swagger-codegen.git\n\t * Do not edit the class manually.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t(function(root, factory) {\n\t  if (true) {\n\t    // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof module === 'object' && module.exports) {\n\t    // CommonJS-like environments that support module.exports, like Node.\n\t    module.exports = factory(require('../ApiClient'));\n\t  } else {\n\t    // Browser globals (root is window)\n\t    if (!root.WebidaRestfulApi) {\n\t      root.WebidaRestfulApi = {};\n\t    }\n\t    root.WebidaRestfulApi.Match = factory(root.WebidaRestfulApi.ApiClient);\n\t  }\n\t}(this, function(ApiClient) {\n\t  'use strict';\n\t\n\t\n\t\n\t\n\t  /**\n\t   * The Match model module.\n\t   * @module model/Match\n\t   * @version 0.6.0\n\t   */\n\t\n\t  /**\n\t   * Constructs a new <code>Match</code>.\n\t   * search result for a file\n\t   * @alias module:model/Match\n\t   * @class\n\t   * @param line {Integer} \n\t   * @param text {String} \n\t   */\n\t  var exports = function(line, text) {\n\t    var _this = this;\n\t\n\t    _this['line'] = line;\n\t    _this['text'] = text;\n\t  };\n\t\n\t  /**\n\t   * Constructs a <code>Match</code> from a plain JavaScript object, optionally creating a new instance.\n\t   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n\t   * @param {Object} data The plain JavaScript object bearing properties of interest.\n\t   * @param {module:model/Match} obj Optional instance to populate.\n\t   * @return {module:model/Match} The populated <code>Match</code> instance.\n\t   */\n\t  exports.constructFromObject = function(data, obj) {\n\t    if (data) {\n\t      obj = obj || new exports();\n\t\n\t      if (data.hasOwnProperty('line')) {\n\t        obj['line'] = ApiClient.convertToType(data['line'], 'Integer');\n\t      }\n\t      if (data.hasOwnProperty('text')) {\n\t        obj['text'] = ApiClient.convertToType(data['text'], 'String');\n\t      }\n\t    }\n\t    return obj;\n\t  }\n\t\n\t  /**\n\t   * @member {Integer} line\n\t   */\n\t  exports.prototype['line'] = undefined;\n\t  /**\n\t   * @member {String} text\n\t   */\n\t  exports.prototype['text'] = undefined;\n\t\n\t\n\t\n\t  return exports;\n\t}));\n\t\n\t\n\n\n/***/ }\n/******/ ])});;\n\n\n/** WEBPACK FOOTER **\n ** api-bundle.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 7d2699d36ecc58ceef9c\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/Alias', 'model/ChildProcess', 'model/Credential', 'model/DirEntry', 'model/Execution', 'model/ExecutionResult', 'model/Match', 'model/RemoteAccess', 'model/RestError', 'model/RestOK', 'model/Session', 'model/Stats', 'model/Token', 'model/User', 'model/Workspace', 'api/AliasApi', 'api/AuthApi', 'api/OpsApi', 'api/RemotesApi', 'api/SessionApi', 'api/WfsApi', 'api/WorkspaceApi'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('./ApiClient'), require('./model/Alias'), require('./model/ChildProcess'), require('./model/Credential'), require('./model/DirEntry'), require('./model/Execution'), require('./model/ExecutionResult'), require('./model/Match'), require('./model/RemoteAccess'), require('./model/RestError'), require('./model/RestOK'), require('./model/Session'), require('./model/Stats'), require('./model/Token'), require('./model/User'), require('./model/Workspace'), require('./api/AliasApi'), require('./api/AuthApi'), require('./api/OpsApi'), require('./api/RemotesApi'), require('./api/SessionApi'), require('./api/WfsApi'), require('./api/WorkspaceApi'));\n  }\n}(function(ApiClient, Alias, ChildProcess, Credential, DirEntry, Execution, ExecutionResult, Match, RemoteAccess, RestError, RestOK, Session, Stats, Token, User, Workspace, AliasApi, AuthApi, OpsApi, RemotesApi, SessionApi, WfsApi, WorkspaceApi) {\n  'use strict';\n\n  /**\n   * Restful_API_for_Webida_clients_to_use_servers_data__features.<br>\n   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.\n   * <p>\n   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:\n   * <pre>\n   * var WebidaRestfulApi = require('index'); // See note below*.\n   * var xxxSvc = new WebidaRestfulApi.XxxApi(); // Allocate the API class we're going to use.\n   * var yyyModel = new WebidaRestfulApi.Yyy(); // Construct a model instance.\n   * yyyModel.someProperty = 'someValue';\n   * ...\n   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.\n   * ...\n   * </pre>\n   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})\n   * and put the application logic within the callback function.</em>\n   * </p>\n   * <p>\n   * A non-AMD browser application (discouraged) might do something like this:\n   * <pre>\n   * var xxxSvc = new WebidaRestfulApi.XxxApi(); // Allocate the API class we're going to use.\n   * var yyy = new WebidaRestfulApi.Yyy(); // Construct a model instance.\n   * yyyModel.someProperty = 'someValue';\n   * ...\n   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.\n   * ...\n   * </pre>\n   * </p>\n   * @module index\n   * @version 0.6.0\n   */\n  var exports = {\n    /**\n     * The ApiClient constructor.\n     * @property {module:ApiClient}\n     */\n    ApiClient: ApiClient,\n    /**\n     * The Alias model constructor.\n     * @property {module:model/Alias}\n     */\n    Alias: Alias,\n    /**\n     * The ChildProcess model constructor.\n     * @property {module:model/ChildProcess}\n     */\n    ChildProcess: ChildProcess,\n    /**\n     * The Credential model constructor.\n     * @property {module:model/Credential}\n     */\n    Credential: Credential,\n    /**\n     * The DirEntry model constructor.\n     * @property {module:model/DirEntry}\n     */\n    DirEntry: DirEntry,\n    /**\n     * The Execution model constructor.\n     * @property {module:model/Execution}\n     */\n    Execution: Execution,\n    /**\n     * The ExecutionResult model constructor.\n     * @property {module:model/ExecutionResult}\n     */\n    ExecutionResult: ExecutionResult,\n    /**\n     * The Match model constructor.\n     * @property {module:model/Match}\n     */\n    Match: Match,\n    /**\n     * The RemoteAccess model constructor.\n     * @property {module:model/RemoteAccess}\n     */\n    RemoteAccess: RemoteAccess,\n    /**\n     * The RestError model constructor.\n     * @property {module:model/RestError}\n     */\n    RestError: RestError,\n    /**\n     * The RestOK model constructor.\n     * @property {module:model/RestOK}\n     */\n    RestOK: RestOK,\n    /**\n     * The Session model constructor.\n     * @property {module:model/Session}\n     */\n    Session: Session,\n    /**\n     * The Stats model constructor.\n     * @property {module:model/Stats}\n     */\n    Stats: Stats,\n    /**\n     * The Token model constructor.\n     * @property {module:model/Token}\n     */\n    Token: Token,\n    /**\n     * The User model constructor.\n     * @property {module:model/User}\n     */\n    User: User,\n    /**\n     * The Workspace model constructor.\n     * @property {module:model/Workspace}\n     */\n    Workspace: Workspace,\n    /**\n     * The AliasApi service constructor.\n     * @property {module:api/AliasApi}\n     */\n    AliasApi: AliasApi,\n    /**\n     * The AuthApi service constructor.\n     * @property {module:api/AuthApi}\n     */\n    AuthApi: AuthApi,\n    /**\n     * The OpsApi service constructor.\n     * @property {module:api/OpsApi}\n     */\n    OpsApi: OpsApi,\n    /**\n     * The RemotesApi service constructor.\n     * @property {module:api/RemotesApi}\n     */\n    RemotesApi: RemotesApi,\n    /**\n     * The SessionApi service constructor.\n     * @property {module:api/SessionApi}\n     */\n    SessionApi: SessionApi,\n    /**\n     * The WfsApi service constructor.\n     * @property {module:api/WfsApi}\n     */\n    WfsApi: WfsApi,\n    /**\n     * The WorkspaceApi service constructor.\n     * @property {module:api/WorkspaceApi}\n     */\n    WorkspaceApi: WorkspaceApi\n  };\n\n  return exports;\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['superagent'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('superagent'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.ApiClient = factory(root.superagent);\n  }\n}(this, function(superagent) {\n  'use strict';\n\n  /**\n   * @module ApiClient\n   * @version 0.6.0\n   */\n\n  /**\n   * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n   * application to use this class directly - the *Api and model classes provide the public API for the service. The\n   * contents of this file should be regarded as internal but are documented for completeness.\n   * @alias module:ApiClient\n   * @class\n   */\n  var exports = function() {\n    /**\n     * The base URL against which to resolve every API call's (relative) path.\n     * @type {String}\n     * @default https://localhost/api\n     */\n    this.basePath = 'https://localhost/api'.replace(/\\/+$/, '');\n\n    /**\n     * The authentication methods to be included for all API calls.\n     * @type {Array.<String>}\n     */\n    this.authentications = {\n      'webida-simple-auth': {type: 'apiKey', 'in': 'header', name: 'Authorization'}\n    };\n    /**\n     * The default HTTP headers to be included for all API calls.\n     * @type {Array.<String>}\n     * @default {}\n     */\n    this.defaultHeaders = {};\n\n    /**\n     * The default HTTP timeout for all API calls.\n     * @type {Number}\n     * @default 60000\n     */\n    this.timeout = 60000;\n  };\n\n  /**\n   * Returns a string representation for an actual parameter.\n   * @param param The actual parameter.\n   * @returns {String} The string representation of <code>param</code>.\n   */\n  exports.prototype.paramToString = function(param) {\n    if (param == undefined || param == null) {\n      return '';\n    }\n    if (param instanceof Date) {\n      return param.toJSON();\n    }\n    return param.toString();\n  };\n\n  /**\n   * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n   * NOTE: query parameters are not handled here.\n   * @param {String} path The path to append to the base URL.\n   * @param {Object} pathParams The parameter values to append.\n   * @returns {String} The encoded path with parameter values substituted.\n   */\n  exports.prototype.buildUrl = function(path, pathParams) {\n    if (!path.match(/^\\//)) {\n      path = '/' + path;\n    }\n    var url = this.basePath + path;\n    var _this = this;\n    url = url.replace(/\\{([\\w-]+)\\}/g, function(fullMatch, key) {\n      var value;\n      if (pathParams.hasOwnProperty(key)) {\n        value = _this.paramToString(pathParams[key]);\n      } else {\n        value = fullMatch;\n      }\n      return encodeURIComponent(value);\n    });\n    return url;\n  };\n\n  /**\n   * Checks whether the given content type represents JSON.<br>\n   * JSON content type examples:<br>\n   * <ul>\n   * <li>application/json</li>\n   * <li>application/json; charset=UTF8</li>\n   * <li>APPLICATION/JSON</li>\n   * </ul>\n   * @param {String} contentType The MIME content type to check.\n   * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n   */\n  exports.prototype.isJsonMime = function(contentType) {\n    return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n  };\n\n  /**\n   * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n   * @param {Array.<String>} contentTypes\n   * @returns {String} The chosen content type, preferring JSON.\n   */\n  exports.prototype.jsonPreferredMime = function(contentTypes) {\n    for (var i = 0; i < contentTypes.length; i++) {\n      if (this.isJsonMime(contentTypes[i])) {\n        return contentTypes[i];\n      }\n    }\n    return contentTypes[0];\n  };\n\n  /**\n   * Checks whether the given parameter value represents file-like content.\n   * @param param The parameter to check.\n   * @returns {Boolean} <code>true</code> if <code>param</code> represents a file. \n   */\n  exports.prototype.isFileParam = function(param) {\n    // fs.ReadStream in Node.js (but not in runtime like browserify)\n    if (typeof window === 'undefined' &&\n        typeof require === 'function' &&\n        require('fs') &&\n        param instanceof require('fs').ReadStream) {\n      return true;\n    }\n    // Buffer in Node.js\n    if (typeof Buffer === 'function' && param instanceof Buffer) {\n      return true;\n    }\n    // Blob in browser\n    if (typeof Blob === 'function' && param instanceof Blob) {\n      return true;\n    }\n    // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n    if (typeof File === 'function' && param instanceof File) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Normalizes parameter values:\n   * <ul>\n   * <li>remove nils</li>\n   * <li>keep files and arrays</li>\n   * <li>format to string with `paramToString` for other cases</li>\n   * </ul>\n   * @param {Object.<String, Object>} params The parameters as object properties.\n   * @returns {Object.<String, Object>} normalized parameters.\n   */\n  exports.prototype.normalizeParams = function(params) {\n    var newParams = {};\n    for (var key in params) {\n      if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n        var value = params[key];\n        if (this.isFileParam(value) || Array.isArray(value)) {\n          newParams[key] = value;\n        } else {\n          newParams[key] = this.paramToString(value);\n        }\n      }\n    }\n    return newParams;\n  };\n\n  /**\n   * Enumeration of collection format separator strategies.\n   * @enum {String} \n   * @readonly\n   */\n  exports.CollectionFormatEnum = {\n    /**\n     * Comma-separated values. Value: <code>csv</code>\n     * @const\n     */\n    CSV: ',',\n    /**\n     * Space-separated values. Value: <code>ssv</code>\n     * @const\n     */\n    SSV: ' ',\n    /**\n     * Tab-separated values. Value: <code>tsv</code>\n     * @const\n     */\n    TSV: '\\t',\n    /**\n     * Pipe(|)-separated values. Value: <code>pipes</code>\n     * @const\n     */\n    PIPES: '|',\n    /**\n     * Native array. Value: <code>multi</code>\n     * @const\n     */\n    MULTI: 'multi'\n  };\n\n  /**\n   * Builds a string representation of an array-type actual parameter, according to the given collection format.\n   * @param {Array} param An array parameter.\n   * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n   * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n   * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n   */\n  exports.prototype.buildCollectionParam = function buildCollectionParam(param, collectionFormat) {\n    if (param == null) {\n      return null;\n    }\n    switch (collectionFormat) {\n      case 'csv':\n        return param.map(this.paramToString).join(',');\n      case 'ssv':\n        return param.map(this.paramToString).join(' ');\n      case 'tsv':\n        return param.map(this.paramToString).join('\\t');\n      case 'pipes':\n        return param.map(this.paramToString).join('|');\n      case 'multi':\n        // return the array directly as SuperAgent will handle it as expected\n        return param.map(this.paramToString);\n      default:\n        throw new Error('Unknown collection format: ' + collectionFormat);\n    }\n  };\n\n  /**\n   * Applies authentication headers to the request.\n   * @param {Object} request The request object created by a <code>superagent()</code> call.\n   * @param {Array.<String>} authNames An array of authentication method names.\n   */\n  exports.prototype.applyAuthToRequest = function(request, authNames) {\n    var _this = this;\n    authNames.forEach(function(authName) {\n      var auth = _this.authentications[authName];\n      switch (auth.type) {\n        case 'basic':\n          if (auth.username || auth.password) {\n            request.auth(auth.username || '', auth.password || '');\n          }\n          break;\n        case 'apiKey':\n          if (auth.apiKey) {\n            var data = {};\n            if (auth.apiKeyPrefix) {\n              data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n            } else {\n              data[auth.name] = auth.apiKey;\n            }\n            if (auth['in'] === 'header') {\n              request.set(data);\n            } else {\n              request.query(data);\n            }\n          }\n          break;\n        case 'oauth2':\n          if (auth.accessToken) {\n            request.set({'Authorization': 'Bearer ' + auth.accessToken});\n          }\n          break;\n        default:\n          throw new Error('Unknown authentication type: ' + auth.type);\n      }\n    });\n  };\n\n  /**\n   * Deserializes an HTTP response body into a value of the specified type.\n   * @param {Object} response A SuperAgent response object.\n   * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n   * all properties on <code>data<code> will be converted to this type.\n   * @returns A value of the specified type.\n   */\n  exports.prototype.deserialize = function deserialize(response, returnType) {\n    if (response == null || returnType == null) {\n      return null;\n    }\n    // Rely on SuperAgent for parsing response body.\n    // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n    var data = response.body;\n    if (data == null) {\n      // SuperAgent does not always produce a body; use the unparsed response as a fallback\n      data = response.text;\n    }\n    return exports.convertToType(data, returnType);\n  };\n\n  /**\n   * Callback function to receive the result of the operation.\n   * @callback module:ApiClient~callApiCallback\n   * @param {String} error Error message, if any.\n   * @param data The data returned by the service call.\n   * @param {String} response The complete HTTP response.\n   */\n\n  /**\n   * Invokes the REST service using the supplied settings and parameters.\n   * @param {String} path The base URL to invoke.\n   * @param {String} httpMethod The HTTP method to use.\n   * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n   * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n   * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n   * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n   * @param {Object} bodyParam The value to pass as the request body.\n   * @param {Array.<String>} authNames An array of authentication type names.\n   * @param {Array.<String>} contentTypes An array of request MIME types.\n   * @param {Array.<String>} accepts An array of acceptable response MIME types.\n   * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n   * constructor for a complex type.\n   * @param {module:ApiClient~callApiCallback} callback The callback function.\n   * @returns {Object} The SuperAgent request object.\n   */\n  exports.prototype.callApi = function callApi(path, httpMethod, pathParams,\n      queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n      returnType, callback) {\n\n    var _this = this;\n    var url = this.buildUrl(path, pathParams);\n    var request = superagent(httpMethod, url);\n\n    // apply authentications\n    this.applyAuthToRequest(request, authNames);\n\n    // set query parameters\n    request.query(this.normalizeParams(queryParams));\n\n    // set header parameters\n    request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n    // set request timeout\n    request.timeout(this.timeout);\n\n    var contentType = this.jsonPreferredMime(contentTypes);\n    if (contentType !== 'multipart/form-data') {\n      if (contentType) {\n        request.type(contentType);\n      } else if (!request.header['Content-Type']) {\n        request.type('application/json');\n      }\n    }\n\n    if (contentType === 'application/x-www-form-urlencoded') {\n      request.send(this.normalizeParams(formParams));\n    } else if (contentType == 'multipart/form-data') {\n      var _formParams = this.normalizeParams(formParams);\n      for (var key in _formParams) {\n        if (_formParams.hasOwnProperty(key)) {\n          if (this.isFileParam(_formParams[key])) {\n            // file field\n            request.attach(key, _formParams[key]);\n          } else {\n            request.field(key, _formParams[key]);\n          }\n        }\n      }\n    } else if (bodyParam) {\n      request.send(bodyParam);\n    }\n\n    var accept = this.jsonPreferredMime(accepts);\n    if (accept) {\n      request.accept(accept);\n    }\n\n\n    request.end(function(error, response) {\n      if (callback) {\n        var data = null;\n        if (!error) {\n          data = _this.deserialize(response, returnType);\n        }\n        callback(error, data, response);\n      }\n    });\n\n    return request;\n  };\n\n  /**\n   * Parses an ISO-8601 string representation of a date value.\n   * @param {String} str The date value as a string.\n   * @returns {Date} The parsed date object.\n   */\n  exports.parseDate = function(str) {\n    return new Date(str.replace(/T/i, ' '));\n  };\n\n  /**\n   * Converts a value to the specified type.\n   * @param {(String|Object)} data The data to convert, as a string or object.\n   * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n   * all properties on <code>data<code> will be converted to this type.\n   * @returns An instance of the specified type.\n   */\n  exports.convertToType = function(data, type) {\n    switch (type) {\n      case 'Boolean':\n        return Boolean(data);\n      case 'Integer':\n        return parseInt(data, 10);\n      case 'Number':\n        return parseFloat(data);\n      case 'String':\n        return String(data);\n      case 'Date':\n        return this.parseDate(String(data));\n      default:\n        if (type === Object || type === File) {\n          // generic object or Blob - return directly\n          return data;\n        } else if (typeof type === 'function') {\n          if (typeof type.constructFromObject !== 'function') {\n            // some manually written models  might have no factory function\n            return data;\n          } else {\n            // for model type like: User\n            return type.constructFromObject(data);\n          }\n        } else if (Array.isArray(type)) {\n          // for array type like: ['String']\n          var itemType = type[0];\n          return data.map(function(item) {\n            return exports.convertToType(item, itemType);\n          });\n        } else if (typeof type === 'object') {\n          // for plain object type like: {'String': 'Integer'}\n          var keyType, valueType;\n          for (var k in type) {\n            if (type.hasOwnProperty(k)) {\n              keyType = k;\n              valueType = type[k];\n              break;\n            }\n          }\n          var result = {};\n          for (var k in data) {\n            if (data.hasOwnProperty(k)) {\n              var key = exports.convertToType(k, keyType);\n              var value = exports.convertToType(data[k], valueType);\n              result[key] = value;\n            }\n          }\n          return result;\n        } else {\n          // for unknown type, return the data directly\n          return data;\n        }\n    }\n  };\n\n  /**\n   * Constructs a new map or array model from REST data.\n   * @param data {Object|Array} The REST data.\n   * @param obj {Object|Array} The target object or array.\n   */\n  exports.constructFromObject = function(data, obj, itemType) {\n    if (Array.isArray(data)) {\n      for (var i = 0; i < data.length; i++) {\n        if (data.hasOwnProperty(i))\n          obj[i] = exports.convertToType(data[i], itemType);\n      }\n    } else {\n      for (var k in data) {\n        if (data.hasOwnProperty(k))\n          obj[k] = exports.convertToType(data[k], itemType);\n      }\n    }\n  };\n\n  /**\n   * The default API client implementation.\n   * @type {module:ApiClient}\n   */\n  exports.instance = new exports();\n\n  return exports;\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/ApiClient.js\n ** module id = 1\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.RestError = factory(root.WebidaRestfulApi.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The RestError model module.\n   * @module model/RestError\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new <code>RestError</code>.\n   * Error object with code and message. code is bound to status code, but not always same to standard HTTP status text. For example, some 409 error may have code \\&quot;Invalid Argument\\&quot; instead of \\&quot;Conflic\\&quot;. So, Client should read message property to know what happend exactly, when an error is returned from server. And, some 500 errors can have system errno instead of useless \\&quot;internal\\&quot;. Like other errors, details are hidden in message.\n   * @alias module:model/RestError\n   * @class\n   * @param message {String} \n   */\n  var exports = function(message) {\n    var _this = this;\n\n\n    _this['message'] = message;\n\n  };\n\n  /**\n   * Constructs a <code>RestError</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/RestError} obj Optional instance to populate.\n   * @return {module:model/RestError} The populated <code>RestError</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('code')) {\n        obj['code'] = ApiClient.convertToType(data['code'], 'String');\n      }\n      if (data.hasOwnProperty('message')) {\n        obj['message'] = ApiClient.convertToType(data['message'], 'String');\n      }\n      if (data.hasOwnProperty('errno')) {\n        obj['errno'] = ApiClient.convertToType(data['errno'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} code\n   */\n  exports.prototype['code'] = undefined;\n  /**\n   * @member {String} message\n   */\n  exports.prototype['message'] = undefined;\n  /**\n   * errno code for some internal errors in server. Since service implementation can use many different platform api & runtime, client should avoid relying on errno code.\n   * @member {String} errno\n   */\n  exports.prototype['errno'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/model/RestError.js\n ** module id = 2\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.RestOK = factory(root.WebidaRestfulApi.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The RestOK model module.\n   * @module model/RestOK\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new <code>RestOK</code>.\n   * @alias module:model/RestOK\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n  };\n\n  /**\n   * Constructs a <code>RestOK</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/RestOK} obj Optional instance to populate.\n   * @return {module:model/RestOK} The populated <code>RestOK</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('message')) {\n        obj['message'] = ApiClient.convertToType(data['message'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} message\n   */\n  exports.prototype['message'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/model/RestOK.js\n ** module id = 3\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/DirEntry', 'model/Stats'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('./DirEntry'), require('./Stats'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.DirEntry = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.DirEntry, root.WebidaRestfulApi.Stats);\n  }\n}(this, function(ApiClient, DirEntry, Stats) {\n  'use strict';\n\n\n\n\n  /**\n   * The DirEntry model module.\n   * @module model/DirEntry\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new <code>DirEntry</code>.\n   * a directory entry (file or directory) with children that represents a (sub) tree\n   * @alias module:model/DirEntry\n   * @class\n   * @param name {String} \n   * @param stats {module:model/Stats} \n   * @param children {Array.<module:model/DirEntry>} \n   */\n  var exports = function(name, stats, children) {\n    var _this = this;\n\n    _this['name'] = name;\n    _this['stats'] = stats;\n    _this['children'] = children;\n  };\n\n  /**\n   * Constructs a <code>DirEntry</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/DirEntry} obj Optional instance to populate.\n   * @return {module:model/DirEntry} The populated <code>DirEntry</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('name')) {\n        obj['name'] = ApiClient.convertToType(data['name'], 'String');\n      }\n      if (data.hasOwnProperty('stats')) {\n        obj['stats'] = Stats.constructFromObject(data['stats']);\n      }\n      if (data.hasOwnProperty('children')) {\n        obj['children'] = ApiClient.convertToType(data['children'], [DirEntry]);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} name\n   */\n  exports.prototype['name'] = undefined;\n  /**\n   * @member {module:model/Stats} stats\n   */\n  exports.prototype['stats'] = undefined;\n  /**\n   * @member {Array.<module:model/DirEntry>} children\n   */\n  exports.prototype['children'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/model/DirEntry.js\n ** module id = 4\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.Stats = factory(root.WebidaRestfulApi.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The Stats model module.\n   * @module model/Stats\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new <code>Stats</code>.\n   * simplified/augmented fs.Stats class - see node.js doc for all properties\n   * @alias module:model/Stats\n   * @class\n   * @param type {module:model/Stats.TypeEnum} All types except 'DUMMY' come from fs.Stats is*** methods results. (e.g. if isFile() is true, then type will be 'FILE') If type is not decidable by the methods, default type is 'FILE', for everything on the file system is basically a file. 'DUMMY' type means that some object 'does not exist for now'. Client may use 'DUMMY' type to mark something dangling, not written or created on real file system yet but visible to user.\n   * @param birthtime {Date} \n   * @param mtime {Date} \n   * @param mode {String} \n   * @param size {Integer} \n   * @param nlink {Integer} \n   */\n  var exports = function(type, birthtime, mtime, mode, size, nlink) {\n    var _this = this;\n\n    _this['type'] = type;\n    _this['birthtime'] = birthtime;\n    _this['mtime'] = mtime;\n    _this['mode'] = mode;\n    _this['size'] = size;\n    _this['nlink'] = nlink;\n  };\n\n  /**\n   * Constructs a <code>Stats</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/Stats} obj Optional instance to populate.\n   * @return {module:model/Stats} The populated <code>Stats</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('type')) {\n        obj['type'] = ApiClient.convertToType(data['type'], 'String');\n      }\n      if (data.hasOwnProperty('birthtime')) {\n        obj['birthtime'] = ApiClient.convertToType(data['birthtime'], 'Date');\n      }\n      if (data.hasOwnProperty('mtime')) {\n        obj['mtime'] = ApiClient.convertToType(data['mtime'], 'Date');\n      }\n      if (data.hasOwnProperty('mode')) {\n        obj['mode'] = ApiClient.convertToType(data['mode'], 'String');\n      }\n      if (data.hasOwnProperty('size')) {\n        obj['size'] = ApiClient.convertToType(data['size'], 'Integer');\n      }\n      if (data.hasOwnProperty('nlink')) {\n        obj['nlink'] = ApiClient.convertToType(data['nlink'], 'Integer');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * All types except 'DUMMY' come from fs.Stats is*** methods results. (e.g. if isFile() is true, then type will be 'FILE') If type is not decidable by the methods, default type is 'FILE', for everything on the file system is basically a file. 'DUMMY' type means that some object 'does not exist for now'. Client may use 'DUMMY' type to mark something dangling, not written or created on real file system yet but visible to user.\n   * @member {module:model/Stats.TypeEnum} type\n   */\n  exports.prototype['type'] = undefined;\n  /**\n   * @member {Date} birthtime\n   */\n  exports.prototype['birthtime'] = undefined;\n  /**\n   * @member {Date} mtime\n   */\n  exports.prototype['mtime'] = undefined;\n  /**\n   * @member {String} mode\n   */\n  exports.prototype['mode'] = undefined;\n  /**\n   * @member {Integer} size\n   */\n  exports.prototype['size'] = undefined;\n  /**\n   * @member {Integer} nlink\n   */\n  exports.prototype['nlink'] = undefined;\n\n\n  /**\n   * Allowed values for the <code>type</code> property.\n   * @enum {String}\n   * @readonly\n   */\n  exports.TypeEnum = {\n    /**\n     * value: \"FILE\"\n     * @const\n     */\n    \"FILE\": \"FILE\",\n    /**\n     * value: \"DIRECTORY\"\n     * @const\n     */\n    \"DIRECTORY\": \"DIRECTORY\",\n    /**\n     * value: \"BLOCK_DEVICE\"\n     * @const\n     */\n    \"BLOCK_DEVICE\": \"BLOCK_DEVICE\",\n    /**\n     * value: \"CHARACTER_DEVICE\"\n     * @const\n     */\n    \"CHARACTER_DEVICE\": \"CHARACTER_DEVICE\",\n    /**\n     * value: \"LINK\"\n     * @const\n     */\n    \"LINK\": \"LINK\",\n    /**\n     * value: \"FIFO\"\n     * @const\n     */\n    \"FIFO\": \"FIFO\",\n    /**\n     * value: \"SOCKET\"\n     * @const\n     */\n    \"SOCKET\": \"SOCKET\",\n    /**\n     * value: \"DUMMY\"\n     * @const\n     */\n    \"DUMMY\": \"DUMMY\"  };\n\n\n  return exports;\n}));\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/model/Stats.js\n ** module id = 5\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.Alias = factory(root.WebidaRestfulApi.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The Alias model module.\n   * @module model/Alias\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new <code>Alias</code>.\n   * alias to access file system using git or direct http requests who can&#39;t call swagger api with proper tokens\n   * @alias module:model/Alias\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>Alias</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/Alias} obj Optional instance to populate.\n   * @return {module:model/Alias} The populated <code>Alias</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'String');\n      }\n      if (data.hasOwnProperty('workspaceId')) {\n        obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');\n      }\n      if (data.hasOwnProperty('sourcePath')) {\n        obj['sourcePath'] = ApiClient.convertToType(data['sourcePath'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * id, and the path-fragment to access. Since this id is a path-fragment, any unsafe chars for path should not be included, especially / char. ?, *, and other special characters for shell are not also allowed.\n   * @member {String} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * id of the workspace that contains source of alias\n   * @member {String} workspaceId\n   */\n  exports.prototype['workspaceId'] = undefined;\n  /**\n   * the source of alias, relative path to workspace root directory.\n   * @member {String} sourcePath\n   */\n  exports.prototype['sourcePath'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/model/Alias.js\n ** module id = 7\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.ChildProcess = factory(root.WebidaRestfulApi.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The ChildProcess model module.\n   * @module model/ChildProcess\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new <code>ChildProcess</code>.\n   * a process in execution, spawned by async exec or other mean\n   * @alias module:model/ChildProcess\n   * @class\n   * @param pid {Integer} child process pid\n   * @param command {String} execution command in execution request\n   * @param args {Array.<String>} arguments of command in execution request\n   * @param execId {String} execution id from execution request\n   * @param state {module:model/ChildProcess.StateEnum} State of process. Where   CREATED - process is just created. no event has arrived yet   WORKING - some output on stdout/stderr is arrived   KILLING - sent kill signal, by cancel operation or error event from the process   EXITED  - process has exited. \n   * @param startedAt {Date} the time when this process is spawned\n   */\n  var exports = function(pid, command, args, execId, state, startedAt) {\n    var _this = this;\n\n    _this['pid'] = pid;\n    _this['command'] = command;\n    _this['args'] = args;\n    _this['execId'] = execId;\n    _this['state'] = state;\n    _this['startedAt'] = startedAt;\n\n\n  };\n\n  /**\n   * Constructs a <code>ChildProcess</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/ChildProcess} obj Optional instance to populate.\n   * @return {module:model/ChildProcess} The populated <code>ChildProcess</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('pid')) {\n        obj['pid'] = ApiClient.convertToType(data['pid'], 'Integer');\n      }\n      if (data.hasOwnProperty('command')) {\n        obj['command'] = ApiClient.convertToType(data['command'], 'String');\n      }\n      if (data.hasOwnProperty('args')) {\n        obj['args'] = ApiClient.convertToType(data['args'], ['String']);\n      }\n      if (data.hasOwnProperty('execId')) {\n        obj['execId'] = ApiClient.convertToType(data['execId'], 'String');\n      }\n      if (data.hasOwnProperty('state')) {\n        obj['state'] = ApiClient.convertToType(data['state'], 'String');\n      }\n      if (data.hasOwnProperty('startedAt')) {\n        obj['startedAt'] = ApiClient.convertToType(data['startedAt'], 'Date');\n      }\n      if (data.hasOwnProperty('exitCode')) {\n        obj['exitCode'] = ApiClient.convertToType(data['exitCode'], 'Integer');\n      }\n      if (data.hasOwnProperty('exitSignal')) {\n        obj['exitSignal'] = ApiClient.convertToType(data['exitSignal'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * child process pid\n   * @member {Integer} pid\n   */\n  exports.prototype['pid'] = undefined;\n  /**\n   * execution command in execution request\n   * @member {String} command\n   */\n  exports.prototype['command'] = undefined;\n  /**\n   * arguments of command in execution request\n   * @member {Array.<String>} args\n   */\n  exports.prototype['args'] = undefined;\n  /**\n   * execution id from execution request\n   * @member {String} execId\n   */\n  exports.prototype['execId'] = undefined;\n  /**\n   * State of process. Where   CREATED - process is just created. no event has arrived yet   WORKING - some output on stdout/stderr is arrived   KILLING - sent kill signal, by cancel operation or error event from the process   EXITED  - process has exited. \n   * @member {module:model/ChildProcess.StateEnum} state\n   */\n  exports.prototype['state'] = undefined;\n  /**\n   * the time when this process is spawned\n   * @member {Date} startedAt\n   */\n  exports.prototype['startedAt'] = undefined;\n  /**\n   * the exit code of child process. available with EXITED procs only.\n   * @member {Integer} exitCode\n   */\n  exports.prototype['exitCode'] = undefined;\n  /**\n   * the signal that killed this child process.(not always available)\n   * @member {String} exitSignal\n   */\n  exports.prototype['exitSignal'] = undefined;\n\n\n  /**\n   * Allowed values for the <code>state</code> property.\n   * @enum {String}\n   * @readonly\n   */\n  exports.StateEnum = {\n    /**\n     * value: \"CREATED\"\n     * @const\n     */\n    \"CREATED\": \"CREATED\",\n    /**\n     * value: \"WORKING\"\n     * @const\n     */\n    \"WORKING\": \"WORKING\",\n    /**\n     * value: \"KILLING\"\n     * @const\n     */\n    \"KILLING\": \"KILLING\",\n    /**\n     * value: \"EXITED\"\n     * @const\n     */\n    \"EXITED\": \"EXITED\"  };\n\n\n  return exports;\n}));\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/model/ChildProcess.js\n ** module id = 8\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.Credential = factory(root.WebidaRestfulApi.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The Credential model module.\n   * @module model/Credential\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new <code>Credential</code>.\n   * User credential to login. Use https to protect credential. master token can replace actual id/password pair.\n   * @alias module:model/Credential\n   * @class\n   * @param loginId {String} \n   * @param loginPassword {String} \n   */\n  var exports = function(loginId, loginPassword) {\n    var _this = this;\n\n    _this['loginId'] = loginId;\n    _this['loginPassword'] = loginPassword;\n\n  };\n\n  /**\n   * Constructs a <code>Credential</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/Credential} obj Optional instance to populate.\n   * @return {module:model/Credential} The populated <code>Credential</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('loginId')) {\n        obj['loginId'] = ApiClient.convertToType(data['loginId'], 'String');\n      }\n      if (data.hasOwnProperty('loginPassword')) {\n        obj['loginPassword'] = ApiClient.convertToType(data['loginPassword'], 'String');\n      }\n      if (data.hasOwnProperty('masterToken')) {\n        obj['masterToken'] = ApiClient.convertToType(data['masterToken'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {String} loginId\n   */\n  exports.prototype['loginId'] = undefined;\n  /**\n   * @member {String} loginPassword\n   */\n  exports.prototype['loginPassword'] = undefined;\n  /**\n   * A master token is issued when user wants to access webida api without id/password from remote or local desktop app. When masterToken is set, client should put some bogus id/password for login, non-empty. the values can be used to identify client type.\n   * @member {String} masterToken\n   */\n  exports.prototype['masterToken'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/model/Credential.js\n ** module id = 9\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.Execution = factory(root.WebidaRestfulApi.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The Execution model module.\n   * @module model/Execution\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new <code>Execution</code>.\n   * execution request, simlilar to node.js exec()/spawn(). see node.js documentation for  details of each properties. some properties are not configurable for portability  * encoding : fixed to utf-8  * shell : fixed to system defaults. (so, cmd.exe will be invoked in Windows OS, not sh or bash in git-for-windows even they are available.)  * killSignal : fixed to SIGTERM. If process does not die, server can send SIGKILL or invoke taskkill, to ensure chlid process is killed.  * uid &amp; gid : will not be set for security  * stdio : all streams are handled by server. no options are avaliable to client.  * detached : always false \n   * @alias module:model/Execution\n   * @class\n   * @param command {String} The command to run. Server may not support pipe, redirection nor shell variables in command. Client should not assume any specific shell provider in server and should not using the shell features for portability. In windows system with unix sh (e.g. cygwin or mingw from git-for-windows), usually a shell script in PATH may work as command but probably allocates console window while running the command. Implementations (both of server & client) should avoid allocating any  console instances while running services, for costs and UX, and should provide a portable way to invoke commands. Shortly, when a service/product embeds some .sh file to run, it must provide .cmd file doing same thing, always.\n   * @param args {Array.<String>} The arguments array. Server can join this args to command with proper white-space char, when underlying platform api (e.g. child_process#exec() in node.js) does not support additional arguments vector. It's recommended to use args vector than making a long command, to find & see child processes easily with this Rest API. So, args should be always provided, even empty array.  When some arguments has a white space (e.g. C:\\\\Program Files\\\\webida), usually invoking command understands escaping or quotation, but not always. Client should add proper escaping or quotation chars to args vector manually. server should not change any command or arguments. \n   */\n  var exports = function(command, args) {\n    var _this = this;\n\n\n    _this['command'] = command;\n    _this['args'] = args;\n\n\n\n  };\n\n  /**\n   * Constructs a <code>Execution</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/Execution} obj Optional instance to populate.\n   * @return {module:model/Execution} The populated <code>Execution</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'String');\n      }\n      if (data.hasOwnProperty('command')) {\n        obj['command'] = ApiClient.convertToType(data['command'], 'String');\n      }\n      if (data.hasOwnProperty('args')) {\n        obj['args'] = ApiClient.convertToType(data['args'], ['String']);\n      }\n      if (data.hasOwnProperty('cwd')) {\n        obj['cwd'] = ApiClient.convertToType(data['cwd'], 'String');\n      }\n      if (data.hasOwnProperty('timeout')) {\n        obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Integer');\n      }\n      if (data.hasOwnProperty('maxBuffer')) {\n        obj['maxBuffer'] = ApiClient.convertToType(data['maxBuffer'], 'Integer');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * unique identifier of execution, to demux response stream or cancel request. Server should reject an async exec request without id.\n   * @member {String} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * The command to run. Server may not support pipe, redirection nor shell variables in command. Client should not assume any specific shell provider in server and should not using the shell features for portability. In windows system with unix sh (e.g. cygwin or mingw from git-for-windows), usually a shell script in PATH may work as command but probably allocates console window while running the command. Implementations (both of server & client) should avoid allocating any  console instances while running services, for costs and UX, and should provide a portable way to invoke commands. Shortly, when a service/product embeds some .sh file to run, it must provide .cmd file doing same thing, always.\n   * @member {String} command\n   */\n  exports.prototype['command'] = undefined;\n  /**\n   * The arguments array. Server can join this args to command with proper white-space char, when underlying platform api (e.g. child_process#exec() in node.js) does not support additional arguments vector. It's recommended to use args vector than making a long command, to find & see child processes easily with this Rest API. So, args should be always provided, even empty array.  When some arguments has a white space (e.g. C:\\\\Program Files\\\\webida), usually invoking command understands escaping or quotation, but not always. Client should add proper escaping or quotation chars to args vector manually. server should not change any command or arguments. \n   * @member {Array.<String>} args\n   */\n  exports.prototype['args'] = undefined;\n  /**\n   * Current working directory of spawned process, relative to workspace root. If abscent, cwd will be the workspace directory. Does not accept any evaluatable form like $HOME, %USERPROFILE%. path should be unixified. Server may reject an absolute cwd path.\n   * @member {String} cwd\n   */\n  exports.prototype['cwd'] = undefined;\n  /**\n   * The value which In 'miliseconds' the maximum amount of time the child is allowed to run. (not idle time of stdout / stderr stream) for sync exec. Server should not apply default value for async exec, when omitted. The child process spawned by async       execution should be killed when 1) server goes down 2) process exits by self 3) cancel operation is invoked\n   * @member {Integer} timeout\n   */\n  exports.prototype['timeout'] = undefined;\n  /**\n   * Largest amount of data (in bytes) allowed on stdout or stderr for sync exec. Server should not apply this limit to async execution. In sync exec, server may kill a child process that has exceeded limit. default value is 512KB, large enough.\n   * @member {Integer} maxBuffer\n   */\n  exports.prototype['maxBuffer'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/model/Execution.js\n ** module id = 10\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.ExecutionResult = factory(root.WebidaRestfulApi.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The ExecutionResult model module.\n   * @module model/ExecutionResult\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new <code>ExecutionResult</code>.\n   * execution response\n   * @alias module:model/ExecutionResult\n   * @class\n   * @param stdout {String} standard out of child process.\n   * @param stderr {String} standard error of child process.\n   */\n  var exports = function(stdout, stderr) {\n    var _this = this;\n\n\n    _this['stdout'] = stdout;\n    _this['stderr'] = stderr;\n  };\n\n  /**\n   * Constructs a <code>ExecutionResult</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/ExecutionResult} obj Optional instance to populate.\n   * @return {module:model/ExecutionResult} The populated <code>ExecutionResult</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('error')) {\n        obj['error'] = ApiClient.convertToType(data['error'], 'String');\n      }\n      if (data.hasOwnProperty('stdout')) {\n        obj['stdout'] = ApiClient.convertToType(data['stdout'], 'String');\n      }\n      if (data.hasOwnProperty('stderr')) {\n        obj['stderr'] = ApiClient.convertToType(data['stderr'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * error message when execution failed.\n   * @member {String} error\n   */\n  exports.prototype['error'] = undefined;\n  /**\n   * standard out of child process.\n   * @member {String} stdout\n   */\n  exports.prototype['stdout'] = undefined;\n  /**\n   * standard error of child process.\n   * @member {String} stderr\n   */\n  exports.prototype['stderr'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/model/ExecutionResult.js\n ** module id = 11\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.RemoteAccess = factory(root.WebidaRestfulApi.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The RemoteAccess model module.\n   * @module model/RemoteAccess\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new <code>RemoteAccess</code>.\n   * Access information of remote workspace in remote server\n   * @alias module:model/RemoteAccess\n   * @class\n   * @param name {String} display text of remote workspace. can be different from original name.\n   * @param serverUrl {String} the url of remote server. Should have no path/query parameters, even \\\"/\\\" in path.\n   * @param workspaceId {String} the id of remote workspace, read from remote server\n   * @param masterToken {String} master token to access service, issued from remote server\n   */\n  var exports = function(name, serverUrl, workspaceId, masterToken) {\n    var _this = this;\n\n    _this['name'] = name;\n    _this['serverUrl'] = serverUrl;\n    _this['workspaceId'] = workspaceId;\n\n    _this['masterToken'] = masterToken;\n  };\n\n  /**\n   * Constructs a <code>RemoteAccess</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/RemoteAccess} obj Optional instance to populate.\n   * @return {module:model/RemoteAccess} The populated <code>RemoteAccess</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('name')) {\n        obj['name'] = ApiClient.convertToType(data['name'], 'String');\n      }\n      if (data.hasOwnProperty('serverUrl')) {\n        obj['serverUrl'] = ApiClient.convertToType(data['serverUrl'], 'String');\n      }\n      if (data.hasOwnProperty('workspaceId')) {\n        obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');\n      }\n      if (data.hasOwnProperty('workspacePath')) {\n        obj['workspacePath'] = ApiClient.convertToType(data['workspacePath'], 'String');\n      }\n      if (data.hasOwnProperty('masterToken')) {\n        obj['masterToken'] = ApiClient.convertToType(data['masterToken'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * display text of remote workspace. can be different from original name.\n   * @member {String} name\n   */\n  exports.prototype['name'] = undefined;\n  /**\n   * the url of remote server. Should have no path/query parameters, even \\\"/\\\" in path.\n   * @member {String} serverUrl\n   */\n  exports.prototype['serverUrl'] = undefined;\n  /**\n   * the id of remote workspace, read from remote server\n   * @member {String} workspaceId\n   */\n  exports.prototype['workspaceId'] = undefined;\n  /**\n   * Full path of remote workspace, read from remote server. this property will be removed when clients are able to work without \\\"named root directory\\\" in workspace fs tree.\n   * @member {String} workspacePath\n   */\n  exports.prototype['workspacePath'] = undefined;\n  /**\n   * master token to access service, issued from remote server\n   * @member {String} masterToken\n   */\n  exports.prototype['masterToken'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/model/RemoteAccess.js\n ** module id = 12\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.Session = factory(root.WebidaRestfulApi.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The Session model module.\n   * @module model/Session\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new <code>Session</code>.\n   * an application session per ide instance. bound to access token\n   * @alias module:model/Session\n   * @class\n   * @param id {String} the id of a session. usually same to socket id.\n   * @param name {String} human readable name, usually derived from workspace name.\n   * @param state {module:model/Session.StateEnum} NORMAL = connected, normally working LOSING = disconnected, waiting reconnection. still accessible with api CLOSING = socket connection will close connection by server (clinet will be notified)  There\\\"s no \\\"CLOSED\\\" / \\\"LOST\\\" state, for server will remove session object in registry  when the server closes connection or stops waiting for reconnection for timeout. \n   * @param clientAddress {String} the peer address of session connection. not always\n   * @param connectedAt {Date} the time when socket connection is established\n   * @param disconnectedAt {Date} the time when socket is closed.\n   */\n  var exports = function(id, name, state, clientAddress, connectedAt, disconnectedAt) {\n    var _this = this;\n\n    _this['id'] = id;\n    _this['name'] = name;\n    _this['state'] = state;\n\n    _this['clientAddress'] = clientAddress;\n    _this['connectedAt'] = connectedAt;\n    _this['disconnectedAt'] = disconnectedAt;\n\n\n  };\n\n  /**\n   * Constructs a <code>Session</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/Session} obj Optional instance to populate.\n   * @return {module:model/Session} The populated <code>Session</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'String');\n      }\n      if (data.hasOwnProperty('name')) {\n        obj['name'] = ApiClient.convertToType(data['name'], 'String');\n      }\n      if (data.hasOwnProperty('state')) {\n        obj['state'] = ApiClient.convertToType(data['state'], 'String');\n      }\n      if (data.hasOwnProperty('workspaceId')) {\n        obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');\n      }\n      if (data.hasOwnProperty('clientAddress')) {\n        obj['clientAddress'] = ApiClient.convertToType(data['clientAddress'], 'String');\n      }\n      if (data.hasOwnProperty('connectedAt')) {\n        obj['connectedAt'] = ApiClient.convertToType(data['connectedAt'], 'Date');\n      }\n      if (data.hasOwnProperty('disconnectedAt')) {\n        obj['disconnectedAt'] = ApiClient.convertToType(data['disconnectedAt'], 'Date');\n      }\n      if (data.hasOwnProperty('willCloseAt')) {\n        obj['willCloseAt'] = ApiClient.convertToType(data['willCloseAt'], 'Date');\n      }\n      if (data.hasOwnProperty('willLoseAt')) {\n        obj['willLoseAt'] = ApiClient.convertToType(data['willLoseAt'], 'Date');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * the id of a session. usually same to socket id.\n   * @member {String} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * human readable name, usually derived from workspace name.\n   * @member {String} name\n   */\n  exports.prototype['name'] = undefined;\n  /**\n   * NORMAL = connected, normally working LOSING = disconnected, waiting reconnection. still accessible with api CLOSING = socket connection will close connection by server (clinet will be notified)  There\\\"s no \\\"CLOSED\\\" / \\\"LOST\\\" state, for server will remove session object in registry  when the server closes connection or stops waiting for reconnection for timeout. \n   * @member {module:model/Session.StateEnum} state\n   */\n  exports.prototype['state'] = undefined;\n  /**\n   * the id of workspace that this sessions is working on. If falsy, then this session is not belonged to any workpsace. Usually, dashboard / monitoring app will create a session without workspace id.\n   * @member {String} workspaceId\n   */\n  exports.prototype['workspaceId'] = undefined;\n  /**\n   * the peer address of session connection. not always\n   * @member {String} clientAddress\n   */\n  exports.prototype['clientAddress'] = undefined;\n  /**\n   * the time when socket connection is established\n   * @member {Date} connectedAt\n   */\n  exports.prototype['connectedAt'] = undefined;\n  /**\n   * the time when socket is closed.\n   * @member {Date} disconnectedAt\n   */\n  exports.prototype['disconnectedAt'] = undefined;\n  /**\n   * when state becomes CLOSING, actual closing time will be updated by server.\n   * @member {Date} willCloseAt\n   */\n  exports.prototype['willCloseAt'] = undefined;\n  /**\n   * when state becomes LOSING, server will not wait for reconnection after this time.\n   * @member {Date} willLoseAt\n   */\n  exports.prototype['willLoseAt'] = undefined;\n\n\n  /**\n   * Allowed values for the <code>state</code> property.\n   * @enum {String}\n   * @readonly\n   */\n  exports.StateEnum = {\n    /**\n     * value: \"NORMAL\"\n     * @const\n     */\n    \"NORMAL\": \"NORMAL\",\n    /**\n     * value: \"LOSING\"\n     * @const\n     */\n    \"LOSING\": \"LOSING\",\n    /**\n     * value: \"CLOSING\"\n     * @const\n     */\n    \"CLOSING\": \"CLOSING\"  };\n\n\n  return exports;\n}));\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/model/Session.js\n ** module id = 13\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.Token = factory(root.WebidaRestfulApi.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The Token model module.\n   * @module model/Token\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new <code>Token</code>.\n   * a json webtoken and accessible data\n   * @alias module:model/Token\n   * @class\n   * @param text {String} actual token text that should be shipped in header or query\n   * @param tokenType {module:model/Token.TokenTypeEnum} MASTER : used to create an access token from clients, without login credential ACCESS : protects api access. should be unique for each ide session  Note that here\\\"s no REFRESH token, nor LOGIN token. The login api will create unrestricted access token & master token pair. Desktop app has a side-way to create an unrestricted master token before starting IDE instances. \n   * @param expiresAt {Date} \n   * @param issuedAt {Date} \n   */\n  var exports = function(text, tokenType, expiresAt, issuedAt) {\n    var _this = this;\n\n    _this['text'] = text;\n    _this['tokenType'] = tokenType;\n    _this['expiresAt'] = expiresAt;\n    _this['issuedAt'] = issuedAt;\n\n\n  };\n\n  /**\n   * Constructs a <code>Token</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/Token} obj Optional instance to populate.\n   * @return {module:model/Token} The populated <code>Token</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('text')) {\n        obj['text'] = ApiClient.convertToType(data['text'], 'String');\n      }\n      if (data.hasOwnProperty('tokenType')) {\n        obj['tokenType'] = ApiClient.convertToType(data['tokenType'], 'String');\n      }\n      if (data.hasOwnProperty('expiresAt')) {\n        obj['expiresAt'] = ApiClient.convertToType(data['expiresAt'], 'Date');\n      }\n      if (data.hasOwnProperty('issuedAt')) {\n        obj['issuedAt'] = ApiClient.convertToType(data['issuedAt'], 'Date');\n      }\n      if (data.hasOwnProperty('sessionId')) {\n        obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');\n      }\n      if (data.hasOwnProperty('workspaceId')) {\n        obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * actual token text that should be shipped in header or query\n   * @member {String} text\n   */\n  exports.prototype['text'] = undefined;\n  /**\n   * MASTER : used to create an access token from clients, without login credential ACCESS : protects api access. should be unique for each ide session  Note that here\\\"s no REFRESH token, nor LOGIN token. The login api will create unrestricted access token & master token pair. Desktop app has a side-way to create an unrestricted master token before starting IDE instances. \n   * @member {module:model/Token.TokenTypeEnum} tokenType\n   */\n  exports.prototype['tokenType'] = undefined;\n  /**\n   * @member {Date} expiresAt\n   */\n  exports.prototype['expiresAt'] = undefined;\n  /**\n   * @member {Date} issuedAt\n   */\n  exports.prototype['issuedAt'] = undefined;\n  /**\n   * mandatory for ACCESS token, identifying client instance\n   * @member {String} sessionId\n   */\n  exports.prototype['sessionId'] = undefined;\n  /**\n   * If truthy, access rights are restricted to specified workspace only.\n   * @member {String} workspaceId\n   */\n  exports.prototype['workspaceId'] = undefined;\n\n\n  /**\n   * Allowed values for the <code>tokenType</code> property.\n   * @enum {String}\n   * @readonly\n   */\n  exports.TokenTypeEnum = {\n    /**\n     * value: \"MASTER\"\n     * @const\n     */\n    \"MASTER\": \"MASTER\",\n    /**\n     * value: \"ACCESS\"\n     * @const\n     */\n    \"ACCESS\": \"ACCESS\"  };\n\n\n  return exports;\n}));\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/model/Token.js\n ** module id = 14\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.User = factory(root.WebidaRestfulApi.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The User model module.\n   * @module model/User\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new <code>User</code>.\n   * Any services/products should define some admin apis to manage users in the system and expose what should be exposed to client app. So, no properties are mandatory. Currently, the properties are defined for compatiblity with legacy clients.\n   * @alias module:model/User\n   * @class\n   */\n  var exports = function() {\n    var _this = this;\n\n\n\n\n  };\n\n  /**\n   * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/User} obj Optional instance to populate.\n   * @return {module:model/User} The populated <code>User</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'String');\n      }\n      if (data.hasOwnProperty('email')) {\n        obj['email'] = ApiClient.convertToType(data['email'], 'String');\n      }\n      if (data.hasOwnProperty('name')) {\n        obj['name'] = ApiClient.convertToType(data['name'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * unique id per user (email is also unique)\n   * @member {String} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * @member {String} email\n   */\n  exports.prototype['email'] = undefined;\n  /**\n   * @member {String} name\n   */\n  exports.prototype['name'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/model/User.js\n ** module id = 15\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.Workspace = factory(root.WebidaRestfulApi.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The Workspace model module.\n   * @module model/Workspace\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new <code>Workspace</code>.\n   * A workspace in server\n   * @alias module:model/Workspace\n   * @class\n   * @param id {String} the id of a workspace. usually same to file system id\n   * @param name {String} display text of this workspace for UI\n   * @param description {String} human readable description on this workspace\n   * @param createdAt {Date} the time when this workspace is created (registered from local file system)\n   * @param workspacePath {String} absolute path of this workspace in server. server may not expose this property to some untrusted clients.\n   * @param excludedPaths {Array.<String>} Ignore patterns to exclude from watch service and search-and-replace operations.  Pattern follows '.gitignore' syntax, 1 item per line. It should work as a .gitignore file in the workspace directory. Server should remove all comment items (any item that begins with '#') and blank items. Escaping with '\\\\' char for the beginning '!' and          ending white-spaces shoule be supported, too.  To exclude a directory, client may have to put '/' at the end of the item to exclude everything underneath it. When a dir path is excluded with 'ending /', watch service  may not deliver unlinkDir/addDir events for the path and client should manually check the existence or stats. \n   * @param offlineCachePaths {Array.<String>} Any paths (including excluded paths) to be cached in remote clients.  Browser client should respect offline cache paths always. Desktop-app client may not use off-line cache for local (embedded) server but shall use cache for any remote servers, even for same host. All caches should be partitioned with workspace id, globally unique value through time and space.  Client should pre-fetch the contents of offline cache paths when it start IDE sessions on a workspace to use for off-line state. When client goes to off-line, after losing connection to server, it can use cached data as reply of some WFS operations and can write some data to cache to save workspace data & metadata. The changes should be persistent on client side safely. C  When a client recovers connectivity to server, it should check the stats of files and  dirs to upload if it has got some changes in offline state. If server has more recents contents, client should drop chagnes and refill the cache with fresher data. Client may have some 'time-tolerance' to accept server's data is fresher than client's, smaller than serveral seconds. If server has more recent contents, client should drop the changes and refill the cache with fresher data. If not, client should replay the changes 1 by 1.  Same protocol should be applied when client application starts with some 'unuploaded change' evertime. That means, client should save 'change history' with 'changed data' too, to process it later, when starting app again in normal condition.  All Clients should not replay any 'delete' operations while replaying changes on client's cache, to protect from more serious problems with skewed timer or unexpected behaviors. And, of course, client should not rely on cached data while connection state is healthy. \n   */\n  var exports = function(id, name, description, createdAt, workspacePath, excludedPaths, offlineCachePaths) {\n    var _this = this;\n\n    _this['id'] = id;\n    _this['name'] = name;\n    _this['description'] = description;\n    _this['createdAt'] = createdAt;\n\n    _this['workspacePath'] = workspacePath;\n\n    _this['excludedPaths'] = excludedPaths;\n    _this['offlineCachePaths'] = offlineCachePaths;\n  };\n\n  /**\n   * Constructs a <code>Workspace</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/Workspace} obj Optional instance to populate.\n   * @return {module:model/Workspace} The populated <code>Workspace</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('id')) {\n        obj['id'] = ApiClient.convertToType(data['id'], 'String');\n      }\n      if (data.hasOwnProperty('name')) {\n        obj['name'] = ApiClient.convertToType(data['name'], 'String');\n      }\n      if (data.hasOwnProperty('description')) {\n        obj['description'] = ApiClient.convertToType(data['description'], 'String');\n      }\n      if (data.hasOwnProperty('createdAt')) {\n        obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');\n      }\n      if (data.hasOwnProperty('accessedAt')) {\n        obj['accessedAt'] = ApiClient.convertToType(data['accessedAt'], 'Date');\n      }\n      if (data.hasOwnProperty('workspacePath')) {\n        obj['workspacePath'] = ApiClient.convertToType(data['workspacePath'], 'String');\n      }\n      if (data.hasOwnProperty('disposable')) {\n        obj['disposable'] = ApiClient.convertToType(data['disposable'], 'Boolean');\n      }\n      if (data.hasOwnProperty('excludedPaths')) {\n        obj['excludedPaths'] = ApiClient.convertToType(data['excludedPaths'], ['String']);\n      }\n      if (data.hasOwnProperty('offlineCachePaths')) {\n        obj['offlineCachePaths'] = ApiClient.convertToType(data['offlineCachePaths'], ['String']);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * the id of a workspace. usually same to file system id\n   * @member {String} id\n   */\n  exports.prototype['id'] = undefined;\n  /**\n   * display text of this workspace for UI\n   * @member {String} name\n   */\n  exports.prototype['name'] = undefined;\n  /**\n   * human readable description on this workspace\n   * @member {String} description\n   */\n  exports.prototype['description'] = undefined;\n  /**\n   * the time when this workspace is created (registered from local file system)\n   * @member {Date} createdAt\n   */\n  exports.prototype['createdAt'] = undefined;\n  /**\n   * the time when the last session on this workspace was made. (optional)\n   * @member {Date} accessedAt\n   */\n  exports.prototype['accessedAt'] = undefined;\n  /**\n   * absolute path of this workspace in server. server may not expose this property to some untrusted clients.\n   * @member {String} workspacePath\n   */\n  exports.prototype['workspacePath'] = undefined;\n  /**\n   * If set, workspace is ephemeral - server will not keep persistence when it stops working. Ususally, side-loaded workspace via desktop app is disposable. Client with proper access right can flip this flag to declare the workspace should be persist. \n   * @member {Boolean} disposable\n   */\n  exports.prototype['disposable'] = undefined;\n  /**\n   * Ignore patterns to exclude from watch service and search-and-replace operations.  Pattern follows '.gitignore' syntax, 1 item per line. It should work as a .gitignore file in the workspace directory. Server should remove all comment items (any item that begins with '#') and blank items. Escaping with '\\\\' char for the beginning '!' and          ending white-spaces shoule be supported, too.  To exclude a directory, client may have to put '/' at the end of the item to exclude everything underneath it. When a dir path is excluded with 'ending /', watch service  may not deliver unlinkDir/addDir events for the path and client should manually check the existence or stats. \n   * @member {Array.<String>} excludedPaths\n   */\n  exports.prototype['excludedPaths'] = undefined;\n  /**\n   * Any paths (including excluded paths) to be cached in remote clients.  Browser client should respect offline cache paths always. Desktop-app client may not use off-line cache for local (embedded) server but shall use cache for any remote servers, even for same host. All caches should be partitioned with workspace id, globally unique value through time and space.  Client should pre-fetch the contents of offline cache paths when it start IDE sessions on a workspace to use for off-line state. When client goes to off-line, after losing connection to server, it can use cached data as reply of some WFS operations and can write some data to cache to save workspace data & metadata. The changes should be persistent on client side safely. C  When a client recovers connectivity to server, it should check the stats of files and  dirs to upload if it has got some changes in offline state. If server has more recents contents, client should drop chagnes and refill the cache with fresher data. Client may have some 'time-tolerance' to accept server's data is fresher than client's, smaller than serveral seconds. If server has more recent contents, client should drop the changes and refill the cache with fresher data. If not, client should replay the changes 1 by 1.  Same protocol should be applied when client application starts with some 'unuploaded change' evertime. That means, client should save 'change history' with 'changed data' too, to process it later, when starting app again in normal condition.  All Clients should not replay any 'delete' operations while replaying changes on client's cache, to protect from more serious problems with skewed timer or unexpected behaviors. And, of course, client should not rely on cached data while connection state is healthy. \n   * @member {Array.<String>} offlineCachePaths\n   */\n  exports.prototype['offlineCachePaths'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/model/Workspace.js\n ** module id = 16\n ** module chunks = 0\n **/","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.superagent = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(obj) {\n  return null !== obj && 'object' === typeof obj;\n}\n\nmodule.exports = isObject;\n\n},{}],2:[function(require,module,exports){\n/**\n * Module of mixed-in functions shared between node and client code\n */\nvar isObject = require('./is-object');\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nexports.clearTimeout = function _clearTimeout(){\n  this._timeout = 0;\n  clearTimeout(this._timer);\n  return this;\n};\n\n/**\n * Override default response body parser\n *\n * This function will be called to convert incoming data into request.body\n *\n * @param {Function}\n * @api public\n */\n\nexports.parse = function parse(fn){\n  this._parser = fn;\n  return this;\n};\n\n/**\n * Override default request body serializer\n *\n * This function will be called to convert data set via .send or .attach into payload to send\n *\n * @param {Function}\n * @api public\n */\n\nexports.serialize = function serialize(fn){\n  this._serializer = fn;\n  return this;\n};\n\n/**\n * Set timeout to `ms`.\n *\n * @param {Number} ms\n * @return {Request} for chaining\n * @api public\n */\n\nexports.timeout = function timeout(ms){\n  this._timeout = ms;\n  return this;\n};\n\n/**\n * Promise support\n *\n * @param {Function} resolve\n * @param {Function} reject\n * @return {Request}\n */\n\nexports.then = function then(resolve, reject) {\n  if (!this._fullfilledPromise) {\n    var self = this;\n    this._fullfilledPromise = new Promise(function(innerResolve, innerReject){\n      self.end(function(err, res){\n        if (err) innerReject(err); else innerResolve(res);\n      });\n    });\n  }\n  return this._fullfilledPromise.then(resolve, reject);\n}\n\n/**\n * Allow for extension\n */\n\nexports.use = function use(fn) {\n  fn(this);\n  return this;\n}\n\n\n/**\n * Get request header `field`.\n * Case-insensitive.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nexports.get = function(field){\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Get case-insensitive header `field` value.\n * This is a deprecated internal API. Use `.get(field)` instead.\n *\n * (getHeader is no longer used internally by the superagent code base)\n *\n * @param {String} field\n * @return {String}\n * @api private\n * @deprecated\n */\n\nexports.getHeader = exports.get;\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n * Case-insensitive.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nexports.set = function(field, val){\n  if (isObject(field)) {\n    for (var key in field) {\n      this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = val;\n  this.header[field] = val;\n  return this;\n};\n\n/**\n * Remove header `field`.\n * Case-insensitive.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field\n */\nexports.unset = function(field){\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Write the field `name` and `val` for \"multipart/form-data\"\n * request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n * ```\n *\n * @param {String} name\n * @param {String|Blob|File|Buffer|fs.ReadStream} val\n * @return {Request} for chaining\n * @api public\n */\nexports.field = function(name, val) {\n  this._getFormData().append(name, val);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\nexports.abort = function(){\n  if (this._aborted) {\n    return this;\n  }\n  this._aborted = true;\n  this.xhr && this.xhr.abort(); // browser\n  this.req && this.req.abort(); // node\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nexports.withCredentials = function(){\n  // This is browser-only functionality. Node side is no-op.\n  this._withCredentials = true;\n  return this;\n};\n\n/**\n * Set the max redirects to `n`. Does noting in browser XHR implementation.\n *\n * @param {Number} n\n * @return {Request} for chaining\n * @api public\n */\n\nexports.redirects = function(n){\n  this._maxRedirects = n;\n  return this;\n};\n\n/**\n * Convert to a plain javascript object (not JSON string) of scalar properties.\n * Note as this method is designed to return a useful non-this value,\n * it cannot be chained.\n *\n * @return {Object} describing method, url, and data of this request\n * @api public\n */\n\nexports.toJSON = function(){\n  return {\n    method: this.method,\n    url: this.url,\n    data: this._data\n  };\n};\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * TODO: future proof, move to compoent land\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nexports._isHost = function _isHost(obj) {\n  var str = {}.toString.call(obj);\n\n  switch (str) {\n    case '[object File]':\n    case '[object Blob]':\n    case '[object FormData]':\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n *      request.post('/user')\n *        .send('name=tobi')\n *        .send('species=ferret')\n *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\nexports.send = function(data){\n  var obj = isObject(data);\n  var type = this._header['content-type'];\n\n  // merge\n  if (obj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    // default to x-www-form-urlencoded\n    if (!type) this.type('form');\n    type = this._header['content-type'];\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data\n        ? this._data + '&' + data\n        : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!obj || this._isHost(data)) return this;\n\n  // default to json\n  if (!type) this.type('json');\n  return this;\n};\n\n},{\"./is-object\":1}],3:[function(require,module,exports){\n// The node and browser modules expose versions of this with the\n// appropriate constructor function bound as first argument\n/**\n * Issue a request:\n *\n * Examples:\n *\n *    request('GET', '/users').end(callback)\n *    request('/users').end(callback)\n *    request('/users', callback)\n *\n * @param {String} method\n * @param {String|Function} url or callback\n * @return {Request}\n * @api public\n */\n\nfunction request(RequestConstructor, method, url) {\n  // callback\n  if ('function' == typeof url) {\n    return new RequestConstructor('GET', method).end(url);\n  }\n\n  // url first\n  if (2 == arguments.length) {\n    return new RequestConstructor('GET', method);\n  }\n\n  return new RequestConstructor(method, url);\n}\n\nmodule.exports = request;\n\n},{}],4:[function(require,module,exports){\n\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (typeof module !== 'undefined') {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  var args = [].slice.call(arguments, 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n\n},{}],5:[function(require,module,exports){\n\n/**\n * Reduce `arr` with `fn`.\n *\n * @param {Array} arr\n * @param {Function} fn\n * @param {Mixed} initial\n *\n * TODO: combatible error handling?\n */\n\nmodule.exports = function(arr, fn, initial){  \n  var idx = 0;\n  var len = arr.length;\n  var curr = arguments.length == 3\n    ? initial\n    : arr[idx++];\n\n  while (idx < len) {\n    curr = fn.call(null, curr, arr[idx], ++idx, arr);\n  }\n  \n  return curr;\n};\n},{}],6:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Emitter = require('emitter');\nvar reduce = require('reduce');\nvar requestBase = require('./request-base');\nvar isObject = require('./is-object');\n\n/**\n * Root reference for iframes.\n */\n\nvar root;\nif (typeof window !== 'undefined') { // Browser window\n  root = window;\n} else if (typeof self !== 'undefined') { // Web Worker\n  root = self;\n} else { // Other environments\n  root = this;\n}\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Expose `request`.\n */\n\nvar request = module.exports = require('./request').bind(null, Request);\n\n/**\n * Determine XHR.\n */\n\nrequest.getXHR = function () {\n  if (root.XMLHttpRequest\n      && (!root.location || 'file:' != root.location.protocol\n          || !root.ActiveXObject)) {\n    return new XMLHttpRequest;\n  } else {\n    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n  }\n  return false;\n};\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nvar trim = ''.trim\n  ? function(s) { return s.trim(); }\n  : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n  for (var key in obj) {\n    if (null != obj[key]) {\n      pushEncodedKeyValuePair(pairs, key, obj[key]);\n    }\n  }\n  return pairs.join('&');\n}\n\n/**\n * Helps 'serialize' with serializing arrays.\n * Mutates the pairs array.\n *\n * @param {Array} pairs\n * @param {String} key\n * @param {Mixed} val\n */\n\nfunction pushEncodedKeyValuePair(pairs, key, val) {\n  if (Array.isArray(val)) {\n    return val.forEach(function(v) {\n      pushEncodedKeyValuePair(pairs, key, v);\n    });\n  } else if (isObject(val)) {\n    for(var subkey in val) {\n      pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);\n    }\n    return;\n  }\n  pairs.push(encodeURIComponent(key)\n    + '=' + encodeURIComponent(val));\n}\n\n/**\n * Expose serialization method.\n */\n\n request.serializeObject = serialize;\n\n /**\n  * Parse the given x-www-form-urlencoded `str`.\n  *\n  * @param {String} str\n  * @return {Object}\n  * @api private\n  */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var pair;\n  var pos;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    pos = pair.indexOf('=');\n    if (pos == -1) {\n      obj[decodeURIComponent(pair)] = '';\n    } else {\n      obj[decodeURIComponent(pair.slice(0, pos))] =\n        decodeURIComponent(pair.slice(pos + 1));\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'application/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\n request.serialize = {\n   'application/x-www-form-urlencoded': serialize,\n   'application/json': JSON.stringify\n };\n\n /**\n  * Default parsers.\n  *\n  *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n  *\n  */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n\n  lines.pop(); // trailing CRLF\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n\n/**\n * Check if `mime` is json or has +json structured syntax suffix.\n *\n * @param {String} mime\n * @return {Boolean}\n * @api private\n */\n\nfunction isJSON(mime) {\n  return /[\\/+]json\\b/.test(mime);\n}\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nfunction type(str){\n  return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction params(str){\n  return reduce(str.split(/ *; */), function(obj, str){\n    var parts = str.split(/ *= */)\n      , key = parts.shift()\n      , val = parts.shift();\n\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req, options) {\n  options = options || {};\n  this.req = req;\n  this.xhr = this.req.xhr;\n  // responseText is accessible only if responseType is '' or 'text' and on older browsers\n  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')\n     ? this.xhr.responseText\n     : null;\n  this.statusText = this.req.xhr.statusText;\n  this._setStatusProperties(this.xhr.status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this._setHeaderProperties(this.header);\n  this.body = this.req.method != 'HEAD'\n    ? this._parseBody(this.text ? this.text : this.xhr.response)\n    : null;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponse.prototype.get = function(field){\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponse.prototype._setHeaderProperties = function(header){\n  // content-type\n  var ct = this.header['content-type'] || '';\n  this.type = type(ct);\n\n  // params\n  var obj = params(ct);\n  for (var key in obj) this[key] = obj[key];\n};\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype._parseBody = function(str){\n  var parse = request.parse[this.type];\n  if (!parse && isJSON(this.type)) {\n    parse = request.parse['application/json'];\n  }\n  return parse && str && (str.length || str instanceof Object)\n    ? parse(str)\n    : null;\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponse.prototype._setStatusProperties = function(status){\n  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n  if (status === 1223) {\n    status = 204;\n  }\n\n  var type = status / 100 | 0;\n\n  // status / class\n  this.status = this.statusCode = status;\n  this.statusType = type;\n\n  // basics\n  this.info = 1 == type;\n  this.ok = 2 == type;\n  this.clientError = 4 == type;\n  this.serverError = 5 == type;\n  this.error = (4 == type || 5 == type)\n    ? this.toError()\n    : false;\n\n  // sugar\n  this.accepted = 202 == status;\n  this.noContent = 204 == status;\n  this.badRequest = 400 == status;\n  this.unauthorized = 401 == status;\n  this.notAcceptable = 406 == status;\n  this.notFound = 404 == status;\n  this.forbidden = 403 == status;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function(){\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n\n  return err;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {}; // preserves header name case\n  this._header = {}; // coerces header names to lowercase\n  this.on('end', function(){\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self);\n    } catch(e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e;\n      // issue #675: return the raw response if the response parsing fails\n      err.rawResponse = self.xhr && self.xhr.responseText ? self.xhr.responseText : null;\n      // issue #876: return the http status code if the response parsing fails\n      err.statusCode = self.xhr && self.xhr.status ? self.xhr.status : null;\n      return self.callback(err);\n    }\n\n    self.emit('response', res);\n\n    if (err) {\n      return self.callback(err, res);\n    }\n\n    try {\n      if (res.status >= 200 && res.status < 300) {\n        return self.callback(err, res);\n      }\n\n      var new_err = new Error(res.statusText || 'Unsuccessful HTTP response');\n      new_err.original = err;\n      new_err.response = res;\n      new_err.status = res.status;\n\n      self.callback(new_err, res);\n    } catch(e) {\n      self.callback(e); // #985 touching res may cause INVALID_STATE_ERR on old Android\n    }\n  });\n}\n\n/**\n * Mixin `Emitter` and `requestBase`.\n */\n\nEmitter(Request.prototype);\nfor (var key in requestBase) {\n  Request.prototype[key] = requestBase[key];\n}\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type){\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set responseType to `val`. Presently valid responseTypes are 'blob' and\n * 'arraybuffer'.\n *\n * Examples:\n *\n *      req.get('/')\n *        .responseType('blob')\n *        .end(callback);\n *\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.responseType = function(val){\n  this._responseType = val;\n  return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} pass\n * @param {Object} options with 'type' property 'auto' or 'basic' (default 'basic')\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass, options){\n  if (!options) {\n    options = {\n      type: 'basic'\n    }\n  }\n\n  switch (options.type) {\n    case 'basic':\n      var str = btoa(user + ':' + pass);\n      this.set('Authorization', 'Basic ' + str);\n    break;\n\n    case 'auto':\n      this.username = user;\n      this.password = pass;\n    break;\n  }\n  return this;\n};\n\n/**\n* Add query-string `val`.\n*\n* Examples:\n*\n*   request.get('/shoes')\n*     .query('size=10')\n*     .query({ color: 'blue' })\n*\n* @param {Object|String} val\n* @return {Request} for chaining\n* @api public\n*/\n\nRequest.prototype.query = function(val){\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `filename`.\n *\n * ``` js\n * request.post('/upload')\n *   .attach('content', new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String} filename\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, filename){\n  this._getFormData().append(field, file, filename || file.name);\n  return this;\n};\n\nRequest.prototype._getFormData = function(){\n  if (!this._formData) {\n    this._formData = new root.FormData();\n  }\n  return this._formData;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n  var fn = this._callback;\n  this.clearTimeout();\n  fn(err, res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function(){\n  var err = new Error('Request has been terminated\\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');\n  err.crossDomain = true;\n\n  err.status = this.status;\n  err.method = this.method;\n  err.url = this.url;\n\n  this.callback(err);\n};\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequest.prototype._timeoutError = function(){\n  var timeout = this._timeout;\n  var err = new Error('timeout of ' + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  this.callback(err);\n};\n\n/**\n * Compose querystring to append to req.url\n *\n * @api private\n */\n\nRequest.prototype._appendQueryString = function(){\n  var query = this._query.join('&');\n  if (query) {\n    this.url += ~this.url.indexOf('?')\n      ? '&' + query\n      : '?' + query;\n  }\n};\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function(fn){\n  var self = this;\n  var xhr = this.xhr = request.getXHR();\n  var timeout = this._timeout;\n  var data = this._formData || this._data;\n\n  // store callback\n  this._callback = fn || noop;\n\n  // state change\n  xhr.onreadystatechange = function(){\n    if (4 != xhr.readyState) return;\n\n    // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n    // result in the error \"Could not complete the operation due to error c00c023f\"\n    var status;\n    try { status = xhr.status } catch(e) { status = 0; }\n\n    if (0 == status) {\n      if (self.timedout) return self._timeoutError();\n      if (self._aborted) return;\n      return self.crossDomainError();\n    }\n    self.emit('end');\n  };\n\n  // progress\n  var handleProgress = function(e){\n    if (e.total > 0) {\n      e.percent = e.loaded / e.total * 100;\n    }\n    e.direction = 'download';\n    self.emit('progress', e);\n  };\n  if (this.hasListeners('progress')) {\n    xhr.onprogress = handleProgress;\n  }\n  try {\n    if (xhr.upload && this.hasListeners('progress')) {\n      xhr.upload.onprogress = handleProgress;\n    }\n  } catch(e) {\n    // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n    // Reported here:\n    // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n  }\n\n  // timeout\n  if (timeout && !this._timer) {\n    this._timer = setTimeout(function(){\n      self.timedout = true;\n      self.abort();\n    }, timeout);\n  }\n\n  // querystring\n  this._appendQueryString();\n\n  // initiate request\n  if (this.username && this.password) {\n    xhr.open(this.method, this.url, true, this.username, this.password);\n  } else {\n    xhr.open(this.method, this.url, true);\n  }\n\n  // CORS\n  if (this._withCredentials) xhr.withCredentials = true;\n\n  // body\n  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {\n    // serialize stuff\n    var contentType = this._header['content-type'];\n    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];\n    if (!serialize && isJSON(contentType)) serialize = request.serialize['application/json'];\n    if (serialize) data = serialize(data);\n  }\n\n  // set header fields\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n    xhr.setRequestHeader(field, this.header[field]);\n  }\n\n  if (this._responseType) {\n    xhr.responseType = this._responseType;\n  }\n\n  // send stuff\n  this.emit('request', this);\n\n  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)\n  // We need null here if data is undefined\n  xhr.send(typeof data !== 'undefined' ? data : null);\n  return this;\n};\n\n\n/**\n * Expose `Request`.\n */\n\nrequest.Request = Request;\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.get = function(url, data, fn){\n  var req = request('GET', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.head = function(url, data, fn){\n  var req = request('HEAD', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * OPTIONS query to `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.options = function(url, data, fn){\n  var req = request('OPTIONS', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * DELETE `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nfunction del(url, fn){\n  var req = request('DELETE', url);\n  if (fn) req.end(fn);\n  return req;\n};\n\nrequest['del'] = del;\nrequest['delete'] = del;\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function(url, data, fn){\n  var req = request('PATCH', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.post = function(url, data, fn){\n  var req = request('POST', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.put = function(url, data, fn){\n  var req = request('PUT', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n},{\"./is-object\":1,\"./request\":3,\"./request-base\":2,\"emitter\":4,\"reduce\":5}]},{},[6])(6)\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/superagent/superagent.js\n ** module id = 17\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/Alias', 'model/RestError', 'model/RestOK'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/Alias'), require('../model/RestError'), require('../model/RestOK'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.AliasApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.Alias, root.WebidaRestfulApi.RestError, root.WebidaRestfulApi.RestOK);\n  }\n}(this, function(ApiClient, Alias, RestError, RestOK) {\n  'use strict';\n\n  /**\n   * Alias service.\n   * @module api/AliasApi\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new AliasApi. \n   * @alias module:api/AliasApi\n   * @class\n   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n    /**\n     * Callback function to receive the result of the findAliases operation.\n     * @callback module:api/AliasApi~findAliasesCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/Alias>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * get alias objects. set aliasId to &#39;*&#39; to find all aliases in some workspace. if alias id is given, only 0 or 1 matched alias object will be returned.\n     * @param {String} aliasId url path fragment alias id. should have no &#39;/&#39; as well as any &#39;unsafe&#39; chars for url path.  especially, &#39;*&#39; is reserved for finding operations or some other special case.\n     * @param {String} workspaceId webida workspace id in query part\n     * @param {module:api/AliasApi~findAliasesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {Array.<module:model/Alias>}\n     */\n    this.findAliases = function(aliasId, workspaceId, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'aliasId' is set\n      if (aliasId == undefined || aliasId == null) {\n        throw \"Missing the required parameter 'aliasId' when calling findAliases\";\n      }\n\n      // verify the required parameter 'workspaceId' is set\n      if (workspaceId == undefined || workspaceId == null) {\n        throw \"Missing the required parameter 'workspaceId' when calling findAliases\";\n      }\n\n\n      var pathParams = {\n        'aliasId': aliasId\n      };\n      var queryParams = {\n        'workspaceId': workspaceId\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = [Alias];\n\n      return this.apiClient.callApi(\n        '/aliass/{aliasId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the putAlias operation.\n     * @callback module:api/AliasApi~putAliasCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/RestOK} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * create, or update an alias.\n     * @param {String} aliasId url path fragment alias id. should have no &#39;/&#39; as well as any &#39;unsafe&#39; chars for url path.  especially, &#39;*&#39; is reserved for finding operations or some other special case.\n     * @param {module:model/Alias} body alias object to write. should have same id to aliasId parameter.\n     * @param {module:api/AliasApi~putAliasCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/RestOK}\n     */\n    this.putAlias = function(aliasId, body, callback) {\n      var postBody = body;\n\n      // verify the required parameter 'aliasId' is set\n      if (aliasId == undefined || aliasId == null) {\n        throw \"Missing the required parameter 'aliasId' when calling putAlias\";\n      }\n\n      // verify the required parameter 'body' is set\n      if (body == undefined || body == null) {\n        throw \"Missing the required parameter 'body' when calling putAlias\";\n      }\n\n\n      var pathParams = {\n        'aliasId': aliasId\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = RestOK;\n\n      return this.apiClient.callApi(\n        '/aliass/{aliasId}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the removeAliases operation.\n     * @callback module:api/AliasApi~removeAliasesCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/RestOK} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * remove alias. targeting rule is same to findAliases() operation.\n     * @param {String} aliasId url path fragment alias id. should have no &#39;/&#39; as well as any &#39;unsafe&#39; chars for url path.  especially, &#39;*&#39; is reserved for finding operations or some other special case.\n     * @param {String} workspaceId webida workspace id in query part\n     * @param {module:api/AliasApi~removeAliasesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/RestOK}\n     */\n    this.removeAliases = function(aliasId, workspaceId, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'aliasId' is set\n      if (aliasId == undefined || aliasId == null) {\n        throw \"Missing the required parameter 'aliasId' when calling removeAliases\";\n      }\n\n      // verify the required parameter 'workspaceId' is set\n      if (workspaceId == undefined || workspaceId == null) {\n        throw \"Missing the required parameter 'workspaceId' when calling removeAliases\";\n      }\n\n\n      var pathParams = {\n        'aliasId': aliasId\n      };\n      var queryParams = {\n        'workspaceId': workspaceId\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = RestOK;\n\n      return this.apiClient.callApi(\n        '/aliass/{aliasId}', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n  };\n\n  return exports;\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/api/AliasApi.js\n ** module id = 18\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/User', 'model/RestError', 'model/Token', 'model/Credential'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/User'), require('../model/RestError'), require('../model/Token'), require('../model/Credential'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.AuthApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.User, root.WebidaRestfulApi.RestError, root.WebidaRestfulApi.Token, root.WebidaRestfulApi.Credential);\n  }\n}(this, function(ApiClient, User, RestError, Token, Credential) {\n  'use strict';\n\n  /**\n   * Auth service.\n   * @module api/AuthApi\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new AuthApi. \n   * @alias module:api/AuthApi\n   * @class\n   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n    /**\n     * Callback function to receive the result of the getInfo operation.\n     * @callback module:api/AuthApi~getInfoCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/User} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Gets user information of that can be identified with current access token. Implementations should provide a more restful api based on domain data model, not extending this operation. (e.g. GET,PUT and DELETE on /Users/{userId} to read, update and delete user) \n     * @param {module:api/AuthApi~getInfoCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/User}\n     */\n    this.getInfo = function(callback) {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = User;\n\n      return this.apiClient.callApi(\n        '/auth/info', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the issueToken operation.\n     * @callback module:api/AuthApi~issueTokenCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/Token} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Creates new token from current access token, inheriting workspace id &amp; session id. The duration of generated token is (and should not be) parameterizable. Server should set proper duration, respecting \\&quot;reconnect\\&quot; period of socket.io clients. Remember that most of socket.io client implementations (including official js client) do not provide any ways to change connection parameters (header or query) while reconnecting to server.  Like login API, this endpoint does not provide any encryption. Server should not set any data to harm security in the token &amp; should provide some signinig/encryption mechanism to protect token. Simple JSON Web Token with HMAC-SHA will do. \n     * @param {module:model/String} type \n     * @param {Object} opts Optional parameters\n     * @param {String} opts.workspaceId Clients to save some remote access info should issue a MASTER type token restricted to specific workspace id.\n     * @param {module:api/AuthApi~issueTokenCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/Token}\n     */\n    this.issueToken = function(type, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'type' is set\n      if (type == undefined || type == null) {\n        throw \"Missing the required parameter 'type' when calling issueToken\";\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'type': type,\n        'workspaceId': opts['workspaceId']\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = Token;\n\n      return this.apiClient.callApi(\n        '/auth/token', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the login operation.\n     * @callback module:api/AuthApi~loginCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/Token} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * A \\&quot;VERY\\&quot; basic authentication, required to use webida-simple-auth security scheme.  Service / Product implementations who need better security, should override this operation or add their own login api or some other specs like OAuth2. Simple auth is not suitable for large-sacle, multi-tennant service, for the scheme assumes a single, trusted user only.  Logging-in with master token, the generated access token inherits all restriction from it. On the other hand, normal log-in with login id &amp; password creates an unrestricted access token, with reasonably short expiration time.  Every client should spawn another access token with issueToken API before current access token expires, inheriting session id from current token. To save remote access info, client should create a (restricted but long-ttl) master token to start IDE from remote. The remote client should not use the unrestricted acccess token from login to use any other perpose than finding available workspaces, and should not refresh the token. (Let user log-in again)  Login API does not force any encryption. Server should provide secure transport channel, usually https, to provide remote access, always. \n     * @param {module:model/Credential} body \n     * @param {module:api/AuthApi~loginCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/Token}\n     */\n    this.login = function(body, callback) {\n      var postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body == undefined || body == null) {\n        throw \"Missing the required parameter 'body' when calling login\";\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = [];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = Token;\n\n      return this.apiClient.callApi(\n        '/auth/login', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n  };\n\n  return exports;\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/api/AuthApi.js\n ** module id = 19\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/RestOK', 'model/RestError'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/RestOK'), require('../model/RestError'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.OpsApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.RestOK, root.WebidaRestfulApi.RestError);\n  }\n}(this, function(ApiClient, RestOK, RestError) {\n  'use strict';\n\n  /**\n   * Ops service.\n   * @module api/OpsApi\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new OpsApi. \n   * @alias module:api/OpsApi\n   * @class\n   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n    /**\n     * Callback function to receive the result of the replace operation.\n     * @callback module:api/OpsApi~replaceCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/RestOK} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * replace file contents with regex matching\n     * @param {String} wfsId webida file system id (same to workspace id) to access.\n     * @param {Array.<String>} wfsPathList array of wfsPath, with heading /. (collectionFormat may be changed by implementation)\n     * @param {String} pattern regex pattern to match in search or replace. In replace operation, pattern should be same to the parttern in search operation\n     * @param {String} replaceTo string to replace with\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.ignoreCase regex matching option to ignore case. In replace operation, this option should be same to one used in search operation (default to false)\n     * @param {module:api/OpsApi~replaceCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/RestOK}\n     */\n    this.replace = function(wfsId, wfsPathList, pattern, replaceTo, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'wfsId' is set\n      if (wfsId == undefined || wfsId == null) {\n        throw \"Missing the required parameter 'wfsId' when calling replace\";\n      }\n\n      // verify the required parameter 'wfsPathList' is set\n      if (wfsPathList == undefined || wfsPathList == null) {\n        throw \"Missing the required parameter 'wfsPathList' when calling replace\";\n      }\n\n      // verify the required parameter 'pattern' is set\n      if (pattern == undefined || pattern == null) {\n        throw \"Missing the required parameter 'pattern' when calling replace\";\n      }\n\n      // verify the required parameter 'replaceTo' is set\n      if (replaceTo == undefined || replaceTo == null) {\n        throw \"Missing the required parameter 'replaceTo' when calling replace\";\n      }\n\n\n      var pathParams = {\n        'wfsId': wfsId\n      };\n      var queryParams = {\n        'wfsPathList': this.apiClient.buildCollectionParam(wfsPathList, 'multi'),\n        'pattern': pattern,\n        'ignoreCase': opts['ignoreCase'],\n        'replaceTo': replaceTo\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = RestOK;\n\n      return this.apiClient.callApi(\n        '/wfs/{wfsId}/ops/replace', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the search operation.\n     * @callback module:api/OpsApi~searchCallback\n     * @param {String} error Error message, if any.\n     * @param {Object.<String, {'String': [Match]}>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * search files in some path, with given pattern\n     * @param {String} wfsId webida file system id (same to workspace id) to access.\n     * @param {Array.<String>} wfsPathList array of wfsPath, with heading /. (collectionFormat may be changed by implementation)\n     * @param {String} pattern regex pattern to match in search or replace. In replace operation, pattern should be same to the parttern in search operation\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.ignoreCase regex matching option to ignore case. In replace operation, this option should be same to one used in search operation (default to false)\n     * @param {module:api/OpsApi~searchCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {Object.<String, {'String': [Match]}>}\n     */\n    this.search = function(wfsId, wfsPathList, pattern, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'wfsId' is set\n      if (wfsId == undefined || wfsId == null) {\n        throw \"Missing the required parameter 'wfsId' when calling search\";\n      }\n\n      // verify the required parameter 'wfsPathList' is set\n      if (wfsPathList == undefined || wfsPathList == null) {\n        throw \"Missing the required parameter 'wfsPathList' when calling search\";\n      }\n\n      // verify the required parameter 'pattern' is set\n      if (pattern == undefined || pattern == null) {\n        throw \"Missing the required parameter 'pattern' when calling search\";\n      }\n\n\n      var pathParams = {\n        'wfsId': wfsId\n      };\n      var queryParams = {\n        'wfsPathList': this.apiClient.buildCollectionParam(wfsPathList, 'multi'),\n        'pattern': pattern,\n        'ignoreCase': opts['ignoreCase']\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = {'String': [Match]};\n\n      return this.apiClient.callApi(\n        '/wfs/{wfsId}/ops/search', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n  };\n\n  return exports;\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/api/OpsApi.js\n ** module id = 20\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/RestError', 'model/RemoteAccess', 'model/RestOK'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/RestError'), require('../model/RemoteAccess'), require('../model/RestOK'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.RemotesApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.RestError, root.WebidaRestfulApi.RemoteAccess, root.WebidaRestfulApi.RestOK);\n  }\n}(this, function(ApiClient, RestError, RemoteAccess, RestOK) {\n  'use strict';\n\n  /**\n   * Remotes service.\n   * @module api/RemotesApi\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new RemotesApi. \n   * @alias module:api/RemotesApi\n   * @class\n   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n    /**\n     * Callback function to receive the result of the findRemoteAccesses operation.\n     * @callback module:api/RemotesApi~findRemoteAccessesCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/RemoteAccess>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get all access informations See RemoteWorkspaceAccess definition for details (no fancy find / search feature yet)\n     * @param {module:api/RemotesApi~findRemoteAccessesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {Array.<module:model/RemoteAccess>}\n     */\n    this.findRemoteAccesses = function(callback) {\n      var postBody = null;\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = [RemoteAccess];\n\n      return this.apiClient.callApi(\n        '/remotes', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the putRemoteAccess operation.\n     * @callback module:api/RemotesApi~putRemoteAccessCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/RestOK} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Ceates or updates a remote workspace access information\n     * @param {module:model/RemoteAccess} body \n     * @param {module:api/RemotesApi~putRemoteAccessCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/RestOK}\n     */\n    this.putRemoteAccess = function(body, callback) {\n      var postBody = body;\n\n      // verify the required parameter 'body' is set\n      if (body == undefined || body == null) {\n        throw \"Missing the required parameter 'body' when calling putRemoteAccess\";\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = RestOK;\n\n      return this.apiClient.callApi(\n        '/remotes', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the removeRemoteAccess operation.\n     * @callback module:api/RemotesApi~removeRemoteAccessCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/RemoteAccess} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Removes remote workspace access information\n     * @param {String} workspaceId workspace Id of remote workspace\n     * @param {module:api/RemotesApi~removeRemoteAccessCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/RemoteAccess}\n     */\n    this.removeRemoteAccess = function(workspaceId, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'workspaceId' is set\n      if (workspaceId == undefined || workspaceId == null) {\n        throw \"Missing the required parameter 'workspaceId' when calling removeRemoteAccess\";\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'workspaceId': workspaceId\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = RemoteAccess;\n\n      return this.apiClient.callApi(\n        '/remotes', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n  };\n\n  return exports;\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/api/RemotesApi.js\n ** module id = 21\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/RestOK', 'model/RestError', 'model/Session'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/RestOK'), require('../model/RestError'), require('../model/Session'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.SessionApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.RestOK, root.WebidaRestfulApi.RestError, root.WebidaRestfulApi.Session);\n  }\n}(this, function(ApiClient, RestOK, RestError, Session) {\n  'use strict';\n\n  /**\n   * Session service.\n   * @module api/SessionApi\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new SessionApi. \n   * @alias module:api/SessionApi\n   * @class\n   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n    /**\n     * Callback function to receive the result of the closeSessions operation.\n     * @callback module:api/SessionApi~closeSessionsCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/RestOK} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Closes session with timeout. Targets are selected by same rule to findSessions() op. While targeting multiple sessions, this operation requires same access rights with findSessions(). Closing a single session requires &#39;same session id&#39; or &#39;unrestricted workspace acceess&#39;.\n     * @param {String} sessionId webida session id (usually different from socket id from sock.io)\n     * @param {String} workspaceId webida workspace id in query part\n     * @param {Integer} closeAfter Waiting time before actual closing, to let client save files and prevent reconnecting. \n     * @param {module:api/SessionApi~closeSessionsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/RestOK}\n     */\n    this.closeSessions = function(sessionId, workspaceId, closeAfter, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'sessionId' is set\n      if (sessionId == undefined || sessionId == null) {\n        throw \"Missing the required parameter 'sessionId' when calling closeSessions\";\n      }\n\n      // verify the required parameter 'workspaceId' is set\n      if (workspaceId == undefined || workspaceId == null) {\n        throw \"Missing the required parameter 'workspaceId' when calling closeSessions\";\n      }\n\n      // verify the required parameter 'closeAfter' is set\n      if (closeAfter == undefined || closeAfter == null) {\n        throw \"Missing the required parameter 'closeAfter' when calling closeSessions\";\n      }\n\n\n      var pathParams = {\n        'sessionId': sessionId\n      };\n      var queryParams = {\n        'workspaceId': workspaceId,\n        'closeAfter': closeAfter\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = RestOK;\n\n      return this.apiClient.callApi(\n        '/sessions/{sessionId}', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the findSessions operation.\n     * @callback module:api/SessionApi~findSessionsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/Session>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Finds webida sessions established to server. if session id is given, matched session info will be returned and workspace id  parameter will be ignored. To find all sessions of some workspace, set session id to &#39;*&#39; and specify workspace id.  This operation requires proper accsss rights.   1) To find all sessions, an unrestricted token is required.   2) To find some workspace sesions, token should have proper access right on the workspace. \n     * @param {String} sessionId webida session id (usually different from socket id from sock.io)\n     * @param {String} workspaceId webida workspace id in query part\n     * @param {module:api/SessionApi~findSessionsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {Array.<module:model/Session>}\n     */\n    this.findSessions = function(sessionId, workspaceId, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'sessionId' is set\n      if (sessionId == undefined || sessionId == null) {\n        throw \"Missing the required parameter 'sessionId' when calling findSessions\";\n      }\n\n      // verify the required parameter 'workspaceId' is set\n      if (workspaceId == undefined || workspaceId == null) {\n        throw \"Missing the required parameter 'workspaceId' when calling findSessions\";\n      }\n\n\n      var pathParams = {\n        'sessionId': sessionId\n      };\n      var queryParams = {\n        'workspaceId': workspaceId\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = [Session];\n\n      return this.apiClient.callApi(\n        '/sessions/{sessionId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n  };\n\n  return exports;\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/api/SessionApi.js\n ** module id = 22\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/RestOK', 'model/RestError', 'model/DirEntry', 'model/Stats'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/RestOK'), require('../model/RestError'), require('../model/DirEntry'), require('../model/Stats'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.WfsApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.RestOK, root.WebidaRestfulApi.RestError, root.WebidaRestfulApi.DirEntry, root.WebidaRestfulApi.Stats);\n  }\n}(this, function(ApiClient, RestOK, RestError, DirEntry, Stats) {\n  'use strict';\n\n  /**\n   * Wfs service.\n   * @module api/WfsApi\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new WfsApi. \n   * @alias module:api/WfsApi\n   * @class\n   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n    /**\n     * Callback function to receive the result of the copy operation.\n     * @callback module:api/WfsApi~copyCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/RestOK} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Creates a copy of source to given path. Unlike cp command, wfsPath always denotes an exact path of the resource to be created.  So, When destination path exists already,   1) copying file to file : follows noOverwrite flag. (does not return error)   2) copying file to dir : returns 409 error   3) copying dir to file : returns 409 error   4) copying dir to dir : merge srcPath/_* to wfsPath, following noOverwite flag.  This operation creates the parents dir of destination path always, and does not roll-back the creation when operation failed. So, clients should roll-back if needed. \n     * @param {String} wfsId webida file system id (same to workspace id) to access.\n     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments\n     * @param {String} srcPath source data path of some operations, with have heading /\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.noOverwrite does not overwrites any existing file while copying or moving (default to false)\n     * @param {Boolean} opts.followSymbolicLinks dereference symlinks in source. (default to false)\n     * @param {Boolean} opts.preserveTimestamps keep mtime/atime of source file(s) in destination. (default to false)\n     * @param {module:api/WfsApi~copyCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/RestOK}\n     */\n    this.copy = function(wfsId, wfsPath, srcPath, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'wfsId' is set\n      if (wfsId == undefined || wfsId == null) {\n        throw \"Missing the required parameter 'wfsId' when calling copy\";\n      }\n\n      // verify the required parameter 'wfsPath' is set\n      if (wfsPath == undefined || wfsPath == null) {\n        throw \"Missing the required parameter 'wfsPath' when calling copy\";\n      }\n\n      // verify the required parameter 'srcPath' is set\n      if (srcPath == undefined || srcPath == null) {\n        throw \"Missing the required parameter 'srcPath' when calling copy\";\n      }\n\n\n      var pathParams = {\n        'wfsId': wfsId,\n        'wfsPath': wfsPath\n      };\n      var queryParams = {\n        'srcPath': srcPath,\n        'noOverwrite': opts['noOverwrite'],\n        'followSymbolicLinks': opts['followSymbolicLinks'],\n        'preserveTimestamps': opts['preserveTimestamps']\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = RestOK;\n\n      return this.apiClient.callApi(\n        '/wfs/{wfsId}/any/{wfsPath}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the createDir operation.\n     * @callback module:api/WfsApi~createDirCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/RestOK} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Creates a directory at the path. When the path is found to be a directory, this api does not return error and does not care it&#39;s empty or not. Always creates parent directories if needed.\n     * @param {String} wfsId webida file system id (same to workspace id) to access.\n     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments\n     * @param {module:api/WfsApi~createDirCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/RestOK}\n     */\n    this.createDir = function(wfsId, wfsPath, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'wfsId' is set\n      if (wfsId == undefined || wfsId == null) {\n        throw \"Missing the required parameter 'wfsId' when calling createDir\";\n      }\n\n      // verify the required parameter 'wfsPath' is set\n      if (wfsPath == undefined || wfsPath == null) {\n        throw \"Missing the required parameter 'wfsPath' when calling createDir\";\n      }\n\n\n      var pathParams = {\n        'wfsId': wfsId,\n        'wfsPath': wfsPath\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = RestOK;\n\n      return this.apiClient.callApi(\n        '/wfs/{wfsId}/dir/{wfsPath}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the dirTree operation.\n     * @callback module:api/WfsApi~dirTreeCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/DirEntry} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Returns a directory tree of given path, the errors while building sub-tree will be ignored and result will not include the path that has errors. Client may have to stat some suspicious paths manually, if listing is not complete.\n     * @param {String} wfsId webida file system id (same to workspace id) to access.\n     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments\n     * @param {Integer} maxDepth Maximum depth of tree. -1 to build a full tree, 0 to stat, 1 to plain list.\n     * @param {module:api/WfsApi~dirTreeCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/DirEntry}\n     */\n    this.dirTree = function(wfsId, wfsPath, maxDepth, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'wfsId' is set\n      if (wfsId == undefined || wfsId == null) {\n        throw \"Missing the required parameter 'wfsId' when calling dirTree\";\n      }\n\n      // verify the required parameter 'wfsPath' is set\n      if (wfsPath == undefined || wfsPath == null) {\n        throw \"Missing the required parameter 'wfsPath' when calling dirTree\";\n      }\n\n      // verify the required parameter 'maxDepth' is set\n      if (maxDepth == undefined || maxDepth == null) {\n        throw \"Missing the required parameter 'maxDepth' when calling dirTree\";\n      }\n\n\n      var pathParams = {\n        'wfsId': wfsId,\n        'wfsPath': wfsPath\n      };\n      var queryParams = {\n        'maxDepth': maxDepth\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = DirEntry;\n\n      return this.apiClient.callApi(\n        '/wfs/{wfsId}/dir/{wfsPath}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the move operation.\n     * @callback module:api/WfsApi~moveCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/RestOK} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Moves source resource to given path. Follows same rule to deal with existing path. So, this operation works like rename rather than mv. Just like copy(), this operations creates paraent dirs if needed and does not roll-back. Symbolic link and timestamp values will be moved without touching.\n     * @param {String} wfsId webida file system id (same to workspace id) to access.\n     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments\n     * @param {String} srcPath source data path of some operations, with have heading /\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.noOverwrite does not overwrites any existing file while copying or moving (default to false)\n     * @param {module:api/WfsApi~moveCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/RestOK}\n     */\n    this.move = function(wfsId, wfsPath, srcPath, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'wfsId' is set\n      if (wfsId == undefined || wfsId == null) {\n        throw \"Missing the required parameter 'wfsId' when calling move\";\n      }\n\n      // verify the required parameter 'wfsPath' is set\n      if (wfsPath == undefined || wfsPath == null) {\n        throw \"Missing the required parameter 'wfsPath' when calling move\";\n      }\n\n      // verify the required parameter 'srcPath' is set\n      if (srcPath == undefined || srcPath == null) {\n        throw \"Missing the required parameter 'srcPath' when calling move\";\n      }\n\n\n      var pathParams = {\n        'wfsId': wfsId,\n        'wfsPath': wfsPath\n      };\n      var queryParams = {\n        'srcPath': srcPath,\n        'noOverwrite': opts['noOverwrite']\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = RestOK;\n\n      return this.apiClient.callApi(\n        '/wfs/{wfsId}/any/{wfsPath}', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the readFile operation.\n     * @callback module:api/WfsApi~readFileCallback\n     * @param {String} error Error message, if any.\n     * @param {File} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * read file data on path\n     * @param {String} wfsId webida file system id (same to workspace id) to access.\n     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments\n     * @param {module:api/WfsApi~readFileCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {File}\n     */\n    this.readFile = function(wfsId, wfsPath, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'wfsId' is set\n      if (wfsId == undefined || wfsId == null) {\n        throw \"Missing the required parameter 'wfsId' when calling readFile\";\n      }\n\n      // verify the required parameter 'wfsPath' is set\n      if (wfsPath == undefined || wfsPath == null) {\n        throw \"Missing the required parameter 'wfsPath' when calling readFile\";\n      }\n\n\n      var pathParams = {\n        'wfsId': wfsId,\n        'wfsPath': wfsPath\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = File;\n\n      return this.apiClient.callApi(\n        '/wfs/{wfsId}/file/{wfsPath}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the remove operation.\n     * @callback module:api/WfsApi~removeCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/RestOK} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * delete file or directory\n     * @param {String} wfsId webida file system id (same to workspace id) to access.\n     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.noRecursive if set, deleting non-empty directory will return 409 error. (default to false)\n     * @param {module:api/WfsApi~removeCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/RestOK}\n     */\n    this.remove = function(wfsId, wfsPath, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'wfsId' is set\n      if (wfsId == undefined || wfsId == null) {\n        throw \"Missing the required parameter 'wfsId' when calling remove\";\n      }\n\n      // verify the required parameter 'wfsPath' is set\n      if (wfsPath == undefined || wfsPath == null) {\n        throw \"Missing the required parameter 'wfsPath' when calling remove\";\n      }\n\n\n      var pathParams = {\n        'wfsId': wfsId,\n        'wfsPath': wfsPath\n      };\n      var queryParams = {\n        'noRecursive': opts['noRecursive']\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = RestOK;\n\n      return this.apiClient.callApi(\n        '/wfs/{wfsId}/any/{wfsPath}', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the stat operation.\n     * @callback module:api/WfsApi~statCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/Stats} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get stats of given path. (stat() returns stats object in node and POSIX system). This API should be called only when stats of some file system path is stale for unknown reason (e.g. losting change events). Use dirTree operation and session events to detect stats, if possible. This API can be used to check a path is valid, existing one, but it&#39;s not recommended to check existence of individual paths by API. Clients should use dirTree and session events to synchorize some in-app file system with webida file system.\n     * @param {String} wfsId webida file system id (same to workspace id) to access.\n     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.ignoreError When true, operation ignore ENOENT error and returns DUMMY stats object instead of 404 error. (default to false)\n     * @param {module:api/WfsApi~statCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/Stats}\n     */\n    this.stat = function(wfsId, wfsPath, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'wfsId' is set\n      if (wfsId == undefined || wfsId == null) {\n        throw \"Missing the required parameter 'wfsId' when calling stat\";\n      }\n\n      // verify the required parameter 'wfsPath' is set\n      if (wfsPath == undefined || wfsPath == null) {\n        throw \"Missing the required parameter 'wfsPath' when calling stat\";\n      }\n\n\n      var pathParams = {\n        'wfsId': wfsId,\n        'wfsPath': wfsPath\n      };\n      var queryParams = {\n        'ignoreError': opts['ignoreError']\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = Stats;\n\n      return this.apiClient.callApi(\n        '/wfs/{wfsId}/any/{wfsPath}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the writeFile operation.\n     * @callback module:api/WfsApi~writeFileCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/RestOK} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Creates / updates file with body data. Server should write the file in atomic manner nd should not write down request body into final destination path directly. In other words,  wheather writeFile() succeeds or not, the contents of the file should not be corrupted nor half-written.\n     * @param {String} wfsId webida file system id (same to workspace id) to access.\n     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments\n     * @param {File} data file contents to write.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.ensureParents A flag to create all parent directories to create file or dir, like mkdir -p. This parameter does not create entire path, but ensures &#39;parent directory&#39; of the wfsPath parameter (default to false)\n     * @param {module:api/WfsApi~writeFileCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/RestOK}\n     */\n    this.writeFile = function(wfsId, wfsPath, data, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'wfsId' is set\n      if (wfsId == undefined || wfsId == null) {\n        throw \"Missing the required parameter 'wfsId' when calling writeFile\";\n      }\n\n      // verify the required parameter 'wfsPath' is set\n      if (wfsPath == undefined || wfsPath == null) {\n        throw \"Missing the required parameter 'wfsPath' when calling writeFile\";\n      }\n\n      // verify the required parameter 'data' is set\n      if (data == undefined || data == null) {\n        throw \"Missing the required parameter 'data' when calling writeFile\";\n      }\n\n\n      var pathParams = {\n        'wfsId': wfsId,\n        'wfsPath': wfsPath\n      };\n      var queryParams = {\n        'ensureParents': opts['ensureParents']\n      };\n      var headerParams = {\n      };\n      var formParams = {\n        'data': data\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['multipart/form-data'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = RestOK;\n\n      return this.apiClient.callApi(\n        '/wfs/{wfsId}/file/{wfsPath}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n  };\n\n  return exports;\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/api/WfsApi.js\n ** module id = 23\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/RestOK', 'model/RestError', 'model/Workspace', 'model/ChildProcess', 'model/Execution', 'model/ExecutionResult'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/RestOK'), require('../model/RestError'), require('../model/Workspace'), require('../model/ChildProcess'), require('../model/Execution'), require('../model/ExecutionResult'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.WorkspaceApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.RestOK, root.WebidaRestfulApi.RestError, root.WebidaRestfulApi.Workspace, root.WebidaRestfulApi.ChildProcess, root.WebidaRestfulApi.Execution, root.WebidaRestfulApi.ExecutionResult);\n  }\n}(this, function(ApiClient, RestOK, RestError, Workspace, ChildProcess, Execution, ExecutionResult) {\n  'use strict';\n\n  /**\n   * Workspace service.\n   * @module api/WorkspaceApi\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new WorkspaceApi. \n   * @alias module:api/WorkspaceApi\n   * @class\n   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n    /**\n     * Callback function to receive the result of the cancel operation.\n     * @callback module:api/WorkspaceApi~cancelCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/RestOK} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Cancels executions, killing the spawned processes. To terminate all spawned processes, set execId to &#39;*&#39;. Requires proper access rights. Since killing a process usually takes a little bit long time, this api does not returns actual result but works in async manner. (So, client should listen to web socket channels for the processes). This operation Requires same access rights to exec().\n     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)\n     * @param {String} execId the id from execution request (different from pid!)\n     * @param {module:api/WorkspaceApi~cancelCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/RestOK}\n     */\n    this.cancel = function(workspaceId, execId, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'workspaceId' is set\n      if (workspaceId == undefined || workspaceId == null) {\n        throw \"Missing the required parameter 'workspaceId' when calling cancel\";\n      }\n\n      // verify the required parameter 'execId' is set\n      if (execId == undefined || execId == null) {\n        throw \"Missing the required parameter 'execId' when calling cancel\";\n      }\n\n\n      var pathParams = {\n        'workspaceId': workspaceId\n      };\n      var queryParams = {\n        'execId': execId\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = RestOK;\n\n      return this.apiClient.callApi(\n        '/workspaces/{workspaceId}/exec', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the createWorkspace operation.\n     * @callback module:api/WorkspaceApi~createWorkspaceCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/Workspace} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Creates a new workspace with given local path. Requires an unrestricted access token. the workspace id parameter is ignored and will be replaced by new, unique value by server. it&#39;s recommended to set the value to simple, bogus one, like &#39;*&#39; or &#39;-&#39; (since it&#39;s path  parameter, empty value is not allowed. 404 error will be returned for the case). excludedPath will be set with default values, including .git/, bower_components/ and node_modules/  Needs an unrestricted access token. \n     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)\n     * @param {String} localPath a real, local path of the system (not unixified)\n     * @param {String} name workspace name property\n     * @param {String} description workspace name property\n     * @param {module:api/WorkspaceApi~createWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/Workspace}\n     */\n    this.createWorkspace = function(workspaceId, localPath, name, description, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'workspaceId' is set\n      if (workspaceId == undefined || workspaceId == null) {\n        throw \"Missing the required parameter 'workspaceId' when calling createWorkspace\";\n      }\n\n      // verify the required parameter 'localPath' is set\n      if (localPath == undefined || localPath == null) {\n        throw \"Missing the required parameter 'localPath' when calling createWorkspace\";\n      }\n\n      // verify the required parameter 'name' is set\n      if (name == undefined || name == null) {\n        throw \"Missing the required parameter 'name' when calling createWorkspace\";\n      }\n\n      // verify the required parameter 'description' is set\n      if (description == undefined || description == null) {\n        throw \"Missing the required parameter 'description' when calling createWorkspace\";\n      }\n\n\n      var pathParams = {\n        'workspaceId': workspaceId\n      };\n      var queryParams = {\n        'localPath': localPath,\n        'name': name,\n        'description': description\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = Workspace;\n\n      return this.apiClient.callApi(\n        '/workspaces/{workspaceId}', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the exec operation.\n     * @callback module:api/WorkspaceApi~execCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/ExecutionResult} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Executes a shell command or spawns a background process on this workspace. Requires proper access rights.\n     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)\n     * @param {module:model/Execution} body the process to be executed or spawned.\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.async Spawns a child process for given command and returns the created child proc info. Actual output (stream of message) will be delivered to web socket channel, using execution id. (default to false)\n     * @param {module:api/WorkspaceApi~execCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/ExecutionResult}\n     */\n    this.exec = function(workspaceId, body, opts, callback) {\n      opts = opts || {};\n      var postBody = body;\n\n      // verify the required parameter 'workspaceId' is set\n      if (workspaceId == undefined || workspaceId == null) {\n        throw \"Missing the required parameter 'workspaceId' when calling exec\";\n      }\n\n      // verify the required parameter 'body' is set\n      if (body == undefined || body == null) {\n        throw \"Missing the required parameter 'body' when calling exec\";\n      }\n\n\n      var pathParams = {\n        'workspaceId': workspaceId\n      };\n      var queryParams = {\n        'async': opts['async']\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = ExecutionResult;\n\n      return this.apiClient.callApi(\n        '/workspaces/{workspaceId}/exec', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the findProcs operation.\n     * @callback module:api/WorkspaceApi~findProcsCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/ChildProcess>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Gets process info, created by async exec request, on this workspace. To find all spawned processes, set id to &#39;*&#39;. This op does not returns error when no procs found but empty result array. \n     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)\n     * @param {String} execId the id from execution request (different from pid!)\n     * @param {module:api/WorkspaceApi~findProcsCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {Array.<module:model/ChildProcess>}\n     */\n    this.findProcs = function(workspaceId, execId, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'workspaceId' is set\n      if (workspaceId == undefined || workspaceId == null) {\n        throw \"Missing the required parameter 'workspaceId' when calling findProcs\";\n      }\n\n      // verify the required parameter 'execId' is set\n      if (execId == undefined || execId == null) {\n        throw \"Missing the required parameter 'execId' when calling findProcs\";\n      }\n\n\n      var pathParams = {\n        'workspaceId': workspaceId\n      };\n      var queryParams = {\n        'execId': execId\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = [];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = [ChildProcess];\n\n      return this.apiClient.callApi(\n        '/workspaces/{workspaceId}/exec', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the findWorkspaces operation.\n     * @callback module:api/WorkspaceApi~findWorkspacesCallback\n     * @param {String} error Error message, if any.\n     * @param {Array.<module:model/Workspace>} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Finds workspaces with given id or parameters. if workspaceId &#x3D; &#39;*&#39;, all workspaces in server  are returned. No empty workspace id is allowed for it&#39;s a path parameter. When a workspace id is not &#39;*&#39; and non-existing workspace are requested, server should send 404 error and should ignore disposable parameter. \n     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)\n     * @param {Object} opts Optional parameters\n     * @param {Boolean} opts.disposable flag to include disposable workspaces or not, when workspaceId is &#39;*&#39; (default to false)\n     * @param {module:api/WorkspaceApi~findWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {Array.<module:model/Workspace>}\n     */\n    this.findWorkspaces = function(workspaceId, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'workspaceId' is set\n      if (workspaceId == undefined || workspaceId == null) {\n        throw \"Missing the required parameter 'workspaceId' when calling findWorkspaces\";\n      }\n\n\n      var pathParams = {\n        'workspaceId': workspaceId\n      };\n      var queryParams = {\n        'disposable': opts['disposable']\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = [Workspace];\n\n      return this.apiClient.callApi(\n        '/workspaces/{workspaceId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the removeWorkspace operation.\n     * @callback module:api/WorkspaceApi~removeWorkspaceCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/RestOK} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Removes a workspace. If no sessions are connected, this api &#39;works&#39; before returning result. if some sesions are, workspace will be removed when   1) all sessions are closed for request (will be notified by server)   2) exceeded time limit value in closeAfter parameter   3) server stops after accepting remove request and willBeRemoved value is set. So, client may &#39;find&#39; the workspace to be removed after calling this operation.  Requires \\&quot;unrestricted\\&quot; access rights. \n     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)\n     * @param {Object} opts Optional parameters\n     * @param {Integer} opts.closeAfter Time in seconds to wait for all sessions save &amp; close their data. (default to 0)\n     * @param {Boolean} opts.expunge Time in seconds to wait for all sessions save &amp; close their data.\n     * @param {module:api/WorkspaceApi~removeWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/RestOK}\n     */\n    this.removeWorkspace = function(workspaceId, opts, callback) {\n      opts = opts || {};\n      var postBody = null;\n\n      // verify the required parameter 'workspaceId' is set\n      if (workspaceId == undefined || workspaceId == null) {\n        throw \"Missing the required parameter 'workspaceId' when calling removeWorkspace\";\n      }\n\n\n      var pathParams = {\n        'workspaceId': workspaceId\n      };\n      var queryParams = {\n        'closeAfter': opts['closeAfter'],\n        'expunge': opts['expunge']\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = RestOK;\n\n      return this.apiClient.callApi(\n        '/workspaces/{workspaceId}', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the updateWorkspace operation.\n     * @callback module:api/WorkspaceApi~updateWorkspaceCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/Workspace} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Updates workspace. Some protected properties will not be changed by this op. If server cannot apply changed properties before returning workspace, such properties should not be updated with this operation. Clients should not rely on request body for further works, and should always check response to see what&#39;s changed actually.  Requires proper access rights. \n     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)\n     * @param {module:model/Workspace} body workspace object that contains updates\n     * @param {module:api/WorkspaceApi~updateWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/Workspace}\n     */\n    this.updateWorkspace = function(workspaceId, body, callback) {\n      var postBody = body;\n\n      // verify the required parameter 'workspaceId' is set\n      if (workspaceId == undefined || workspaceId == null) {\n        throw \"Missing the required parameter 'workspaceId' when calling updateWorkspace\";\n      }\n\n      // verify the required parameter 'body' is set\n      if (body == undefined || body == null) {\n        throw \"Missing the required parameter 'body' when calling updateWorkspace\";\n      }\n\n\n      var pathParams = {\n        'workspaceId': workspaceId\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = ['webida-simple-auth'];\n      var contentTypes = ['application/json'];\n      var accepts = ['application/json', 'application/octet-stream'];\n      var returnType = Workspace;\n\n      return this.apiClient.callApi(\n        '/workspaces/{workspaceId}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n  };\n\n  return exports;\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/api/WorkspaceApi.js\n ** module id = 24\n ** module chunks = 0\n **/","/**\n * Webida Restful API\n * Restful API for Webida clients to use server's data & features\n *\n * OpenAPI spec version: 0.6.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.WebidaRestfulApi) {\n      root.WebidaRestfulApi = {};\n    }\n    root.WebidaRestfulApi.Match = factory(root.WebidaRestfulApi.ApiClient);\n  }\n}(this, function(ApiClient) {\n  'use strict';\n\n\n\n\n  /**\n   * The Match model module.\n   * @module model/Match\n   * @version 0.6.0\n   */\n\n  /**\n   * Constructs a new <code>Match</code>.\n   * search result for a file\n   * @alias module:model/Match\n   * @class\n   * @param line {Integer} \n   * @param text {String} \n   */\n  var exports = function(line, text) {\n    var _this = this;\n\n    _this['line'] = line;\n    _this['text'] = text;\n  };\n\n  /**\n   * Constructs a <code>Match</code> from a plain JavaScript object, optionally creating a new instance.\n   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n   * @param {Object} data The plain JavaScript object bearing properties of interest.\n   * @param {module:model/Match} obj Optional instance to populate.\n   * @return {module:model/Match} The populated <code>Match</code> instance.\n   */\n  exports.constructFromObject = function(data, obj) {\n    if (data) {\n      obj = obj || new exports();\n\n      if (data.hasOwnProperty('line')) {\n        obj['line'] = ApiClient.convertToType(data['line'], 'Integer');\n      }\n      if (data.hasOwnProperty('text')) {\n        obj['text'] = ApiClient.convertToType(data['text'], 'String');\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * @member {Integer} line\n   */\n  exports.prototype['line'] = undefined;\n  /**\n   * @member {String} text\n   */\n  exports.prototype['text'] = undefined;\n\n\n\n  return exports;\n}));\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/model/Match.js\n ** module id = 25\n ** module chunks = 0\n **/"],"sourceRoot":""}