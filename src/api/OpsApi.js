/**
 * Webida Restful API
 * Restful API for Webida clients to use server's data & features
 *
 * OpenAPI spec version: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RestOK', 'model/RestError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RestOK'), require('../model/RestError'));
  } else {
    // Browser globals (root is window)
    if (!root.WebidaRestfulApi) {
      root.WebidaRestfulApi = {};
    }
    root.WebidaRestfulApi.OpsApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.RestOK, root.WebidaRestfulApi.RestError);
  }
}(this, function(ApiClient, RestOK, RestError) {
  'use strict';

  /**
   * Ops service.
   * @module api/OpsApi
   * @version 0.5.0
   */

  /**
   * Constructs a new OpsApi. 
   * @alias module:api/OpsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the replace operation.
     * @callback module:api/OpsApi~replaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestOK} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace file contents with regex matching
     * @param {String} wfsId webida file system id (same to workspace id) to access.
     * @param {Array.<String>} wfsPathList array of wfsPath, with heading /  (collection format may be changed by implementation)
     * @param {String} pattern regex pattern to match in search or replace. In replace operation, pattern should be same to the parttern in search operation 
     * @param {String} replaceTo string to replace with
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ignoreCase regex matching option to ignore case. In replace operation, this option should be same to one used in search operation  (default to false)
     * @param {module:api/OpsApi~replaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/RestOK}
     */
    this.replace = function(wfsId, wfsPathList, pattern, replaceTo, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'wfsId' is set
      if (wfsId == undefined || wfsId == null) {
        throw "Missing the required parameter 'wfsId' when calling replace";
      }

      // verify the required parameter 'wfsPathList' is set
      if (wfsPathList == undefined || wfsPathList == null) {
        throw "Missing the required parameter 'wfsPathList' when calling replace";
      }

      // verify the required parameter 'pattern' is set
      if (pattern == undefined || pattern == null) {
        throw "Missing the required parameter 'pattern' when calling replace";
      }

      // verify the required parameter 'replaceTo' is set
      if (replaceTo == undefined || replaceTo == null) {
        throw "Missing the required parameter 'replaceTo' when calling replace";
      }


      var pathParams = {
        'wfsId': wfsId
      };
      var queryParams = {
        'wfsPathList': this.apiClient.buildCollectionParam(wfsPathList, 'multi'),
        'pattern': pattern,
        'replaceTo': replaceTo,
        'ignoreCase': opts['ignoreCase']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = RestOK;

      return this.apiClient.callApi(
        '/wfs/{wfsId}/ops/replace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/OpsApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': [Match]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search files in some path, with given pattern
     * @param {String} wfsId webida file system id (same to workspace id) to access.
     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments 
     * @param {String} pattern regex pattern to match in search or replace. In replace operation, pattern should be same to the parttern in search operation 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ignoreCase regex matching option to ignore case. In replace operation, this option should be same to one used in search operation  (default to false)
     * @param {module:api/OpsApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Object.<String, {'String': [Match]}>}
     */
    this.search = function(wfsId, wfsPath, pattern, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'wfsId' is set
      if (wfsId == undefined || wfsId == null) {
        throw "Missing the required parameter 'wfsId' when calling search";
      }

      // verify the required parameter 'wfsPath' is set
      if (wfsPath == undefined || wfsPath == null) {
        throw "Missing the required parameter 'wfsPath' when calling search";
      }

      // verify the required parameter 'pattern' is set
      if (pattern == undefined || pattern == null) {
        throw "Missing the required parameter 'pattern' when calling search";
      }


      var pathParams = {
        'wfsId': wfsId,
        'wfsPath': wfsPath
      };
      var queryParams = {
        'pattern': pattern,
        'ignoreCase': opts['ignoreCase']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = {'String': [Match]};

      return this.apiClient.callApi(
        '/wfs/{wfsId}/ops/search/{wfsPath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
