/**
 * Webida Restful API
 * Restful API for Webida clients to use server's data & features
 *
 * OpenAPI spec version: 0.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Alias', 'model/RestError', 'model/RestOK'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Alias'), require('../model/RestError'), require('../model/RestOK'));
  } else {
    // Browser globals (root is window)
    if (!root.WebidaRestfulApi) {
      root.WebidaRestfulApi = {};
    }
    root.WebidaRestfulApi.AliasApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.Alias, root.WebidaRestfulApi.RestError, root.WebidaRestfulApi.RestOK);
  }
}(this, function(ApiClient, Alias, RestError, RestOK) {
  'use strict';

  /**
   * Alias service.
   * @module api/AliasApi
   * @version 0.7.1
   */

  /**
   * Constructs a new AliasApi. 
   * @alias module:api/AliasApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the findAliases operation.
     * @callback module:api/AliasApi~findAliasesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Alias>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get alias objects. set aliasId to &#39;*&#39; to find all aliases in some workspace. If alias id is given, only 0 or 1 matched alias object will be returned, ignoring workspaceId and srcPath. To get an alias object of some wfs path, set srcPath value to some path, and to find all aliases in a workspace, set it to &#39;*&#39; (empty value is not allowed by definition)
     * @param {String} aliasId url path fragment alias id. should have no &#39;/&#39; as well as any &#39;unsafe&#39; chars for url path.  especially, &#39;*&#39; is reserved for finding operations or some other special case.
     * @param {String} workspaceId webida workspace id in query part
     * @param {String} srcPath source data path of some operations, without have heading /
     * @param {module:api/AliasApi~findAliasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Alias>}
     */
    this.findAliases = function(aliasId, workspaceId, srcPath, callback) {
      var postBody = null;

      // verify the required parameter 'aliasId' is set
      if (aliasId == undefined || aliasId == null) {
        throw "Missing the required parameter 'aliasId' when calling findAliases";
      }

      // verify the required parameter 'workspaceId' is set
      if (workspaceId == undefined || workspaceId == null) {
        throw "Missing the required parameter 'workspaceId' when calling findAliases";
      }

      // verify the required parameter 'srcPath' is set
      if (srcPath == undefined || srcPath == null) {
        throw "Missing the required parameter 'srcPath' when calling findAliases";
      }


      var pathParams = {
        'aliasId': aliasId
      };
      var queryParams = {
        'workspaceId': workspaceId,
        'srcPath': srcPath
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = [Alias];

      return this.apiClient.callApi(
        '/aliass/{aliasId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putAlias operation.
     * @callback module:api/AliasApi~putAliasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestOK} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create, or update an alias.
     * @param {String} aliasId url path fragment alias id. should have no &#39;/&#39; as well as any &#39;unsafe&#39; chars for url path.  especially, &#39;*&#39; is reserved for finding operations or some other special case.
     * @param {module:model/Alias} body alias object to write. should have same id to aliasId parameter.
     * @param {module:api/AliasApi~putAliasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/RestOK}
     */
    this.putAlias = function(aliasId, body, callback) {
      var postBody = body;

      // verify the required parameter 'aliasId' is set
      if (aliasId == undefined || aliasId == null) {
        throw "Missing the required parameter 'aliasId' when calling putAlias";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling putAlias";
      }


      var pathParams = {
        'aliasId': aliasId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = RestOK;

      return this.apiClient.callApi(
        '/aliass/{aliasId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAliases operation.
     * @callback module:api/AliasApi~removeAliasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestOK} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove alias. targeting rule is same to findAliases() operation.
     * @param {String} aliasId url path fragment alias id. should have no &#39;/&#39; as well as any &#39;unsafe&#39; chars for url path.  especially, &#39;*&#39; is reserved for finding operations or some other special case.
     * @param {String} workspaceId webida workspace id in query part
     * @param {String} srcPath source data path of some operations, without have heading /
     * @param {module:api/AliasApi~removeAliasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/RestOK}
     */
    this.removeAliases = function(aliasId, workspaceId, srcPath, callback) {
      var postBody = null;

      // verify the required parameter 'aliasId' is set
      if (aliasId == undefined || aliasId == null) {
        throw "Missing the required parameter 'aliasId' when calling removeAliases";
      }

      // verify the required parameter 'workspaceId' is set
      if (workspaceId == undefined || workspaceId == null) {
        throw "Missing the required parameter 'workspaceId' when calling removeAliases";
      }

      // verify the required parameter 'srcPath' is set
      if (srcPath == undefined || srcPath == null) {
        throw "Missing the required parameter 'srcPath' when calling removeAliases";
      }


      var pathParams = {
        'aliasId': aliasId
      };
      var queryParams = {
        'workspaceId': workspaceId,
        'srcPath': srcPath
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = RestOK;

      return this.apiClient.callApi(
        '/aliass/{aliasId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
