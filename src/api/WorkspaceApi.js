/**
 * Webida Restful API
 * Restful API for Webida clients to use server's data & features
 *
 * OpenAPI spec version: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RestOK', 'model/RestError', 'model/Workspace', 'model/ChildProcess', 'model/Execution', 'model/ExecutionResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RestOK'), require('../model/RestError'), require('../model/Workspace'), require('../model/ChildProcess'), require('../model/Execution'), require('../model/ExecutionResult'));
  } else {
    // Browser globals (root is window)
    if (!root.WebidaRestfulApi) {
      root.WebidaRestfulApi = {};
    }
    root.WebidaRestfulApi.WorkspaceApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.RestOK, root.WebidaRestfulApi.RestError, root.WebidaRestfulApi.Workspace, root.WebidaRestfulApi.ChildProcess, root.WebidaRestfulApi.Execution, root.WebidaRestfulApi.ExecutionResult);
  }
}(this, function(ApiClient, RestOK, RestError, Workspace, ChildProcess, Execution, ExecutionResult) {
  'use strict';

  /**
   * Workspace service.
   * @module api/WorkspaceApi
   * @version 0.3.0
   */

  /**
   * Constructs a new WorkspaceApi. 
   * @alias module:api/WorkspaceApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cancel operation.
     * @callback module:api/WorkspaceApi~cancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestOK} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cancels an execution, if possible. Killing process may not be graceful. requires proper access rights. if execId is not specified, this api does nothing. 
     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)
     * @param {Object} opts Optional parameters
     * @param {String} opts.execId the id of execution request(different from pid!)
     * @param {module:api/WorkspaceApi~cancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/RestOK}
     */
    this.cancel = function(workspaceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'workspaceId' is set
      if (workspaceId == undefined || workspaceId == null) {
        throw "Missing the required parameter 'workspaceId' when calling cancel";
      }


      var pathParams = {
        'workspaceId': workspaceId
      };
      var queryParams = {
        'execId': opts['execId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = RestOK;

      return this.apiClient.callApi(
        '/workspaces/{workspaceId}/exec', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createWorkspace operation.
     * @callback module:api/WorkspaceApi~createWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workspace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new workspace with given local path. Requires an unrestricted access token.  
     * @param {String} localPath a real, local path of the system (not unixified)
     * @param {String} name workspace name property
     * @param {String} description workspace name property
     * @param {module:api/WorkspaceApi~createWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Workspace}
     */
    this.createWorkspace = function(localPath, name, description, callback) {
      var postBody = null;

      // verify the required parameter 'localPath' is set
      if (localPath == undefined || localPath == null) {
        throw "Missing the required parameter 'localPath' when calling createWorkspace";
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling createWorkspace";
      }

      // verify the required parameter 'description' is set
      if (description == undefined || description == null) {
        throw "Missing the required parameter 'description' when calling createWorkspace";
      }


      var pathParams = {
      };
      var queryParams = {
        'localPath': localPath,
        'name': name,
        'description': description
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = Workspace;

      return this.apiClient.callApi(
        '/workspaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exec operation.
     * @callback module:api/WorkspaceApi~execCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecutionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * execute a shell command on this workspace. requires proper access rights.
     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)
     * @param {module:model/Execution} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.async Spawn a child process for given command and returns the created child proc info. Actual output (stream of message) will be delivered to web socket channel, with room id /sessions/async-{execId}  (default to false)
     * @param {module:api/WorkspaceApi~execCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/ExecutionResult}
     */
    this.exec = function(workspaceId, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'workspaceId' is set
      if (workspaceId == undefined || workspaceId == null) {
        throw "Missing the required parameter 'workspaceId' when calling exec";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling exec";
      }


      var pathParams = {
        'workspaceId': workspaceId
      };
      var queryParams = {
        'async': opts['async']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = ExecutionResult;

      return this.apiClient.callApi(
        '/workspaces/{workspaceId}/exec', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findProcs operation.
     * @callback module:api/WorkspaceApi~findProcsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChildProcess>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets process info, created by async exec request, on this workspace. If execId is set, this op finds a spawned process whose id is matching. If not, all spawned procs will be found. This op does not returns error when no procs found but empty result array.  This operation requires proper access rights. (unrestricted or matching workspace id in access token with parameter) 
     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)
     * @param {Object} opts Optional parameters
     * @param {String} opts.execId the id of execution request(different from pid!)
     * @param {module:api/WorkspaceApi~findProcsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/ChildProcess>}
     */
    this.findProcs = function(workspaceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'workspaceId' is set
      if (workspaceId == undefined || workspaceId == null) {
        throw "Missing the required parameter 'workspaceId' when calling findProcs";
      }


      var pathParams = {
        'workspaceId': workspaceId
      };
      var queryParams = {
        'execId': opts['execId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = [ChildProcess];

      return this.apiClient.callApi(
        '/workspaces/{workspaceId}/exec', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findWorkspaces operation.
     * @callback module:api/WorkspaceApi~findWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Workspace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds workspaces (no find/search parameters yet). Requires an unrestricted access token.   
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.disposable include disposable workspaces or not (default to false)
     * @param {module:api/WorkspaceApi~findWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Workspace>}
     */
    this.findWorkspaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'disposable': opts['disposable']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = [Workspace];

      return this.apiClient.callApi(
        '/workspaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkspace operation.
     * @callback module:api/WorkspaceApi~getWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workspace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a workspace object by id
     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)
     * @param {module:api/WorkspaceApi~getWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Workspace}
     */
    this.getWorkspace = function(workspaceId, callback) {
      var postBody = null;

      // verify the required parameter 'workspaceId' is set
      if (workspaceId == undefined || workspaceId == null) {
        throw "Missing the required parameter 'workspaceId' when calling getWorkspace";
      }


      var pathParams = {
        'workspaceId': workspaceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = Workspace;

      return this.apiClient.callApi(
        '/workspaces/{workspaceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeWorkspace operation.
     * @callback module:api/WorkspaceApi~removeWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workspace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation will remove the requested workspace when   1) all sessions are closed for request (will be notified by server)   2) excedded time limit value in closeAfter parameter   3) server goes down after accepting remove request \&quot;willBeRemovedAt\&quot; property can be set \&quot;only\&quot; by this api. This API requires \&quot;unrestricted\&quot; access token. Even an access token has matching workspace id, removing an workspace is rejected. 
     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.closeAfter Time in seconds to wait for all sessions save &amp; close their data. (default to 0)
     * @param {module:api/WorkspaceApi~removeWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Workspace}
     */
    this.removeWorkspace = function(workspaceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'workspaceId' is set
      if (workspaceId == undefined || workspaceId == null) {
        throw "Missing the required parameter 'workspaceId' when calling removeWorkspace";
      }


      var pathParams = {
        'workspaceId': workspaceId
      };
      var queryParams = {
        'closeAfter': opts['closeAfter']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = Workspace;

      return this.apiClient.callApi(
        '/workspaces/{workspaceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkspace operation.
     * @callback module:api/WorkspaceApi~updateWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workspace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates workspace. Some protected properties will not be changed by this api. Requires  proper access rights in access token.  
     * @param {String} workspaceId webida workspace id (usually same to file system id, wfsId)
     * @param {module:api/WorkspaceApi~updateWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Workspace}
     */
    this.updateWorkspace = function(workspaceId, callback) {
      var postBody = null;

      // verify the required parameter 'workspaceId' is set
      if (workspaceId == undefined || workspaceId == null) {
        throw "Missing the required parameter 'workspaceId' when calling updateWorkspace";
      }


      var pathParams = {
        'workspaceId': workspaceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = Workspace;

      return this.apiClient.callApi(
        '/workspaces/{workspaceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
