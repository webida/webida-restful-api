/**
 * Webida Restful API
 * Restful API for Webida clients to use server's data & features
 *
 * OpenAPI spec version: 0.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RestOK', 'model/RestError', 'model/DirEntry', 'model/Stats'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RestOK'), require('../model/RestError'), require('../model/DirEntry'), require('../model/Stats'));
  } else {
    // Browser globals (root is window)
    if (!root.WebidaRestfulApi) {
      root.WebidaRestfulApi = {};
    }
    root.WebidaRestfulApi.WfsApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.RestOK, root.WebidaRestfulApi.RestError, root.WebidaRestfulApi.DirEntry, root.WebidaRestfulApi.Stats);
  }
}(this, function(ApiClient, RestOK, RestError, DirEntry, Stats) {
  'use strict';

  /**
   * Wfs service.
   * @module api/WfsApi
   * @version 0.7.1
   */

  /**
   * Constructs a new WfsApi. 
   * @alias module:api/WfsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the copy operation.
     * @callback module:api/WfsApi~copyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestOK} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a copy of source to given path. Unlike cp command, wfsPath always denotes an exact path of the resource to be created.  So, When destination path exists already,   1) copying file to file : follows noOverwrite flag. (does not return error)   2) copying file to dir : returns 409 error   3) copying dir to file : returns 409 error   4) copying dir to dir : merge srcPath/_* to wfsPath, following noOverwite flag.  This operation creates the parents dir of destination path always, and does not roll-back the creation when operation failed. So, clients should roll-back if needed. 
     * @param {String} wfsId webida file system id (same to workspace id) to access.
     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments
     * @param {String} srcPath source data path of some operations, without have heading /
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.noOverwrite does not overwrites any existing file while copying or moving (default to false)
     * @param {Boolean} opts.followSymbolicLinks dereference symlinks in source. (default to false)
     * @param {Boolean} opts.preserveTimestamps keep mtime/atime of source file(s) in destination. (default to false)
     * @param {module:api/WfsApi~copyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/RestOK}
     */
    this.copy = function(wfsId, wfsPath, srcPath, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'wfsId' is set
      if (wfsId == undefined || wfsId == null) {
        throw "Missing the required parameter 'wfsId' when calling copy";
      }

      // verify the required parameter 'wfsPath' is set
      if (wfsPath == undefined || wfsPath == null) {
        throw "Missing the required parameter 'wfsPath' when calling copy";
      }

      // verify the required parameter 'srcPath' is set
      if (srcPath == undefined || srcPath == null) {
        throw "Missing the required parameter 'srcPath' when calling copy";
      }


      var pathParams = {
        'wfsId': wfsId,
        'wfsPath': wfsPath
      };
      var queryParams = {
        'srcPath': srcPath,
        'noOverwrite': opts['noOverwrite'],
        'followSymbolicLinks': opts['followSymbolicLinks'],
        'preserveTimestamps': opts['preserveTimestamps']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = RestOK;

      return this.apiClient.callApi(
        '/wfs/{wfsId}/any/{wfsPath}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDir operation.
     * @callback module:api/WfsApi~createDirCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestOK} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a directory at the path. When the path is found to be a directory, this api does not return error and does not care it&#39;s empty or not. Always creates parent directories if needed.
     * @param {String} wfsId webida file system id (same to workspace id) to access.
     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments
     * @param {module:api/WfsApi~createDirCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/RestOK}
     */
    this.createDir = function(wfsId, wfsPath, callback) {
      var postBody = null;

      // verify the required parameter 'wfsId' is set
      if (wfsId == undefined || wfsId == null) {
        throw "Missing the required parameter 'wfsId' when calling createDir";
      }

      // verify the required parameter 'wfsPath' is set
      if (wfsPath == undefined || wfsPath == null) {
        throw "Missing the required parameter 'wfsPath' when calling createDir";
      }


      var pathParams = {
        'wfsId': wfsId,
        'wfsPath': wfsPath
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = RestOK;

      return this.apiClient.callApi(
        '/wfs/{wfsId}/dir/{wfsPath}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dirTree operation.
     * @callback module:api/WfsApi~dirTreeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DirEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a directory tree of given path, the errors while building sub-tree will be ignored and result will not include the path that has errors. Client may have to stat some suspicious paths manually, if listing is not complete.
     * @param {String} wfsId webida file system id (same to workspace id) to access.
     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments
     * @param {Integer} maxDepth Maximum depth of tree. -1 to build a full tree, 0 to stat, 1 to plain list.
     * @param {module:api/WfsApi~dirTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/DirEntry}
     */
    this.dirTree = function(wfsId, wfsPath, maxDepth, callback) {
      var postBody = null;

      // verify the required parameter 'wfsId' is set
      if (wfsId == undefined || wfsId == null) {
        throw "Missing the required parameter 'wfsId' when calling dirTree";
      }

      // verify the required parameter 'wfsPath' is set
      if (wfsPath == undefined || wfsPath == null) {
        throw "Missing the required parameter 'wfsPath' when calling dirTree";
      }

      // verify the required parameter 'maxDepth' is set
      if (maxDepth == undefined || maxDepth == null) {
        throw "Missing the required parameter 'maxDepth' when calling dirTree";
      }


      var pathParams = {
        'wfsId': wfsId,
        'wfsPath': wfsPath
      };
      var queryParams = {
        'maxDepth': maxDepth
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = DirEntry;

      return this.apiClient.callApi(
        '/wfs/{wfsId}/dir/{wfsPath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the move operation.
     * @callback module:api/WfsApi~moveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestOK} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Moves source resource to given path. Follows same rule to deal with existing path. So, this operation works like rename rather than mv. Just like copy(), this operations creates paraent dirs if needed and does not roll-back. Symbolic link and timestamp values will be moved without touching.
     * @param {String} wfsId webida file system id (same to workspace id) to access.
     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments
     * @param {String} srcPath source data path of some operations, without have heading /
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.noOverwrite does not overwrites any existing file while copying or moving (default to false)
     * @param {module:api/WfsApi~moveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/RestOK}
     */
    this.move = function(wfsId, wfsPath, srcPath, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'wfsId' is set
      if (wfsId == undefined || wfsId == null) {
        throw "Missing the required parameter 'wfsId' when calling move";
      }

      // verify the required parameter 'wfsPath' is set
      if (wfsPath == undefined || wfsPath == null) {
        throw "Missing the required parameter 'wfsPath' when calling move";
      }

      // verify the required parameter 'srcPath' is set
      if (srcPath == undefined || srcPath == null) {
        throw "Missing the required parameter 'srcPath' when calling move";
      }


      var pathParams = {
        'wfsId': wfsId,
        'wfsPath': wfsPath
      };
      var queryParams = {
        'srcPath': srcPath,
        'noOverwrite': opts['noOverwrite']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = RestOK;

      return this.apiClient.callApi(
        '/wfs/{wfsId}/any/{wfsPath}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readFile operation.
     * @callback module:api/WfsApi~readFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read file data on path
     * @param {String} wfsId webida file system id (same to workspace id) to access.
     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifModifiedSince Usual if-modified-since header. So, should be RFC-1123(same to RFC-822) format, not RFC-3339 (same to ISO-8601).
     * @param {String} opts.ifNoneMatch Usual if-non-match header, allowing only 1 e-tag value from previous readFile response, including weak prefix and quotation chars. This header value precedes if-modified-since, and server should ignore if-modified-since header when if-none-match header exists, as RFC-2616 declines.
     * @param {module:api/WfsApi~readFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {File}
     */
    this.readFile = function(wfsId, wfsPath, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'wfsId' is set
      if (wfsId == undefined || wfsId == null) {
        throw "Missing the required parameter 'wfsId' when calling readFile";
      }

      // verify the required parameter 'wfsPath' is set
      if (wfsPath == undefined || wfsPath == null) {
        throw "Missing the required parameter 'wfsPath' when calling readFile";
      }


      var pathParams = {
        'wfsId': wfsId,
        'wfsPath': wfsPath
      };
      var queryParams = {
      };
      var headerParams = {
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = File;

      return this.apiClient.callApi(
        '/wfs/{wfsId}/file/{wfsPath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the remove operation.
     * @callback module:api/WfsApi~removeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestOK} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete file or directory
     * @param {String} wfsId webida file system id (same to workspace id) to access.
     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.noRecursive if set, deleting non-empty directory will return 409 error. (default to false)
     * @param {module:api/WfsApi~removeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/RestOK}
     */
    this.remove = function(wfsId, wfsPath, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'wfsId' is set
      if (wfsId == undefined || wfsId == null) {
        throw "Missing the required parameter 'wfsId' when calling remove";
      }

      // verify the required parameter 'wfsPath' is set
      if (wfsPath == undefined || wfsPath == null) {
        throw "Missing the required parameter 'wfsPath' when calling remove";
      }


      var pathParams = {
        'wfsId': wfsId,
        'wfsPath': wfsPath
      };
      var queryParams = {
        'noRecursive': opts['noRecursive']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = RestOK;

      return this.apiClient.callApi(
        '/wfs/{wfsId}/any/{wfsPath}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stat operation.
     * @callback module:api/WfsApi~statCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get stats of given path. (stat() returns stats object in node and POSIX system). This API should be called only when stats of some file system path is stale for unknown reason (e.g. losting change events). Use dirTree operation and session events to detect stats, if possible. This API can be used to check a path is valid, existing one, but it&#39;s not recommended to check existence of individual paths by API. Clients should use dirTree and session events to synchorize some in-app file system with webida file system.
     * @param {String} wfsId webida file system id (same to workspace id) to access.
     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.dummyFor404 When true, operation ignore ENOENT error and returns DUMMY stats object instead of 404 error. (default to false)
     * @param {module:api/WfsApi~statCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Stats}
     */
    this.stat = function(wfsId, wfsPath, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'wfsId' is set
      if (wfsId == undefined || wfsId == null) {
        throw "Missing the required parameter 'wfsId' when calling stat";
      }

      // verify the required parameter 'wfsPath' is set
      if (wfsPath == undefined || wfsPath == null) {
        throw "Missing the required parameter 'wfsPath' when calling stat";
      }


      var pathParams = {
        'wfsId': wfsId,
        'wfsPath': wfsPath
      };
      var queryParams = {
        'dummyFor404': opts['dummyFor404']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = Stats;

      return this.apiClient.callApi(
        '/wfs/{wfsId}/any/{wfsPath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the writeFile operation.
     * @callback module:api/WfsApi~writeFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestOK} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates / updates file with body data. Server should write the file in atomic manner nd should not write down request body into final destination path directly. In other words,  wheather writeFile() succeeds or not, the contents of the file should not be corrupted nor half-written.
     * @param {String} wfsId webida file system id (same to workspace id) to access.
     * @param {String} wfsPath webida file system path to access. without heading /. should be placed at the end of path arguments
     * @param {File} data file contents to write.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ensureParents A flag to create all parent directories to create file or dir, like mkdir -p. This parameter does not create entire path, but ensures &#39;parent directory&#39; of the wfsPath parameter (default to false)
     * @param {module:api/WfsApi~writeFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/RestOK}
     */
    this.writeFile = function(wfsId, wfsPath, data, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'wfsId' is set
      if (wfsId == undefined || wfsId == null) {
        throw "Missing the required parameter 'wfsId' when calling writeFile";
      }

      // verify the required parameter 'wfsPath' is set
      if (wfsPath == undefined || wfsPath == null) {
        throw "Missing the required parameter 'wfsPath' when calling writeFile";
      }

      // verify the required parameter 'data' is set
      if (data == undefined || data == null) {
        throw "Missing the required parameter 'data' when calling writeFile";
      }


      var pathParams = {
        'wfsId': wfsId,
        'wfsPath': wfsPath
      };
      var queryParams = {
        'ensureParents': opts['ensureParents']
      };
      var headerParams = {
      };
      var formParams = {
        'data': data
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = RestOK;

      return this.apiClient.callApi(
        '/wfs/{wfsId}/file/{wfsPath}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
