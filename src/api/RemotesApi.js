/**
 * Webida Restful API
 * Restful API for Webida clients to use server's data & features
 *
 * OpenAPI spec version: 0.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RestError', 'model/RemoteAccess', 'model/RestOK'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RestError'), require('../model/RemoteAccess'), require('../model/RestOK'));
  } else {
    // Browser globals (root is window)
    if (!root.WebidaRestfulApi) {
      root.WebidaRestfulApi = {};
    }
    root.WebidaRestfulApi.RemotesApi = factory(root.WebidaRestfulApi.ApiClient, root.WebidaRestfulApi.RestError, root.WebidaRestfulApi.RemoteAccess, root.WebidaRestfulApi.RestOK);
  }
}(this, function(ApiClient, RestError, RemoteAccess, RestOK) {
  'use strict';

  /**
   * Remotes service.
   * @module api/RemotesApi
   * @version 0.6.0
   */

  /**
   * Constructs a new RemotesApi. 
   * @alias module:api/RemotesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the findRemoteAccesses operation.
     * @callback module:api/RemotesApi~findRemoteAccessesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RemoteAccess>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all access informations See RemoteWorkspaceAccess definition for details (no fancy find / search feature yet)
     * @param {module:api/RemotesApi~findRemoteAccessesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/RemoteAccess>}
     */
    this.findRemoteAccesses = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = [RemoteAccess];

      return this.apiClient.callApi(
        '/remotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putRemoteAccess operation.
     * @callback module:api/RemotesApi~putRemoteAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestOK} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ceates or updates a remote workspace access information
     * @param {module:model/RemoteAccess} body 
     * @param {module:api/RemotesApi~putRemoteAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/RestOK}
     */
    this.putRemoteAccess = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling putRemoteAccess";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = RestOK;

      return this.apiClient.callApi(
        '/remotes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeRemoteAccess operation.
     * @callback module:api/RemotesApi~removeRemoteAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteAccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes remote workspace access information
     * @param {String} workspaceId workspace Id of remote workspace
     * @param {module:api/RemotesApi~removeRemoteAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/RemoteAccess}
     */
    this.removeRemoteAccess = function(workspaceId, callback) {
      var postBody = null;

      // verify the required parameter 'workspaceId' is set
      if (workspaceId == undefined || workspaceId == null) {
        throw "Missing the required parameter 'workspaceId' when calling removeRemoteAccess";
      }


      var pathParams = {
      };
      var queryParams = {
        'workspaceId': workspaceId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['webida-simple-auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/octet-stream'];
      var returnType = RemoteAccess;

      return this.apiClient.callApi(
        '/remotes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
