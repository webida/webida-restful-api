/**
 * Webida Restful API
 * Restful API for Webida clients to use server's data & features
 *
 * OpenAPI spec version: 0.7.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.WebidaRestfulApi) {
      root.WebidaRestfulApi = {};
    }
    root.WebidaRestfulApi.Session = factory(root.WebidaRestfulApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Session model module.
   * @module model/Session
   * @version 0.7.1
   */

  /**
   * Constructs a new <code>Session</code>.
   * an application session per ide instance. bound to access token
   * @alias module:model/Session
   * @class
   * @param id {String} the id of a session. usually same to socket id.
   * @param name {String} human readable name, usually derived from workspace name.
   * @param state {module:model/Session.StateEnum} NORMAL = connected, normally working. CLOSING = server requested client to disconnect. Connection will be closed soon. TERMINATED = disconnected. server will remove this session from registry ASAP. 
   * @param clientAddress {String} the peer address of session connection. not always
   * @param connectedAt {Date} the time when socket connection is established
   */
  var exports = function(id, name, state, clientAddress, connectedAt) {
    var _this = this;

    _this['id'] = id;
    _this['name'] = name;
    _this['state'] = state;

    _this['clientAddress'] = clientAddress;
    _this['connectedAt'] = connectedAt;

  };

  /**
   * Constructs a <code>Session</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Session} obj Optional instance to populate.
   * @return {module:model/Session} The populated <code>Session</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('state')) {
        obj['state'] = ApiClient.convertToType(data['state'], 'String');
      }
      if (data.hasOwnProperty('workspaceId')) {
        obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
      }
      if (data.hasOwnProperty('clientAddress')) {
        obj['clientAddress'] = ApiClient.convertToType(data['clientAddress'], 'String');
      }
      if (data.hasOwnProperty('connectedAt')) {
        obj['connectedAt'] = ApiClient.convertToType(data['connectedAt'], 'Date');
      }
      if (data.hasOwnProperty('willCloseAt')) {
        obj['willCloseAt'] = ApiClient.convertToType(data['willCloseAt'], 'Date');
      }
    }
    return obj;
  }

  /**
   * the id of a session. usually same to socket id.
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * human readable name, usually derived from workspace name.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * NORMAL = connected, normally working. CLOSING = server requested client to disconnect. Connection will be closed soon. TERMINATED = disconnected. server will remove this session from registry ASAP. 
   * @member {module:model/Session.StateEnum} state
   */
  exports.prototype['state'] = undefined;
  /**
   * the id of workspace that this sessions is working on. If falsy, then this session is not belonged to any workpsace. Usually, dashboard / monitoring app will create a session without workspace id.
   * @member {String} workspaceId
   */
  exports.prototype['workspaceId'] = undefined;
  /**
   * the peer address of session connection. not always
   * @member {String} clientAddress
   */
  exports.prototype['clientAddress'] = undefined;
  /**
   * the time when socket connection is established
   * @member {Date} connectedAt
   */
  exports.prototype['connectedAt'] = undefined;
  /**
   * when state becomes CLOSING, server sets this time as deadline.
   * @member {Date} willCloseAt
   */
  exports.prototype['willCloseAt'] = undefined;


  /**
   * Allowed values for the <code>state</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StateEnum = {
    /**
     * value: "NORMAL"
     * @const
     */
    "NORMAL": "NORMAL",
    /**
     * value: "CLOSING"
     * @const
     */
    "CLOSING": "CLOSING",
    /**
     * value: "TERMINATED"
     * @const
     */
    "TERMINATED": "TERMINATED"  };


  return exports;
}));


