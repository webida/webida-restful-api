/**
 * Webida Restful API
 * Minimal, Basic Webida Restful API definitions
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.WebidaRestfulApi) {
      root.WebidaRestfulApi = {};
    }
    root.WebidaRestfulApi.Stats = factory(root.WebidaRestfulApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Stats model module.
   * @module model/Stats
   * @version 0.2.0
   */

  /**
   * Constructs a new <code>Stats</code>.
   * simplified/augmented fs.Stats class - see node.js doc for all properties
   * @alias module:model/Stats
   * @class
   * @param type {module:model/Stats.TypeEnum} All types except 'DUMMY' come from fs.Stats is*** methods results. (e.g. if isFile() is true, then type will be 'FILE') If type is not decidable by the methods, default type is 'FILE', for everything on the file system is basically a file. 'DUMMY' type means that some object 'does not exist for now'. Client may use 'DUMMY' type to mark something dangling, not written or created on real file system yet but visible to user. 
   * @param birthtime {Date} 
   * @param mtime {Date} 
   * @param mode {String} 
   * @param size {Integer} 
   * @param nlink {Integer} 
   */
  var exports = function(type, birthtime, mtime, mode, size, nlink) {
    var _this = this;

    _this['type'] = type;
    _this['birthtime'] = birthtime;
    _this['mtime'] = mtime;
    _this['mode'] = mode;
    _this['size'] = size;
    _this['nlink'] = nlink;
  };

  /**
   * Constructs a <code>Stats</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Stats} obj Optional instance to populate.
   * @return {module:model/Stats} The populated <code>Stats</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('birthtime')) {
        obj['birthtime'] = ApiClient.convertToType(data['birthtime'], 'Date');
      }
      if (data.hasOwnProperty('mtime')) {
        obj['mtime'] = ApiClient.convertToType(data['mtime'], 'Date');
      }
      if (data.hasOwnProperty('mode')) {
        obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
      }
      if (data.hasOwnProperty('size')) {
        obj['size'] = ApiClient.convertToType(data['size'], 'Integer');
      }
      if (data.hasOwnProperty('nlink')) {
        obj['nlink'] = ApiClient.convertToType(data['nlink'], 'Integer');
      }
    }
    return obj;
  }

  /**
   * All types except 'DUMMY' come from fs.Stats is*** methods results. (e.g. if isFile() is true, then type will be 'FILE') If type is not decidable by the methods, default type is 'FILE', for everything on the file system is basically a file. 'DUMMY' type means that some object 'does not exist for now'. Client may use 'DUMMY' type to mark something dangling, not written or created on real file system yet but visible to user. 
   * @member {module:model/Stats.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * @member {Date} birthtime
   */
  exports.prototype['birthtime'] = undefined;
  /**
   * @member {Date} mtime
   */
  exports.prototype['mtime'] = undefined;
  /**
   * @member {String} mode
   */
  exports.prototype['mode'] = undefined;
  /**
   * @member {Integer} size
   */
  exports.prototype['size'] = undefined;
  /**
   * @member {Integer} nlink
   */
  exports.prototype['nlink'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "FILE"
     * @const
     */
    "FILE": "FILE",
    /**
     * value: "DIRECTORY"
     * @const
     */
    "DIRECTORY": "DIRECTORY",
    /**
     * value: "BLOCK_DEVICE"
     * @const
     */
    "BLOCK_DEVICE": "BLOCK_DEVICE",
    /**
     * value: "CHARACTER_DEVICE"
     * @const
     */
    "CHARACTER_DEVICE": "CHARACTER_DEVICE",
    /**
     * value: "LINK"
     * @const
     */
    "LINK": "LINK",
    /**
     * value: "FIFO"
     * @const
     */
    "FIFO": "FIFO",
    /**
     * value: "SOCKET"
     * @const
     */
    "SOCKET": "SOCKET",
    /**
     * value: "DUMMY"
     * @const
     */
    "DUMMY": "DUMMY"  };


  return exports;
}));


