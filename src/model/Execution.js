/**
 * Webida Restful API
 * Restful API for Webida clients to use server's data & features
 *
 * OpenAPI spec version: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.WebidaRestfulApi) {
      root.WebidaRestfulApi = {};
    }
    root.WebidaRestfulApi.Execution = factory(root.WebidaRestfulApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Execution model module.
   * @module model/Execution
   * @version 0.3.0
   */

  /**
   * Constructs a new <code>Execution</code>.
   * execution request, simlilar to node.js exec()/spawn(). see node.js documentation for details of each properties. some properties are not configurable for portability    - encoding : fixed to utf-8    - shell : fixed to system defaults. (so, cmd.exe will be invoked in Windows OS, not sh             or bash in git-for-windows even they are available.)    - killSignal : fixed to SIGTERM. If process does not die, server can send SIGKILL or                   invoke taskkill, to ensure chlid process is killed.    - uid &amp; gid : will not be set for security    - stdio : all streams are handled by server. no options are avaliable to client.    - detached : always false 
   * @alias module:model/Execution
   * @class
   * @param command {String} The command to run. Server may not support pipe, redirection nor shell variables in command. Client should not assume any 'specific shell' in server and should not using the shell features for portability.  In windows system with unix sh (e.g. cygwin or mingw from git-for-windows), usually a shell script in PATH may work as command but probably allocates console window while running the command. Implementations (both of server & client) should avoid allocating additional console device while running service for costs and UX,  and should provide a portable way to invoke commands. Shortly, when a service/product embeds some '.sh' file to run, it must provide '.cmd' file doing same thing, always. 
   * @param args {Array.<String>} the arguments array. Server can join this args to command with proper white-space char, when underlying platform api (e.g. child_process#exec() in node.js) does not support additional arguments vector. It's recommended to use args vector than making a long command, to find & see child processes easily with this Rest API. So, args should be always provided, even empty array.  When some arguments has a white space (e.g. C:\\Program Files\\webida), usually invoking command understands escaping or quotation, but not always. Client should add proper escaping or quotation chars to args vector manually. server should not change any command or arguments. 
   */
  var exports = function(command, args) {
    var _this = this;


    _this['command'] = command;
    _this['args'] = args;



  };

  /**
   * Constructs a <code>Execution</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Execution} obj Optional instance to populate.
   * @return {module:model/Execution} The populated <code>Execution</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('command')) {
        obj['command'] = ApiClient.convertToType(data['command'], 'String');
      }
      if (data.hasOwnProperty('args')) {
        obj['args'] = ApiClient.convertToType(data['args'], ['String']);
      }
      if (data.hasOwnProperty('cwd')) {
        obj['cwd'] = ApiClient.convertToType(data['cwd'], 'String');
      }
      if (data.hasOwnProperty('timeout')) {
        obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Integer');
      }
      if (data.hasOwnProperty('maxBuffer')) {
        obj['maxBuffer'] = ApiClient.convertToType(data['maxBuffer'], 'Integer');
      }
    }
    return obj;
  }

  /**
   * unique identifier of execution, to demux response stream or cancel request. Server should reject an async exec request without id. 
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The command to run. Server may not support pipe, redirection nor shell variables in command. Client should not assume any 'specific shell' in server and should not using the shell features for portability.  In windows system with unix sh (e.g. cygwin or mingw from git-for-windows), usually a shell script in PATH may work as command but probably allocates console window while running the command. Implementations (both of server & client) should avoid allocating additional console device while running service for costs and UX,  and should provide a portable way to invoke commands. Shortly, when a service/product embeds some '.sh' file to run, it must provide '.cmd' file doing same thing, always. 
   * @member {String} command
   */
  exports.prototype['command'] = undefined;
  /**
   * the arguments array. Server can join this args to command with proper white-space char, when underlying platform api (e.g. child_process#exec() in node.js) does not support additional arguments vector. It's recommended to use args vector than making a long command, to find & see child processes easily with this Rest API. So, args should be always provided, even empty array.  When some arguments has a white space (e.g. C:\\Program Files\\webida), usually invoking command understands escaping or quotation, but not always. Client should add proper escaping or quotation chars to args vector manually. server should not change any command or arguments. 
   * @member {Array.<String>} args
   */
  exports.prototype['args'] = undefined;
  /**
   * Current working directory of spawned process, relative to workspace root. If abscent, cwd will be the workspace directory. Does not accept any evaluatable form like $HOME, %USERPROFILE%. path should be unixified. Server may reject an 'absolute' property. 
   * @member {String} cwd
   */
  exports.prototype['cwd'] = undefined;
  /**
   * The value which In 'miliseconds' the maximum amount of time the child is allowed to run. (not idle time of stdout / stderr stream) for sync exec. Server should not apply default value for async exec, when omitted. The child process spawned by async execution should be killed when  1) server goes down  2) process exits by self  3) cancel operation is invoked 
   * @member {Integer} timeout
   */
  exports.prototype['timeout'] = undefined;
  /**
   * Largest amount of data (in bytes) allowed on stdout or stderr for sync exec. Server should not apply this limit to async execution. In sync exec, server may kill a child process that has exceeded limit. default value is 512KB, large enough. 
   * @member {Integer} maxBuffer
   */
  exports.prototype['maxBuffer'] = undefined;



  return exports;
}));


