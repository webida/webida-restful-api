/**
 * Webida Restful API
 * Restful API for Webida clients to use server's data & features
 *
 * OpenAPI spec version: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.WebidaRestfulApi) {
      root.WebidaRestfulApi = {};
    }
    root.WebidaRestfulApi.Execution = factory(root.WebidaRestfulApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Execution model module.
   * @module model/Execution
   * @version 0.3.0
   */

  /**
   * Constructs a new <code>Execution</code>.
   * execution request, simlilar to node.js spawn(). see node.js documentation for details of each properties. some properties are not configurable for portability    - encoding : fixed to utf-8    - shell : fixed to system default. Using shell variables in command may not work.    - killSignal : fixed to SIGTERM. If process does not die, server can send SIGKILL or                   invoke taskkill to ensure chlid process is killed.    - uid &amp; gid : will not be set for security    - stdio : all streams are handled by server. no options are avaliable to client.    - shell : always false.    - detached : always false 
   * @alias module:model/Execution
   * @class
   * @param command {String} command to run. should not contain any arguments, pipes, redirections 
   * @param args {Array.<String>} the arguments array
   */
  var exports = function(command, args) {
    var _this = this;


    _this['command'] = command;
    _this['args'] = args;



  };

  /**
   * Constructs a <code>Execution</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Execution} obj Optional instance to populate.
   * @return {module:model/Execution} The populated <code>Execution</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('command')) {
        obj['command'] = ApiClient.convertToType(data['command'], 'String');
      }
      if (data.hasOwnProperty('args')) {
        obj['args'] = ApiClient.convertToType(data['args'], ['String']);
      }
      if (data.hasOwnProperty('cwd')) {
        obj['cwd'] = ApiClient.convertToType(data['cwd'], 'String');
      }
      if (data.hasOwnProperty('input')) {
        obj['input'] = ApiClient.convertToType(data['input'], 'String');
      }
      if (data.hasOwnProperty('timeout')) {
        obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Integer');
      }
    }
    return obj;
  }

  /**
   * unique identifier of execution, to demux response stream or cancel request. async exec request should have id, always. For synchronous execution, missing id will be generated by server with random string & timestamp. 
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * command to run. should not contain any arguments, pipes, redirections 
   * @member {String} command
   */
  exports.prototype['command'] = undefined;
  /**
   * the arguments array
   * @member {Array.<String>} args
   */
  exports.prototype['args'] = undefined;
  /**
   * Current working directory of spawned process, relative to workspace root. If abscent, cwd will be the workspace root directory. Does not accept any evaluatable form like $HOME, %USERPROFILE%. As wfs operations, path should be unixified. But, unlikely, while the wfs operations cut heading \"/\" in path with URI normlization, this operation does not convert path to relateive and returns error for the argument. 
   * @member {String} cwd
   */
  exports.prototype['cwd'] = undefined;
  /**
   * input string for child process. if falsy, no input will be available to child. (interactive execution via websocket is not supported for most of such processes  requires tty, not standard i/o) 
   * @member {String} input
   */
  exports.prototype['input'] = undefined;
  /**
   * The value which In \"milliseconds\" the maximum amount of time the child is allowed to run. (not idle time of stdout / stderr stream) if undefined, server sets default timeout value 5 min to synchronous execution requests. If request specifies async execution and sets this value to falsy, server should not kill the child process until   1) The process exists by self   2) cancel operation is invoked by api request   3) The workspace executing the process is removed by api request   4) Server Stops Terminiating any \"too-long-lived\" child process are not graceful, as cancel() is. 
   * @member {Integer} timeout
   */
  exports.prototype['timeout'] = undefined;



  return exports;
}));


